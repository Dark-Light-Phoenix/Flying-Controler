
Flying controler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c5c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003df4  08003df4  00013df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e10  08003e10  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e10  08003e10  00013e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e18  08003e18  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e18  08003e18  00013e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e1c  08003e1c  00013e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003110  20000060  08003e7c  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003170  08003e7c  00023170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007876  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016ff  00000000  00000000  00027945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000750  00000000  00000000  00029048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000058f  00000000  00000000  00029798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000159e2  00000000  00000000  00029d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a7fa  00000000  00000000  0003f709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084e63  00000000  00000000  00049f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002104  00000000  00000000  000ced68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d0e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000060 	.word	0x20000060
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003ddc 	.word	0x08003ddc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000064 	.word	0x20000064
 80001d4:	08003ddc 	.word	0x08003ddc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b970 	b.w	8000e48 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9e08      	ldr	r6, [sp, #32]
 8000b86:	460d      	mov	r5, r1
 8000b88:	4604      	mov	r4, r0
 8000b8a:	460f      	mov	r7, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d14a      	bne.n	8000c26 <__udivmoddi4+0xa6>
 8000b90:	428a      	cmp	r2, r1
 8000b92:	4694      	mov	ip, r2
 8000b94:	d965      	bls.n	8000c62 <__udivmoddi4+0xe2>
 8000b96:	fab2 f382 	clz	r3, r2
 8000b9a:	b143      	cbz	r3, 8000bae <__udivmoddi4+0x2e>
 8000b9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba0:	f1c3 0220 	rsb	r2, r3, #32
 8000ba4:	409f      	lsls	r7, r3
 8000ba6:	fa20 f202 	lsr.w	r2, r0, r2
 8000baa:	4317      	orrs	r7, r2
 8000bac:	409c      	lsls	r4, r3
 8000bae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bb2:	fa1f f58c 	uxth.w	r5, ip
 8000bb6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bba:	0c22      	lsrs	r2, r4, #16
 8000bbc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bc0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bc4:	fb01 f005 	mul.w	r0, r1, r5
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	d90a      	bls.n	8000be2 <__udivmoddi4+0x62>
 8000bcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bd4:	f080 811c 	bcs.w	8000e10 <__udivmoddi4+0x290>
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	f240 8119 	bls.w	8000e10 <__udivmoddi4+0x290>
 8000bde:	3902      	subs	r1, #2
 8000be0:	4462      	add	r2, ip
 8000be2:	1a12      	subs	r2, r2, r0
 8000be4:	b2a4      	uxth	r4, r4
 8000be6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bea:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf2:	fb00 f505 	mul.w	r5, r0, r5
 8000bf6:	42a5      	cmp	r5, r4
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x90>
 8000bfa:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c02:	f080 8107 	bcs.w	8000e14 <__udivmoddi4+0x294>
 8000c06:	42a5      	cmp	r5, r4
 8000c08:	f240 8104 	bls.w	8000e14 <__udivmoddi4+0x294>
 8000c0c:	4464      	add	r4, ip
 8000c0e:	3802      	subs	r0, #2
 8000c10:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c14:	1b64      	subs	r4, r4, r5
 8000c16:	2100      	movs	r1, #0
 8000c18:	b11e      	cbz	r6, 8000c22 <__udivmoddi4+0xa2>
 8000c1a:	40dc      	lsrs	r4, r3
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0xbc>
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	f000 80ed 	beq.w	8000e0a <__udivmoddi4+0x28a>
 8000c30:	2100      	movs	r1, #0
 8000c32:	e9c6 0500 	strd	r0, r5, [r6]
 8000c36:	4608      	mov	r0, r1
 8000c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3c:	fab3 f183 	clz	r1, r3
 8000c40:	2900      	cmp	r1, #0
 8000c42:	d149      	bne.n	8000cd8 <__udivmoddi4+0x158>
 8000c44:	42ab      	cmp	r3, r5
 8000c46:	d302      	bcc.n	8000c4e <__udivmoddi4+0xce>
 8000c48:	4282      	cmp	r2, r0
 8000c4a:	f200 80f8 	bhi.w	8000e3e <__udivmoddi4+0x2be>
 8000c4e:	1a84      	subs	r4, r0, r2
 8000c50:	eb65 0203 	sbc.w	r2, r5, r3
 8000c54:	2001      	movs	r0, #1
 8000c56:	4617      	mov	r7, r2
 8000c58:	2e00      	cmp	r6, #0
 8000c5a:	d0e2      	beq.n	8000c22 <__udivmoddi4+0xa2>
 8000c5c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c60:	e7df      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000c62:	b902      	cbnz	r2, 8000c66 <__udivmoddi4+0xe6>
 8000c64:	deff      	udf	#255	; 0xff
 8000c66:	fab2 f382 	clz	r3, r2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f040 8090 	bne.w	8000d90 <__udivmoddi4+0x210>
 8000c70:	1a8a      	subs	r2, r1, r2
 8000c72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c80:	fb07 2015 	mls	r0, r7, r5, r2
 8000c84:	0c22      	lsrs	r2, r4, #16
 8000c86:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c8a:	fb0e f005 	mul.w	r0, lr, r5
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x124>
 8000c92:	eb1c 0202 	adds.w	r2, ip, r2
 8000c96:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x122>
 8000c9c:	4290      	cmp	r0, r2
 8000c9e:	f200 80cb 	bhi.w	8000e38 <__udivmoddi4+0x2b8>
 8000ca2:	4645      	mov	r5, r8
 8000ca4:	1a12      	subs	r2, r2, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cac:	fb07 2210 	mls	r2, r7, r0, r2
 8000cb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x14e>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cc4:	d202      	bcs.n	8000ccc <__udivmoddi4+0x14c>
 8000cc6:	45a6      	cmp	lr, r4
 8000cc8:	f200 80bb 	bhi.w	8000e42 <__udivmoddi4+0x2c2>
 8000ccc:	4610      	mov	r0, r2
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cd6:	e79f      	b.n	8000c18 <__udivmoddi4+0x98>
 8000cd8:	f1c1 0720 	rsb	r7, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cea:	fa20 f307 	lsr.w	r3, r0, r7
 8000cee:	40fd      	lsrs	r5, r7
 8000cf0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cfa:	fa1f fe8c 	uxth.w	lr, ip
 8000cfe:	fb09 5518 	mls	r5, r9, r8, r5
 8000d02:	0c1c      	lsrs	r4, r3, #16
 8000d04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d08:	fb08 f50e 	mul.w	r5, r8, lr
 8000d0c:	42a5      	cmp	r5, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	fa00 f001 	lsl.w	r0, r0, r1
 8000d16:	d90b      	bls.n	8000d30 <__udivmoddi4+0x1b0>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d20:	f080 8088 	bcs.w	8000e34 <__udivmoddi4+0x2b4>
 8000d24:	42a5      	cmp	r5, r4
 8000d26:	f240 8085 	bls.w	8000e34 <__udivmoddi4+0x2b4>
 8000d2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2e:	4464      	add	r4, ip
 8000d30:	1b64      	subs	r4, r4, r5
 8000d32:	b29d      	uxth	r5, r3
 8000d34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d38:	fb09 4413 	mls	r4, r9, r3, r4
 8000d3c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d40:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x1da>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d50:	d26c      	bcs.n	8000e2c <__udivmoddi4+0x2ac>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	d96a      	bls.n	8000e2c <__udivmoddi4+0x2ac>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	4464      	add	r4, ip
 8000d5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	42ac      	cmp	r4, r5
 8000d68:	46c8      	mov	r8, r9
 8000d6a:	46ae      	mov	lr, r5
 8000d6c:	d356      	bcc.n	8000e1c <__udivmoddi4+0x29c>
 8000d6e:	d053      	beq.n	8000e18 <__udivmoddi4+0x298>
 8000d70:	b156      	cbz	r6, 8000d88 <__udivmoddi4+0x208>
 8000d72:	ebb0 0208 	subs.w	r2, r0, r8
 8000d76:	eb64 040e 	sbc.w	r4, r4, lr
 8000d7a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d7e:	40ca      	lsrs	r2, r1
 8000d80:	40cc      	lsrs	r4, r1
 8000d82:	4317      	orrs	r7, r2
 8000d84:	e9c6 7400 	strd	r7, r4, [r6]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d90:	f1c3 0120 	rsb	r1, r3, #32
 8000d94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d98:	fa20 f201 	lsr.w	r2, r0, r1
 8000d9c:	fa25 f101 	lsr.w	r1, r5, r1
 8000da0:	409d      	lsls	r5, r3
 8000da2:	432a      	orrs	r2, r5
 8000da4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da8:	fa1f fe8c 	uxth.w	lr, ip
 8000dac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db0:	fb07 1510 	mls	r5, r7, r0, r1
 8000db4:	0c11      	lsrs	r1, r2, #16
 8000db6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dba:	fb00 f50e 	mul.w	r5, r0, lr
 8000dbe:	428d      	cmp	r5, r1
 8000dc0:	fa04 f403 	lsl.w	r4, r4, r3
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x258>
 8000dc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dce:	d22f      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000dd0:	428d      	cmp	r5, r1
 8000dd2:	d92d      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	4461      	add	r1, ip
 8000dd8:	1b49      	subs	r1, r1, r5
 8000dda:	b292      	uxth	r2, r2
 8000ddc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000de0:	fb07 1115 	mls	r1, r7, r5, r1
 8000de4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dec:	4291      	cmp	r1, r2
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x282>
 8000df0:	eb1c 0202 	adds.w	r2, ip, r2
 8000df4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df8:	d216      	bcs.n	8000e28 <__udivmoddi4+0x2a8>
 8000dfa:	4291      	cmp	r1, r2
 8000dfc:	d914      	bls.n	8000e28 <__udivmoddi4+0x2a8>
 8000dfe:	3d02      	subs	r5, #2
 8000e00:	4462      	add	r2, ip
 8000e02:	1a52      	subs	r2, r2, r1
 8000e04:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e08:	e738      	b.n	8000c7c <__udivmoddi4+0xfc>
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e708      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000e10:	4639      	mov	r1, r7
 8000e12:	e6e6      	b.n	8000be2 <__udivmoddi4+0x62>
 8000e14:	4610      	mov	r0, r2
 8000e16:	e6fb      	b.n	8000c10 <__udivmoddi4+0x90>
 8000e18:	4548      	cmp	r0, r9
 8000e1a:	d2a9      	bcs.n	8000d70 <__udivmoddi4+0x1f0>
 8000e1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e20:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e24:	3b01      	subs	r3, #1
 8000e26:	e7a3      	b.n	8000d70 <__udivmoddi4+0x1f0>
 8000e28:	4645      	mov	r5, r8
 8000e2a:	e7ea      	b.n	8000e02 <__udivmoddi4+0x282>
 8000e2c:	462b      	mov	r3, r5
 8000e2e:	e794      	b.n	8000d5a <__udivmoddi4+0x1da>
 8000e30:	4640      	mov	r0, r8
 8000e32:	e7d1      	b.n	8000dd8 <__udivmoddi4+0x258>
 8000e34:	46d0      	mov	r8, sl
 8000e36:	e77b      	b.n	8000d30 <__udivmoddi4+0x1b0>
 8000e38:	3d02      	subs	r5, #2
 8000e3a:	4462      	add	r2, ip
 8000e3c:	e732      	b.n	8000ca4 <__udivmoddi4+0x124>
 8000e3e:	4608      	mov	r0, r1
 8000e40:	e70a      	b.n	8000c58 <__udivmoddi4+0xd8>
 8000e42:	4464      	add	r4, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e742      	b.n	8000cce <__udivmoddi4+0x14e>

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	0000      	movs	r0, r0
	...

08000e50 <BME280_ReadPressure>:
//		Height[i] = height;
//	}
//}

void BME280_ReadPressure (void)
{
 8000e50:	b5b0      	push	{r4, r5, r7, lr}
 8000e52:	b094      	sub	sp, #80	; 0x50
 8000e54:	af04      	add	r7, sp, #16
	int i;

	for (i = 0; i < 100; i++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e5a:	e085      	b.n	8000f68 <BME280_ReadPressure+0x118>
	{
		uint8_t pressure_data [3];

		HAL_I2C_Mem_Read (&hi2c2, BME280_ADDRESS, PRESS_MSB_REG, 1, pressure_data, 3, 1000);
 8000e5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e60:	9302      	str	r3, [sp, #8]
 8000e62:	2303      	movs	r3, #3
 8000e64:	9301      	str	r3, [sp, #4]
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	22f7      	movs	r2, #247	; 0xf7
 8000e6e:	2176      	movs	r1, #118	; 0x76
 8000e70:	484d      	ldr	r0, [pc, #308]	; (8000fa8 <BME280_ReadPressure+0x158>)
 8000e72:	f001 fb55 	bl	8002520 <HAL_I2C_Mem_Read>
		pressure = ((uint32_t) pressure_data [0] << 12 | (uint32_t) pressure_data [1] << 4 | (uint32_t) pressure_data [2] >> 4);
 8000e76:	793b      	ldrb	r3, [r7, #4]
 8000e78:	031a      	lsls	r2, r3, #12
 8000e7a:	797b      	ldrb	r3, [r7, #5]
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	79ba      	ldrb	r2, [r7, #6]
 8000e82:	0912      	lsrs	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	4313      	orrs	r3, r2
 8000e88:	4a48      	ldr	r2, [pc, #288]	; (8000fac <BME280_ReadPressure+0x15c>)
 8000e8a:	6013      	str	r3, [r2, #0]
		Pressure [i] = pressure / 256.0; // Convert to Pascal
 8000e8c:	4b47      	ldr	r3, [pc, #284]	; (8000fac <BME280_ReadPressure+0x15c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fae3 	bl	800045c <__aeabi_ui2d>
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	4b45      	ldr	r3, [pc, #276]	; (8000fb0 <BME280_ReadPressure+0x160>)
 8000e9c:	f7ff fc82 	bl	80007a4 <__aeabi_ddiv>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4843      	ldr	r0, [pc, #268]	; (8000fb4 <BME280_ReadPressure+0x164>)
 8000ea6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000ea8:	00c9      	lsls	r1, r1, #3
 8000eaa:	4401      	add	r1, r0
 8000eac:	e9c1 2300 	strd	r2, r3, [r1]

		const double T0 = 288.15; // Temperature at sea level in Kelvin (15 °C)
 8000eb0:	a333      	add	r3, pc, #204	; (adr r3, 8000f80 <BME280_ReadPressure+0x130>)
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		const double M = 0.002896;  //
 8000eba:	a333      	add	r3, pc, #204	; (adr r3, 8000f88 <BME280_ReadPressure+0x138>)
 8000ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		const double P0 = 101325; // Pressure at sea level in Pascal
 8000ec4:	a332      	add	r3, pc, #200	; (adr r3, 8000f90 <BME280_ReadPressure+0x140>)
 8000ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eca:	e9c7 2308 	strd	r2, r3, [r7, #32]
		const double R = 8.31; // Universal gas constant
 8000ece:	a332      	add	r3, pc, #200	; (adr r3, 8000f98 <BME280_ReadPressure+0x148>)
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		const double g = 9.8; // Acceleration free fall
 8000ed8:	a331      	add	r3, pc, #196	; (adr r3, 8000fa0 <BME280_ReadPressure+0x150>)
 8000eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ede:	e9c7 2304 	strd	r2, r3, [r7, #16]

		double height = ((T0 * R) / (g * M)) * log (P0 / Pressure [i]);
 8000ee2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ee6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000eea:	f7ff fb31 	bl	8000550 <__aeabi_dmul>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4614      	mov	r4, r2
 8000ef4:	461d      	mov	r5, r3
 8000ef6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000efa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000efe:	f7ff fb27 	bl	8000550 <__aeabi_dmul>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4620      	mov	r0, r4
 8000f08:	4629      	mov	r1, r5
 8000f0a:	f7ff fc4b 	bl	80007a4 <__aeabi_ddiv>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4614      	mov	r4, r2
 8000f14:	461d      	mov	r5, r3
 8000f16:	4a27      	ldr	r2, [pc, #156]	; (8000fb4 <BME280_ReadPressure+0x164>)
 8000f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	4413      	add	r3, r2
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f26:	f7ff fc3d 	bl	80007a4 <__aeabi_ddiv>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	ec43 2b17 	vmov	d7, r2, r3
 8000f32:	eeb0 0a47 	vmov.f32	s0, s14
 8000f36:	eef0 0a67 	vmov.f32	s1, s15
 8000f3a:	f002 fd4d 	bl	80039d8 <log>
 8000f3e:	ec53 2b10 	vmov	r2, r3, d0
 8000f42:	4620      	mov	r0, r4
 8000f44:	4629      	mov	r1, r5
 8000f46:	f7ff fb03 	bl	8000550 <__aeabi_dmul>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	e9c7 2302 	strd	r2, r3, [r7, #8]

		Height [i] = height; // Writing data to massive for height
 8000f52:	4a19      	ldr	r2, [pc, #100]	; (8000fb8 <BME280_ReadPressure+0x168>)
 8000f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	18d1      	adds	r1, r2, r3
 8000f5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f5e:	e9c1 2300 	strd	r2, r3, [r1]
	for (i = 0; i < 100; i++)
 8000f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f64:	3301      	adds	r3, #1
 8000f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f6a:	2b63      	cmp	r3, #99	; 0x63
 8000f6c:	f77f af76 	ble.w	8000e5c <BME280_ReadPressure+0xc>
	}
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3740      	adds	r7, #64	; 0x40
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bdb0      	pop	{r4, r5, r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	f3af 8000 	nop.w
 8000f80:	66666666 	.word	0x66666666
 8000f84:	40720266 	.word	0x40720266
 8000f88:	294141ea 	.word	0x294141ea
 8000f8c:	3f67b95a 	.word	0x3f67b95a
 8000f90:	00000000 	.word	0x00000000
 8000f94:	40f8bcd0 	.word	0x40f8bcd0
 8000f98:	51eb851f 	.word	0x51eb851f
 8000f9c:	40209eb8 	.word	0x40209eb8
 8000fa0:	9999999a 	.word	0x9999999a
 8000fa4:	40239999 	.word	0x40239999
 8000fa8:	20002fe0 	.word	0x20002fe0
 8000fac:	200009e0 	.word	0x200009e0
 8000fb0:	40700000 	.word	0x40700000
 8000fb4:	20000080 	.word	0x20000080
 8000fb8:	200003a0 	.word	0x200003a0

08000fbc <BME280_ReadTemperature>:

void BME280_ReadTemperature (void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08c      	sub	sp, #48	; 0x30
 8000fc0:	af04      	add	r7, sp, #16
	uint8_t temperature_data [3];
	int i;

	for (i = 0; i < 100; i++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	e056      	b.n	8001076 <BME280_ReadTemperature+0xba>
	{
		HAL_I2C_Mem_Read(&hi2c2, BME280_ADDRESS << 1, BME280_TEMPERATURE_MSB_REG, I2C_MEMADD_SIZE_8BIT, temperature_data, 3, 1000);
 8000fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	2303      	movs	r3, #3
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	22fa      	movs	r2, #250	; 0xfa
 8000fda:	21ec      	movs	r1, #236	; 0xec
 8000fdc:	482a      	ldr	r0, [pc, #168]	; (8001088 <BME280_ReadTemperature+0xcc>)
 8000fde:	f001 fa9f 	bl	8002520 <HAL_I2C_Mem_Read>

        int32_t adc_T = ((uint32_t)temperature_data [0] << 12) | ((uint32_t)temperature_data [1] << 4) | (temperature_data [2] >> 4);
 8000fe2:	793b      	ldrb	r3, [r7, #4]
 8000fe4:	031a      	lsls	r2, r3, #12
 8000fe6:	797b      	ldrb	r3, [r7, #5]
 8000fe8:	011b      	lsls	r3, r3, #4
 8000fea:	4313      	orrs	r3, r2
 8000fec:	79ba      	ldrb	r2, [r7, #6]
 8000fee:	0912      	lsrs	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        int32_t t1, t2, T;

        t1 = ((((adc_T >> 3) - ((int32_t)((uint32_t)temperature_data [0] << 8))) * ((int32_t)*((uint32_t *)0x400001E8))) >> 12);
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	10db      	asrs	r3, r3, #3
 8000ffa:	793a      	ldrb	r2, [r7, #4]
 8000ffc:	0212      	lsls	r2, r2, #8
 8000ffe:	1a9b      	subs	r3, r3, r2
 8001000:	4a22      	ldr	r2, [pc, #136]	; (800108c <BME280_ReadTemperature+0xd0>)
 8001002:	6812      	ldr	r2, [r2, #0]
 8001004:	fb02 f303 	mul.w	r3, r2, r3
 8001008:	131b      	asrs	r3, r3, #12
 800100a:	617b      	str	r3, [r7, #20]
        t2 = (((((adc_T >> 4) - ((int32_t)((uint32_t)temperature_data [0] << 8))) * ((adc_T >> 4) - ((int32_t)((uint32_t)temperature_data [0] << 8)))) >> 12) * ((int32_t)*((uint32_t *)0x400001EC))) >> 14;
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	111b      	asrs	r3, r3, #4
 8001010:	793a      	ldrb	r2, [r7, #4]
 8001012:	0212      	lsls	r2, r2, #8
 8001014:	1a9b      	subs	r3, r3, r2
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	1112      	asrs	r2, r2, #4
 800101a:	7939      	ldrb	r1, [r7, #4]
 800101c:	0209      	lsls	r1, r1, #8
 800101e:	1a52      	subs	r2, r2, r1
 8001020:	fb02 f303 	mul.w	r3, r2, r3
 8001024:	131b      	asrs	r3, r3, #12
 8001026:	4a1a      	ldr	r2, [pc, #104]	; (8001090 <BME280_ReadTemperature+0xd4>)
 8001028:	6812      	ldr	r2, [r2, #0]
 800102a:	fb02 f303 	mul.w	r3, r2, r3
 800102e:	139b      	asrs	r3, r3, #14
 8001030:	613b      	str	r3, [r7, #16]

        T = t1 + t2;
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4413      	add	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]

        float temperature = (T / 16384.0);
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f7ff fa1e 	bl	800047c <__aeabi_i2d>
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <BME280_ReadTemperature+0xd8>)
 8001046:	f7ff fbad 	bl	80007a4 <__aeabi_ddiv>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	f7ff fd2d 	bl	8000ab0 <__aeabi_d2f>
 8001056:	4603      	mov	r3, r0
 8001058:	60bb      	str	r3, [r7, #8]

        Temperature[i] = temperature; //Writing data to massive for temperature
 800105a:	68b8      	ldr	r0, [r7, #8]
 800105c:	f7ff fa20 	bl	80004a0 <__aeabi_f2d>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <BME280_ReadTemperature+0xdc>)
 8001066:	69f9      	ldr	r1, [r7, #28]
 8001068:	00c9      	lsls	r1, r1, #3
 800106a:	4401      	add	r1, r0
 800106c:	e9c1 2300 	strd	r2, r3, [r1]
	for (i = 0; i < 100; i++)
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	3301      	adds	r3, #1
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	2b63      	cmp	r3, #99	; 0x63
 800107a:	dda5      	ble.n	8000fc8 <BME280_ReadTemperature+0xc>
	}
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3720      	adds	r7, #32
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20002fe0 	.word	0x20002fe0
 800108c:	400001e8 	.word	0x400001e8
 8001090:	400001ec 	.word	0x400001ec
 8001094:	40d00000 	.word	0x40d00000
 8001098:	200006c0 	.word	0x200006c0

0800109c <initKalmanFilterAccel>:

float x_gyro = 0;
float P_gyro = 1;

void initKalmanFilterAccel(KalmanFilterAccel *filter) // Function to initialize Kalman filter for accelerometer
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
    filter->x = 0;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
    filter->P = 1;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010b2:	605a      	str	r2, [r3, #4]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <initKalmanFilterGyro>:

void initKalmanFilterGyro(KalmanFilterGyro *filter) // Function to initialize Kalman filter for gyroscope
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
    filter->x = 0;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
    filter->P = 1;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010d6:	605a      	str	r2, [r3, #4]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <KalmanFilterUpdateAccel>:

void KalmanFilterUpdateAccel(KalmanFilterAccel *filter, float z, float R, float H) // Function to update Kalman filter for accelerometer
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80010f0:	edc7 0a01 	vstr	s1, [r7, #4]
 80010f4:	ed87 1a00 	vstr	s2, [r7]
    float x_pred = filter->x;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	61fb      	str	r3, [r7, #28]
    float P_pred = filter->P;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	61bb      	str	r3, [r7, #24]

    float K = P_pred * H / (H * P_pred * H + R);
 8001104:	ed97 7a06 	vldr	s14, [r7, #24]
 8001108:	edd7 7a00 	vldr	s15, [r7]
 800110c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001110:	ed97 7a00 	vldr	s14, [r7]
 8001114:	edd7 7a06 	vldr	s15, [r7, #24]
 8001118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800111c:	edd7 7a00 	vldr	s15, [r7]
 8001120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001124:	edd7 7a01 	vldr	s15, [r7, #4]
 8001128:	ee37 7a27 	vadd.f32	s14, s14, s15
 800112c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001130:	edc7 7a05 	vstr	s15, [r7, #20]
    filter->x = x_pred + K * (z - H * x_pred);
 8001134:	ed97 7a00 	vldr	s14, [r7]
 8001138:	edd7 7a07 	vldr	s15, [r7, #28]
 800113c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001140:	ed97 7a02 	vldr	s14, [r7, #8]
 8001144:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001148:	edd7 7a05 	vldr	s15, [r7, #20]
 800114c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001150:	edd7 7a07 	vldr	s15, [r7, #28]
 8001154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	edc3 7a00 	vstr	s15, [r3]
    filter->P = (1 - K * H) * P_pred;
 800115e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001162:	edd7 7a00 	vldr	s15, [r7]
 8001166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800116a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800116e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001172:	edd7 7a06 	vldr	s15, [r7, #24]
 8001176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001180:	bf00      	nop
 8001182:	3724      	adds	r7, #36	; 0x24
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <KalmanFilterUpdateGyro>:

void KalmanFilterUpdateGyro(KalmanFilterGyro *filter, float z, float R, float H) // Function to update Kalman filter for gyroscope
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	ed87 0a02 	vstr	s0, [r7, #8]
 8001198:	edc7 0a01 	vstr	s1, [r7, #4]
 800119c:	ed87 1a00 	vstr	s2, [r7]
    float x_pred = filter->x;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	61fb      	str	r3, [r7, #28]
    float P_pred = filter->P;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]

    float K = P_pred * H / (H * P_pred * H + R);
 80011ac:	ed97 7a06 	vldr	s14, [r7, #24]
 80011b0:	edd7 7a00 	vldr	s15, [r7]
 80011b4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011b8:	ed97 7a00 	vldr	s14, [r7]
 80011bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80011c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c4:	edd7 7a00 	vldr	s15, [r7]
 80011c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d8:	edc7 7a05 	vstr	s15, [r7, #20]
    filter->x = x_pred + K * (z - H * x_pred);
 80011dc:	ed97 7a00 	vldr	s14, [r7]
 80011e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80011ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80011fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	edc3 7a00 	vstr	s15, [r3]
    filter->P = (1 - K * H) * P_pred;
 8001206:	ed97 7a05 	vldr	s14, [r7, #20]
 800120a:	edd7 7a00 	vldr	s15, [r7]
 800120e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001216:	ee37 7a67 	vsub.f32	s14, s14, s15
 800121a:	edd7 7a06 	vldr	s15, [r7, #24]
 800121e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001228:	bf00      	nop
 800122a:	3724      	adds	r7, #36	; 0x24
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <MPU6050_Init>:
int16_t Gyro_X_RAW = 0; // Initialization variables for 3 coordinates X, Y, Z of gyroscope
int16_t Gyro_Y_RAW = 0;
int16_t Gyro_Z_RAW = 0;

void MPU6050_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af04      	add	r7, sp, #16
    uint8_t check, Data;
    HAL_Delay(1000);
 800123a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800123e:	f000 fca3 	bl	8001b88 <HAL_Delay>
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	2301      	movs	r3, #1
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	2275      	movs	r2, #117	; 0x75
 8001254:	21d0      	movs	r1, #208	; 0xd0
 8001256:	4814      	ldr	r0, [pc, #80]	; (80012a8 <MPU6050_Init+0x74>)
 8001258:	f001 f962 	bl	8002520 <HAL_I2C_Mem_Read>

    if (check == 0x68)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	2b68      	cmp	r3, #104	; 0x68
 8001260:	d11d      	bne.n	800129e <MPU6050_Init+0x6a>
    {
        Data = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	2301      	movs	r3, #1
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	1dbb      	adds	r3, r7, #6
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2301      	movs	r3, #1
 8001276:	226b      	movs	r2, #107	; 0x6b
 8001278:	21d0      	movs	r1, #208	; 0xd0
 800127a:	480b      	ldr	r0, [pc, #44]	; (80012a8 <MPU6050_Init+0x74>)
 800127c:	f001 f856 	bl	800232c <HAL_I2C_Mem_Write>
        Data = 0x07;
 8001280:	2307      	movs	r3, #7
 8001282:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8001284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001288:	9302      	str	r3, [sp, #8]
 800128a:	2301      	movs	r3, #1
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	1dbb      	adds	r3, r7, #6
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	2219      	movs	r2, #25
 8001296:	21d0      	movs	r1, #208	; 0xd0
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <MPU6050_Init+0x74>)
 800129a:	f001 f847 	bl	800232c <HAL_I2C_Mem_Write>
    }
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20002f8c 	.word	0x20002f8c

080012ac <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af04      	add	r7, sp, #16
    KalmanFilterAccel accelFilter;
    initKalmanFilterAccel(&accelFilter);
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fef0 	bl	800109c <initKalmanFilterAccel>

    for (int i = 0; i < 100; i++)
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	e0c0      	b.n	8001444 <MPU6050_Read_Accel+0x198>
    {
        uint8_t Rec_Data[6];
        HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	2306      	movs	r3, #6
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2301      	movs	r3, #1
 80012d2:	223b      	movs	r2, #59	; 0x3b
 80012d4:	21d0      	movs	r1, #208	; 0xd0
 80012d6:	4860      	ldr	r0, [pc, #384]	; (8001458 <MPU6050_Read_Accel+0x1ac>)
 80012d8:	f001 f922 	bl	8002520 <HAL_I2C_Mem_Read>

        Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80012dc:	793b      	ldrb	r3, [r7, #4]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	797b      	ldrb	r3, [r7, #5]
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	4313      	orrs	r3, r2
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	4b5c      	ldr	r3, [pc, #368]	; (800145c <MPU6050_Read_Accel+0x1b0>)
 80012ec:	801a      	strh	r2, [r3, #0]
        Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	4b58      	ldr	r3, [pc, #352]	; (8001460 <MPU6050_Read_Accel+0x1b4>)
 80012fe:	801a      	strh	r2, [r3, #0]
        Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001300:	7a3b      	ldrb	r3, [r7, #8]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b21a      	sxth	r2, r3
 8001306:	7a7b      	ldrb	r3, [r7, #9]
 8001308:	b21b      	sxth	r3, r3
 800130a:	4313      	orrs	r3, r2
 800130c:	b21a      	sxth	r2, r3
 800130e:	4b55      	ldr	r3, [pc, #340]	; (8001464 <MPU6050_Read_Accel+0x1b8>)
 8001310:	801a      	strh	r2, [r3, #0]
        Ax = Accel_X_RAW / 16384.0;
 8001312:	4b52      	ldr	r3, [pc, #328]	; (800145c <MPU6050_Read_Accel+0x1b0>)
 8001314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f8af 	bl	800047c <__aeabi_i2d>
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	4b51      	ldr	r3, [pc, #324]	; (8001468 <MPU6050_Read_Accel+0x1bc>)
 8001324:	f7ff fa3e 	bl	80007a4 <__aeabi_ddiv>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fbbe 	bl	8000ab0 <__aeabi_d2f>
 8001334:	4603      	mov	r3, r0
 8001336:	4a4d      	ldr	r2, [pc, #308]	; (800146c <MPU6050_Read_Accel+0x1c0>)
 8001338:	6013      	str	r3, [r2, #0]
        Ay = Accel_Y_RAW / 16384.0;
 800133a:	4b49      	ldr	r3, [pc, #292]	; (8001460 <MPU6050_Read_Accel+0x1b4>)
 800133c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f89b 	bl	800047c <__aeabi_i2d>
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	4b47      	ldr	r3, [pc, #284]	; (8001468 <MPU6050_Read_Accel+0x1bc>)
 800134c:	f7ff fa2a 	bl	80007a4 <__aeabi_ddiv>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f7ff fbaa 	bl	8000ab0 <__aeabi_d2f>
 800135c:	4603      	mov	r3, r0
 800135e:	4a44      	ldr	r2, [pc, #272]	; (8001470 <MPU6050_Read_Accel+0x1c4>)
 8001360:	6013      	str	r3, [r2, #0]
        Az = Accel_Z_RAW / 16384.0;
 8001362:	4b40      	ldr	r3, [pc, #256]	; (8001464 <MPU6050_Read_Accel+0x1b8>)
 8001364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f887 	bl	800047c <__aeabi_i2d>
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	4b3d      	ldr	r3, [pc, #244]	; (8001468 <MPU6050_Read_Accel+0x1bc>)
 8001374:	f7ff fa16 	bl	80007a4 <__aeabi_ddiv>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f7ff fb96 	bl	8000ab0 <__aeabi_d2f>
 8001384:	4603      	mov	r3, r0
 8001386:	4a3b      	ldr	r2, [pc, #236]	; (8001474 <MPU6050_Read_Accel+0x1c8>)
 8001388:	6013      	str	r3, [r2, #0]

        arr_accel_x[i] = Ax;
 800138a:	4b38      	ldr	r3, [pc, #224]	; (800146c <MPU6050_Read_Accel+0x1c0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f886 	bl	80004a0 <__aeabi_f2d>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4837      	ldr	r0, [pc, #220]	; (8001478 <MPU6050_Read_Accel+0x1cc>)
 800139a:	6979      	ldr	r1, [r7, #20]
 800139c:	00c9      	lsls	r1, r1, #3
 800139e:	4401      	add	r1, r0
 80013a0:	e9c1 2300 	strd	r2, r3, [r1]
        arr_accel_y[i] = Ay;
 80013a4:	4b32      	ldr	r3, [pc, #200]	; (8001470 <MPU6050_Read_Accel+0x1c4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f879 	bl	80004a0 <__aeabi_f2d>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4832      	ldr	r0, [pc, #200]	; (800147c <MPU6050_Read_Accel+0x1d0>)
 80013b4:	6979      	ldr	r1, [r7, #20]
 80013b6:	00c9      	lsls	r1, r1, #3
 80013b8:	4401      	add	r1, r0
 80013ba:	e9c1 2300 	strd	r2, r3, [r1]
        arr_accel_z[i] = Az;
 80013be:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <MPU6050_Read_Accel+0x1c8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f86c 	bl	80004a0 <__aeabi_f2d>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	482c      	ldr	r0, [pc, #176]	; (8001480 <MPU6050_Read_Accel+0x1d4>)
 80013ce:	6979      	ldr	r1, [r7, #20]
 80013d0:	00c9      	lsls	r1, r1, #3
 80013d2:	4401      	add	r1, r0
 80013d4:	e9c1 2300 	strd	r2, r3, [r1]

        KalmanFilterUpdateAccel(&accelFilter, Ax, R_ACCEL, 1); // Apply Kalman filter to accelerometer data
 80013d8:	4b24      	ldr	r3, [pc, #144]	; (800146c <MPU6050_Read_Accel+0x1c0>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	f107 030c 	add.w	r3, r7, #12
 80013e2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80013e6:	eddf 0a27 	vldr	s1, [pc, #156]	; 8001484 <MPU6050_Read_Accel+0x1d8>
 80013ea:	eeb0 0a67 	vmov.f32	s0, s15
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fe78 	bl	80010e4 <KalmanFilterUpdateAccel>

        Kalman_accel_x[i] = accelFilter.x;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f852 	bl	80004a0 <__aeabi_f2d>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4821      	ldr	r0, [pc, #132]	; (8001488 <MPU6050_Read_Accel+0x1dc>)
 8001402:	6979      	ldr	r1, [r7, #20]
 8001404:	00c9      	lsls	r1, r1, #3
 8001406:	4401      	add	r1, r0
 8001408:	e9c1 2300 	strd	r2, r3, [r1]
        Kalman_accel_y[i] = accelFilter.P;
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f846 	bl	80004a0 <__aeabi_f2d>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	481c      	ldr	r0, [pc, #112]	; (800148c <MPU6050_Read_Accel+0x1e0>)
 800141a:	6979      	ldr	r1, [r7, #20]
 800141c:	00c9      	lsls	r1, r1, #3
 800141e:	4401      	add	r1, r0
 8001420:	e9c1 2300 	strd	r2, r3, [r1]
        Kalman_accel_z[i] = Az;
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <MPU6050_Read_Accel+0x1c8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f839 	bl	80004a0 <__aeabi_f2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4817      	ldr	r0, [pc, #92]	; (8001490 <MPU6050_Read_Accel+0x1e4>)
 8001434:	6979      	ldr	r1, [r7, #20]
 8001436:	00c9      	lsls	r1, r1, #3
 8001438:	4401      	add	r1, r0
 800143a:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < 100; i++)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3301      	adds	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2b63      	cmp	r3, #99	; 0x63
 8001448:	f77f af3b 	ble.w	80012c2 <MPU6050_Read_Accel+0x16>
    }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20002f8c 	.word	0x20002f8c
 800145c:	20002f80 	.word	0x20002f80
 8001460:	20002f82 	.word	0x20002f82
 8001464:	20002f84 	.word	0x20002f84
 8001468:	40d00000 	.word	0x40d00000
 800146c:	20002f68 	.word	0x20002f68
 8001470:	20002f6c 	.word	0x20002f6c
 8001474:	20002f70 	.word	0x20002f70
 8001478:	20001ca8 	.word	0x20001ca8
 800147c:	20001fc8 	.word	0x20001fc8
 8001480:	200022e8 	.word	0x200022e8
 8001484:	3c23d70a 	.word	0x3c23d70a
 8001488:	200009e8 	.word	0x200009e8
 800148c:	20000d08 	.word	0x20000d08
 8001490:	20001028 	.word	0x20001028
 8001494:	00000000 	.word	0x00000000

08001498 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af04      	add	r7, sp, #16
    KalmanFilterGyro gyroFilter;
    initKalmanFilterGyro(&gyroFilter);
 800149e:	f107 030c 	add.w	r3, r7, #12
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fe0c 	bl	80010c0 <initKalmanFilterGyro>

    for (int i = 0; i < 100; i++)
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e0c0      	b.n	8001630 <MPU6050_Read_Gyro+0x198>
    {
        uint8_t Rec_Data[6];
        HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80014ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b2:	9302      	str	r3, [sp, #8]
 80014b4:	2306      	movs	r3, #6
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2301      	movs	r3, #1
 80014be:	2243      	movs	r2, #67	; 0x43
 80014c0:	21d0      	movs	r1, #208	; 0xd0
 80014c2:	4863      	ldr	r0, [pc, #396]	; (8001650 <MPU6050_Read_Gyro+0x1b8>)
 80014c4:	f001 f82c 	bl	8002520 <HAL_I2C_Mem_Read>
        Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80014c8:	793b      	ldrb	r3, [r7, #4]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	797b      	ldrb	r3, [r7, #5]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	4b5f      	ldr	r3, [pc, #380]	; (8001654 <MPU6050_Read_Gyro+0x1bc>)
 80014d8:	801a      	strh	r2, [r3, #0]
        Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80014da:	79bb      	ldrb	r3, [r7, #6]
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	b21a      	sxth	r2, r3
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	4b5b      	ldr	r3, [pc, #364]	; (8001658 <MPU6050_Read_Gyro+0x1c0>)
 80014ea:	801a      	strh	r2, [r3, #0]
        Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80014ec:	7a3b      	ldrb	r3, [r7, #8]
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	7a7b      	ldrb	r3, [r7, #9]
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	4b58      	ldr	r3, [pc, #352]	; (800165c <MPU6050_Read_Gyro+0x1c4>)
 80014fc:	801a      	strh	r2, [r3, #0]
        Gx = Gyro_X_RAW / 131.0;
 80014fe:	4b55      	ldr	r3, [pc, #340]	; (8001654 <MPU6050_Read_Gyro+0x1bc>)
 8001500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001504:	4618      	mov	r0, r3
 8001506:	f7fe ffb9 	bl	800047c <__aeabi_i2d>
 800150a:	a34f      	add	r3, pc, #316	; (adr r3, 8001648 <MPU6050_Read_Gyro+0x1b0>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f948 	bl	80007a4 <__aeabi_ddiv>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f7ff fac8 	bl	8000ab0 <__aeabi_d2f>
 8001520:	4603      	mov	r3, r0
 8001522:	4a4f      	ldr	r2, [pc, #316]	; (8001660 <MPU6050_Read_Gyro+0x1c8>)
 8001524:	6013      	str	r3, [r2, #0]
        Gy = Gyro_Y_RAW / 131.0;
 8001526:	4b4c      	ldr	r3, [pc, #304]	; (8001658 <MPU6050_Read_Gyro+0x1c0>)
 8001528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ffa5 	bl	800047c <__aeabi_i2d>
 8001532:	a345      	add	r3, pc, #276	; (adr r3, 8001648 <MPU6050_Read_Gyro+0x1b0>)
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7ff f934 	bl	80007a4 <__aeabi_ddiv>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	f7ff fab4 	bl	8000ab0 <__aeabi_d2f>
 8001548:	4603      	mov	r3, r0
 800154a:	4a46      	ldr	r2, [pc, #280]	; (8001664 <MPU6050_Read_Gyro+0x1cc>)
 800154c:	6013      	str	r3, [r2, #0]
        Gz = Gyro_Z_RAW / 131.0;
 800154e:	4b43      	ldr	r3, [pc, #268]	; (800165c <MPU6050_Read_Gyro+0x1c4>)
 8001550:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe ff91 	bl	800047c <__aeabi_i2d>
 800155a:	a33b      	add	r3, pc, #236	; (adr r3, 8001648 <MPU6050_Read_Gyro+0x1b0>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7ff f920 	bl	80007a4 <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f7ff faa0 	bl	8000ab0 <__aeabi_d2f>
 8001570:	4603      	mov	r3, r0
 8001572:	4a3d      	ldr	r2, [pc, #244]	; (8001668 <MPU6050_Read_Gyro+0x1d0>)
 8001574:	6013      	str	r3, [r2, #0]

        arr_gyro_x[i] = Gx;
 8001576:	4b3a      	ldr	r3, [pc, #232]	; (8001660 <MPU6050_Read_Gyro+0x1c8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ff90 	bl	80004a0 <__aeabi_f2d>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4839      	ldr	r0, [pc, #228]	; (800166c <MPU6050_Read_Gyro+0x1d4>)
 8001586:	6979      	ldr	r1, [r7, #20]
 8001588:	00c9      	lsls	r1, r1, #3
 800158a:	4401      	add	r1, r0
 800158c:	e9c1 2300 	strd	r2, r3, [r1]
        arr_gyro_y[i] = Gy;
 8001590:	4b34      	ldr	r3, [pc, #208]	; (8001664 <MPU6050_Read_Gyro+0x1cc>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ff83 	bl	80004a0 <__aeabi_f2d>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4834      	ldr	r0, [pc, #208]	; (8001670 <MPU6050_Read_Gyro+0x1d8>)
 80015a0:	6979      	ldr	r1, [r7, #20]
 80015a2:	00c9      	lsls	r1, r1, #3
 80015a4:	4401      	add	r1, r0
 80015a6:	e9c1 2300 	strd	r2, r3, [r1]
        arr_gyro_z[i] = Gz;
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <MPU6050_Read_Gyro+0x1d0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ff76 	bl	80004a0 <__aeabi_f2d>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	482e      	ldr	r0, [pc, #184]	; (8001674 <MPU6050_Read_Gyro+0x1dc>)
 80015ba:	6979      	ldr	r1, [r7, #20]
 80015bc:	00c9      	lsls	r1, r1, #3
 80015be:	4401      	add	r1, r0
 80015c0:	e9c1 2300 	strd	r2, r3, [r1]

        KalmanFilterUpdateGyro(&gyroFilter, Gz, R_GYRO, 1); // Apply Kalman filter to gyroscope data
 80015c4:	4b28      	ldr	r3, [pc, #160]	; (8001668 <MPU6050_Read_Gyro+0x1d0>)
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80015d2:	eddf 0a29 	vldr	s1, [pc, #164]	; 8001678 <MPU6050_Read_Gyro+0x1e0>
 80015d6:	eeb0 0a67 	vmov.f32	s0, s15
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fdd6 	bl	800118c <KalmanFilterUpdateGyro>

        Kalman_gyro_x[i] = gyroFilter.x;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ff5c 	bl	80004a0 <__aeabi_f2d>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4823      	ldr	r0, [pc, #140]	; (800167c <MPU6050_Read_Gyro+0x1e4>)
 80015ee:	6979      	ldr	r1, [r7, #20]
 80015f0:	00c9      	lsls	r1, r1, #3
 80015f2:	4401      	add	r1, r0
 80015f4:	e9c1 2300 	strd	r2, r3, [r1]
        Kalman_gyro_y[i] = gyroFilter.P;
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff50 	bl	80004a0 <__aeabi_f2d>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	481e      	ldr	r0, [pc, #120]	; (8001680 <MPU6050_Read_Gyro+0x1e8>)
 8001606:	6979      	ldr	r1, [r7, #20]
 8001608:	00c9      	lsls	r1, r1, #3
 800160a:	4401      	add	r1, r0
 800160c:	e9c1 2300 	strd	r2, r3, [r1]
        Kalman_gyro_z[i] = Gz;
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <MPU6050_Read_Gyro+0x1d0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff43 	bl	80004a0 <__aeabi_f2d>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4819      	ldr	r0, [pc, #100]	; (8001684 <MPU6050_Read_Gyro+0x1ec>)
 8001620:	6979      	ldr	r1, [r7, #20]
 8001622:	00c9      	lsls	r1, r1, #3
 8001624:	4401      	add	r1, r0
 8001626:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < 100; i++)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3301      	adds	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2b63      	cmp	r3, #99	; 0x63
 8001634:	f77f af3b 	ble.w	80014ae <MPU6050_Read_Gyro+0x16>
    }
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	f3af 8000 	nop.w
 8001648:	00000000 	.word	0x00000000
 800164c:	40606000 	.word	0x40606000
 8001650:	20002f8c 	.word	0x20002f8c
 8001654:	20002f86 	.word	0x20002f86
 8001658:	20002f88 	.word	0x20002f88
 800165c:	20002f8a 	.word	0x20002f8a
 8001660:	20002f74 	.word	0x20002f74
 8001664:	20002f78 	.word	0x20002f78
 8001668:	20002f7c 	.word	0x20002f7c
 800166c:	20002608 	.word	0x20002608
 8001670:	20002928 	.word	0x20002928
 8001674:	20002c48 	.word	0x20002c48
 8001678:	3c23d70a 	.word	0x3c23d70a
 800167c:	20001348 	.word	0x20001348
 8001680:	20001668 	.word	0x20001668
 8001684:	20001988 	.word	0x20001988

08001688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168c:	f000 fa0a 	bl	8001aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001690:	f000 f812 	bl	80016b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001694:	f000 f8cc 	bl	8001830 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001698:	f000 f86e 	bl	8001778 <MX_I2C1_Init>
  MX_I2C2_Init();
 800169c:	f000 f89a 	bl	80017d4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 80016a0:	f7ff fdc8 	bl	8001234 <MPU6050_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_Accel();
 80016a4:	f7ff fe02 	bl	80012ac <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 80016a8:	f7ff fef6 	bl	8001498 <MPU6050_Read_Gyro>

	  BME280_ReadPressure();
 80016ac:	f7ff fbd0 	bl	8000e50 <BME280_ReadPressure>
	  BME280_ReadTemperature ();
 80016b0:	f7ff fc84 	bl	8000fbc <BME280_ReadTemperature>
	  MPU6050_Read_Accel();
 80016b4:	e7f6      	b.n	80016a4 <main+0x1c>
	...

080016b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b094      	sub	sp, #80	; 0x50
 80016bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016be:	f107 0320 	add.w	r3, r7, #32
 80016c2:	2230      	movs	r2, #48	; 0x30
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f002 f954 	bl	8003974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016cc:	f107 030c 	add.w	r3, r7, #12
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	4b23      	ldr	r3, [pc, #140]	; (8001770 <SystemClock_Config+0xb8>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	4a22      	ldr	r2, [pc, #136]	; (8001770 <SystemClock_Config+0xb8>)
 80016e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ea:	6413      	str	r3, [r2, #64]	; 0x40
 80016ec:	4b20      	ldr	r3, [pc, #128]	; (8001770 <SystemClock_Config+0xb8>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016f8:	2300      	movs	r3, #0
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <SystemClock_Config+0xbc>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001704:	4a1b      	ldr	r2, [pc, #108]	; (8001774 <SystemClock_Config+0xbc>)
 8001706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <SystemClock_Config+0xbc>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001718:	2302      	movs	r3, #2
 800171a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171c:	2301      	movs	r3, #1
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001720:	2310      	movs	r3, #16
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001724:	2300      	movs	r3, #0
 8001726:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001728:	f107 0320 	add.w	r3, r7, #32
 800172c:	4618      	mov	r0, r3
 800172e:	f001 fcdd 	bl	80030ec <HAL_RCC_OscConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001738:	f000 f894 	bl	8001864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800173c:	230f      	movs	r3, #15
 800173e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001740:	2300      	movs	r3, #0
 8001742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f001 ff40 	bl	80035dc <HAL_RCC_ClockConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001762:	f000 f87f 	bl	8001864 <Error_Handler>
  }
}
 8001766:	bf00      	nop
 8001768:	3750      	adds	r7, #80	; 0x50
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	40007000 	.word	0x40007000

08001778 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_I2C1_Init+0x50>)
 800177e:	4a13      	ldr	r2, [pc, #76]	; (80017cc <MX_I2C1_Init+0x54>)
 8001780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_I2C1_Init+0x50>)
 8001784:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <MX_I2C1_Init+0x58>)
 8001786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_I2C1_Init+0x50>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_I2C1_Init+0x50>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_I2C1_Init+0x50>)
 8001796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800179a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <MX_I2C1_Init+0x50>)
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_I2C1_Init+0x50>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <MX_I2C1_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_I2C1_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_I2C1_Init+0x50>)
 80017b6:	f000 fc75 	bl	80020a4 <HAL_I2C_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017c0:	f000 f850 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20002f8c 	.word	0x20002f8c
 80017cc:	40005400 	.word	0x40005400
 80017d0:	000186a0 	.word	0x000186a0

080017d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <MX_I2C2_Init+0x50>)
 80017da:	4a13      	ldr	r2, [pc, #76]	; (8001828 <MX_I2C2_Init+0x54>)
 80017dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_I2C2_Init+0x50>)
 80017e0:	4a12      	ldr	r2, [pc, #72]	; (800182c <MX_I2C2_Init+0x58>)
 80017e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <MX_I2C2_Init+0x50>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <MX_I2C2_Init+0x50>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <MX_I2C2_Init+0x50>)
 80017f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f8:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <MX_I2C2_Init+0x50>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <MX_I2C2_Init+0x50>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001804:	4b07      	ldr	r3, [pc, #28]	; (8001824 <MX_I2C2_Init+0x50>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <MX_I2C2_Init+0x50>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001810:	4804      	ldr	r0, [pc, #16]	; (8001824 <MX_I2C2_Init+0x50>)
 8001812:	f000 fc47 	bl	80020a4 <HAL_I2C_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800181c:	f000 f822 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20002fe0 	.word	0x20002fe0
 8001828:	40005800 	.word	0x40005800
 800182c:	000186a0 	.word	0x000186a0

08001830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_GPIO_Init+0x30>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <MX_GPIO_Init+0x30>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_GPIO_Init+0x30>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001868:	b672      	cpsid	i
}
 800186a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800186c:	e7fe      	b.n	800186c <Error_Handler+0x8>
	...

08001870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <HAL_MspInit+0x4c>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	4a0f      	ldr	r2, [pc, #60]	; (80018bc <HAL_MspInit+0x4c>)
 8001880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001884:	6453      	str	r3, [r2, #68]	; 0x44
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <HAL_MspInit+0x4c>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_MspInit+0x4c>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a08      	ldr	r2, [pc, #32]	; (80018bc <HAL_MspInit+0x4c>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_MspInit+0x4c>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800

080018c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08c      	sub	sp, #48	; 0x30
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a3a      	ldr	r2, [pc, #232]	; (80019c8 <HAL_I2C_MspInit+0x108>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d12c      	bne.n	800193c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	4b39      	ldr	r3, [pc, #228]	; (80019cc <HAL_I2C_MspInit+0x10c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a38      	ldr	r2, [pc, #224]	; (80019cc <HAL_I2C_MspInit+0x10c>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b36      	ldr	r3, [pc, #216]	; (80019cc <HAL_I2C_MspInit+0x10c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018fe:	23c0      	movs	r3, #192	; 0xc0
 8001900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001902:	2312      	movs	r3, #18
 8001904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800190e:	2304      	movs	r3, #4
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	4619      	mov	r1, r3
 8001918:	482d      	ldr	r0, [pc, #180]	; (80019d0 <HAL_I2C_MspInit+0x110>)
 800191a:	f000 fa3f 	bl	8001d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <HAL_I2C_MspInit+0x10c>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a29      	ldr	r2, [pc, #164]	; (80019cc <HAL_I2C_MspInit+0x10c>)
 8001928:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b27      	ldr	r3, [pc, #156]	; (80019cc <HAL_I2C_MspInit+0x10c>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800193a:	e041      	b.n	80019c0 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a24      	ldr	r2, [pc, #144]	; (80019d4 <HAL_I2C_MspInit+0x114>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d13c      	bne.n	80019c0 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_I2C_MspInit+0x10c>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <HAL_I2C_MspInit+0x10c>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <HAL_I2C_MspInit+0x10c>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001968:	2312      	movs	r3, #18
 800196a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001974:	2304      	movs	r3, #4
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	4814      	ldr	r0, [pc, #80]	; (80019d0 <HAL_I2C_MspInit+0x110>)
 8001980:	f000 fa0c 	bl	8001d9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001984:	2308      	movs	r3, #8
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001988:	2312      	movs	r3, #18
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001994:	2309      	movs	r3, #9
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	4619      	mov	r1, r3
 800199e:	480c      	ldr	r0, [pc, #48]	; (80019d0 <HAL_I2C_MspInit+0x110>)
 80019a0:	f000 f9fc 	bl	8001d9c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_I2C_MspInit+0x10c>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <HAL_I2C_MspInit+0x10c>)
 80019ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019b2:	6413      	str	r3, [r2, #64]	; 0x40
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_I2C_MspInit+0x10c>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3730      	adds	r7, #48	; 0x30
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40005400 	.word	0x40005400
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40005800 	.word	0x40005800

080019d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019dc:	e7fe      	b.n	80019dc <NMI_Handler+0x4>

080019de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <HardFault_Handler+0x4>

080019e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <MemManage_Handler+0x4>

080019ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <BusFault_Handler+0x4>

080019f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <UsageFault_Handler+0x4>

080019f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a24:	f000 f890 	bl	8001b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <SystemInit+0x20>)
 8001a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a36:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <SystemInit+0x20>)
 8001a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8001a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a54:	f7ff ffea 	bl	8001a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a58:	480c      	ldr	r0, [pc, #48]	; (8001a8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a5a:	490d      	ldr	r1, [pc, #52]	; (8001a90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a60:	e002      	b.n	8001a68 <LoopCopyDataInit>

08001a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a66:	3304      	adds	r3, #4

08001a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a6c:	d3f9      	bcc.n	8001a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a70:	4c0a      	ldr	r4, [pc, #40]	; (8001a9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a74:	e001      	b.n	8001a7a <LoopFillZerobss>

08001a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a78:	3204      	adds	r2, #4

08001a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a7c:	d3fb      	bcc.n	8001a76 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001a7e:	f001 ff87 	bl	8003990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a82:	f7ff fe01 	bl	8001688 <main>
  bx  lr    
 8001a86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a90:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001a94:	08003e20 	.word	0x08003e20
  ldr r2, =_sbss
 8001a98:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001a9c:	20003170 	.word	0x20003170

08001aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa0:	e7fe      	b.n	8001aa0 <ADC_IRQHandler>
	...

08001aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <HAL_Init+0x40>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <HAL_Init+0x40>)
 8001aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_Init+0x40>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <HAL_Init+0x40>)
 8001aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_Init+0x40>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <HAL_Init+0x40>)
 8001ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001acc:	2003      	movs	r0, #3
 8001ace:	f000 f931 	bl	8001d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad2:	200f      	movs	r0, #15
 8001ad4:	f000 f808 	bl	8001ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad8:	f7ff feca 	bl	8001870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023c00 	.word	0x40023c00

08001ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_InitTick+0x54>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x58>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f93b 	bl	8001d82 <HAL_SYSTICK_Config>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00e      	b.n	8001b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b0f      	cmp	r3, #15
 8001b1a:	d80a      	bhi.n	8001b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f000 f911 	bl	8001d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b28:	4a06      	ldr	r2, [pc, #24]	; (8001b44 <HAL_InitTick+0x5c>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e000      	b.n	8001b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000008 	.word	0x20000008
 8001b44:	20000004 	.word	0x20000004

08001b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x20>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_IncTick+0x24>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_IncTick+0x24>)
 8001b5a:	6013      	str	r3, [r2, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	20003034 	.word	0x20003034

08001b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_GetTick+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20003034 	.word	0x20003034

08001b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff ffee 	bl	8001b70 <HAL_GetTick>
 8001b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba0:	d005      	beq.n	8001bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_Delay+0x44>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bae:	bf00      	nop
 8001bb0:	f7ff ffde 	bl	8001b70 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d8f7      	bhi.n	8001bb0 <HAL_Delay+0x28>
  {
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000008 	.word	0x20000008

08001bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bec:	4013      	ands	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	60d3      	str	r3, [r2, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <__NVIC_GetPriorityGrouping+0x18>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	f003 0307 	and.w	r3, r3, #7
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	; (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d00:	d301      	bcc.n	8001d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00f      	b.n	8001d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <SysTick_Config+0x40>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0e:	210f      	movs	r1, #15
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f7ff ff8e 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <SysTick_Config+0x40>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <SysTick_Config+0x40>)
 8001d20:	2207      	movs	r2, #7
 8001d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	e000e010 	.word	0xe000e010

08001d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff47 	bl	8001bd0 <__NVIC_SetPriorityGrouping>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d5c:	f7ff ff5c 	bl	8001c18 <__NVIC_GetPriorityGrouping>
 8001d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	6978      	ldr	r0, [r7, #20]
 8001d68:	f7ff ff8e 	bl	8001c88 <NVIC_EncodePriority>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff5d 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ffb0 	bl	8001cf0 <SysTick_Config>
 8001d90:	4603      	mov	r3, r0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	e159      	b.n	800206c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001db8:	2201      	movs	r2, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	f040 8148 	bne.w	8002066 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d005      	beq.n	8001dee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d130      	bne.n	8001e50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2203      	movs	r2, #3
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e24:	2201      	movs	r2, #1
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 0201 	and.w	r2, r3, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d017      	beq.n	8001e8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d123      	bne.n	8001ee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	08da      	lsrs	r2, r3, #3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3208      	adds	r2, #8
 8001ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	220f      	movs	r2, #15
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	08da      	lsrs	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3208      	adds	r2, #8
 8001eda:	69b9      	ldr	r1, [r7, #24]
 8001edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0203 	and.w	r2, r3, #3
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80a2 	beq.w	8002066 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b57      	ldr	r3, [pc, #348]	; (8002084 <HAL_GPIO_Init+0x2e8>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	4a56      	ldr	r2, [pc, #344]	; (8002084 <HAL_GPIO_Init+0x2e8>)
 8001f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f30:	6453      	str	r3, [r2, #68]	; 0x44
 8001f32:	4b54      	ldr	r3, [pc, #336]	; (8002084 <HAL_GPIO_Init+0x2e8>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f3e:	4a52      	ldr	r2, [pc, #328]	; (8002088 <HAL_GPIO_Init+0x2ec>)
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	089b      	lsrs	r3, r3, #2
 8001f44:	3302      	adds	r3, #2
 8001f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	220f      	movs	r2, #15
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a49      	ldr	r2, [pc, #292]	; (800208c <HAL_GPIO_Init+0x2f0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d019      	beq.n	8001f9e <HAL_GPIO_Init+0x202>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a48      	ldr	r2, [pc, #288]	; (8002090 <HAL_GPIO_Init+0x2f4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <HAL_GPIO_Init+0x1fe>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a47      	ldr	r2, [pc, #284]	; (8002094 <HAL_GPIO_Init+0x2f8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00d      	beq.n	8001f96 <HAL_GPIO_Init+0x1fa>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a46      	ldr	r2, [pc, #280]	; (8002098 <HAL_GPIO_Init+0x2fc>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d007      	beq.n	8001f92 <HAL_GPIO_Init+0x1f6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a45      	ldr	r2, [pc, #276]	; (800209c <HAL_GPIO_Init+0x300>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d101      	bne.n	8001f8e <HAL_GPIO_Init+0x1f2>
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	e008      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f8e:	2307      	movs	r3, #7
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f92:	2303      	movs	r3, #3
 8001f94:	e004      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e002      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	f002 0203 	and.w	r2, r2, #3
 8001fa6:	0092      	lsls	r2, r2, #2
 8001fa8:	4093      	lsls	r3, r2
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fb0:	4935      	ldr	r1, [pc, #212]	; (8002088 <HAL_GPIO_Init+0x2ec>)
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fbe:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fe2:	4a2f      	ldr	r2, [pc, #188]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fe8:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800200c:	4a24      	ldr	r2, [pc, #144]	; (80020a0 <HAL_GPIO_Init+0x304>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002012:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002036:	4a1a      	ldr	r2, [pc, #104]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <HAL_GPIO_Init+0x304>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002060:	4a0f      	ldr	r2, [pc, #60]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3301      	adds	r3, #1
 800206a:	61fb      	str	r3, [r7, #28]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	2b0f      	cmp	r3, #15
 8002070:	f67f aea2 	bls.w	8001db8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
 8002088:	40013800 	.word	0x40013800
 800208c:	40020000 	.word	0x40020000
 8002090:	40020400 	.word	0x40020400
 8002094:	40020800 	.word	0x40020800
 8002098:	40020c00 	.word	0x40020c00
 800209c:	40021000 	.word	0x40021000
 80020a0:	40013c00 	.word	0x40013c00

080020a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e12b      	b.n	800230e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d106      	bne.n	80020d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff fbf8 	bl	80018c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2224      	movs	r2, #36	; 0x24
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002106:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002108:	f001 fc20 	bl	800394c <HAL_RCC_GetPCLK1Freq>
 800210c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4a81      	ldr	r2, [pc, #516]	; (8002318 <HAL_I2C_Init+0x274>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d807      	bhi.n	8002128 <HAL_I2C_Init+0x84>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4a80      	ldr	r2, [pc, #512]	; (800231c <HAL_I2C_Init+0x278>)
 800211c:	4293      	cmp	r3, r2
 800211e:	bf94      	ite	ls
 8002120:	2301      	movls	r3, #1
 8002122:	2300      	movhi	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	e006      	b.n	8002136 <HAL_I2C_Init+0x92>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4a7d      	ldr	r2, [pc, #500]	; (8002320 <HAL_I2C_Init+0x27c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	bf94      	ite	ls
 8002130:	2301      	movls	r3, #1
 8002132:	2300      	movhi	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e0e7      	b.n	800230e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4a78      	ldr	r2, [pc, #480]	; (8002324 <HAL_I2C_Init+0x280>)
 8002142:	fba2 2303 	umull	r2, r3, r2, r3
 8002146:	0c9b      	lsrs	r3, r3, #18
 8002148:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	430a      	orrs	r2, r1
 800215c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4a6a      	ldr	r2, [pc, #424]	; (8002318 <HAL_I2C_Init+0x274>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d802      	bhi.n	8002178 <HAL_I2C_Init+0xd4>
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	3301      	adds	r3, #1
 8002176:	e009      	b.n	800218c <HAL_I2C_Init+0xe8>
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800217e:	fb02 f303 	mul.w	r3, r2, r3
 8002182:	4a69      	ldr	r2, [pc, #420]	; (8002328 <HAL_I2C_Init+0x284>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	099b      	lsrs	r3, r3, #6
 800218a:	3301      	adds	r3, #1
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	430b      	orrs	r3, r1
 8002192:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800219e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	495c      	ldr	r1, [pc, #368]	; (8002318 <HAL_I2C_Init+0x274>)
 80021a8:	428b      	cmp	r3, r1
 80021aa:	d819      	bhi.n	80021e0 <HAL_I2C_Init+0x13c>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1e59      	subs	r1, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ba:	1c59      	adds	r1, r3, #1
 80021bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021c0:	400b      	ands	r3, r1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_I2C_Init+0x138>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1e59      	subs	r1, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80021d4:	3301      	adds	r3, #1
 80021d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021da:	e051      	b.n	8002280 <HAL_I2C_Init+0x1dc>
 80021dc:	2304      	movs	r3, #4
 80021de:	e04f      	b.n	8002280 <HAL_I2C_Init+0x1dc>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d111      	bne.n	800220c <HAL_I2C_Init+0x168>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1e58      	subs	r0, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	440b      	add	r3, r1
 80021f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fa:	3301      	adds	r3, #1
 80021fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf0c      	ite	eq
 8002204:	2301      	moveq	r3, #1
 8002206:	2300      	movne	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	e012      	b.n	8002232 <HAL_I2C_Init+0x18e>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1e58      	subs	r0, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6859      	ldr	r1, [r3, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	0099      	lsls	r1, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002222:	3301      	adds	r3, #1
 8002224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf0c      	ite	eq
 800222c:	2301      	moveq	r3, #1
 800222e:	2300      	movne	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_Init+0x196>
 8002236:	2301      	movs	r3, #1
 8002238:	e022      	b.n	8002280 <HAL_I2C_Init+0x1dc>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10e      	bne.n	8002260 <HAL_I2C_Init+0x1bc>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1e58      	subs	r0, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6859      	ldr	r1, [r3, #4]
 800224a:	460b      	mov	r3, r1
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	440b      	add	r3, r1
 8002250:	fbb0 f3f3 	udiv	r3, r0, r3
 8002254:	3301      	adds	r3, #1
 8002256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800225e:	e00f      	b.n	8002280 <HAL_I2C_Init+0x1dc>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1e58      	subs	r0, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6859      	ldr	r1, [r3, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	0099      	lsls	r1, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	fbb0 f3f3 	udiv	r3, r0, r3
 8002276:	3301      	adds	r3, #1
 8002278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800227c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	6809      	ldr	r1, [r1, #0]
 8002284:	4313      	orrs	r3, r2
 8002286:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69da      	ldr	r2, [r3, #28]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6911      	ldr	r1, [r2, #16]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68d2      	ldr	r2, [r2, #12]
 80022ba:	4311      	orrs	r1, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	430b      	orrs	r3, r1
 80022c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2220      	movs	r2, #32
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	000186a0 	.word	0x000186a0
 800231c:	001e847f 	.word	0x001e847f
 8002320:	003d08ff 	.word	0x003d08ff
 8002324:	431bde83 	.word	0x431bde83
 8002328:	10624dd3 	.word	0x10624dd3

0800232c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	4608      	mov	r0, r1
 8002336:	4611      	mov	r1, r2
 8002338:	461a      	mov	r2, r3
 800233a:	4603      	mov	r3, r0
 800233c:	817b      	strh	r3, [r7, #10]
 800233e:	460b      	mov	r3, r1
 8002340:	813b      	strh	r3, [r7, #8]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002346:	f7ff fc13 	bl	8001b70 <HAL_GetTick>
 800234a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b20      	cmp	r3, #32
 8002356:	f040 80d9 	bne.w	800250c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2319      	movs	r3, #25
 8002360:	2201      	movs	r2, #1
 8002362:	496d      	ldr	r1, [pc, #436]	; (8002518 <HAL_I2C_Mem_Write+0x1ec>)
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 fc8b 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
 8002372:	e0cc      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_I2C_Mem_Write+0x56>
 800237e:	2302      	movs	r3, #2
 8002380:	e0c5      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	d007      	beq.n	80023a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2221      	movs	r2, #33	; 0x21
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2240      	movs	r2, #64	; 0x40
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a3a      	ldr	r2, [r7, #32]
 80023d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4a4d      	ldr	r2, [pc, #308]	; (800251c <HAL_I2C_Mem_Write+0x1f0>)
 80023e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ea:	88f8      	ldrh	r0, [r7, #6]
 80023ec:	893a      	ldrh	r2, [r7, #8]
 80023ee:	8979      	ldrh	r1, [r7, #10]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	4603      	mov	r3, r0
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 fac2 	bl	8002984 <I2C_RequestMemoryWrite>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d052      	beq.n	80024ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e081      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fd50 	bl	8002eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00d      	beq.n	8002436 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	2b04      	cmp	r3, #4
 8002420:	d107      	bne.n	8002432 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002430:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e06b      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	781a      	ldrb	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b04      	cmp	r3, #4
 8002472:	d11b      	bne.n	80024ac <HAL_I2C_Mem_Write+0x180>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002478:	2b00      	cmp	r3, #0
 800247a:	d017      	beq.n	80024ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1aa      	bne.n	800240a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 fd43 	bl	8002f44 <I2C_WaitOnBTFFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00d      	beq.n	80024e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d107      	bne.n	80024dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e016      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	e000      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	00100002 	.word	0x00100002
 800251c:	ffff0000 	.word	0xffff0000

08002520 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	; 0x30
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	4608      	mov	r0, r1
 800252a:	4611      	mov	r1, r2
 800252c:	461a      	mov	r2, r3
 800252e:	4603      	mov	r3, r0
 8002530:	817b      	strh	r3, [r7, #10]
 8002532:	460b      	mov	r3, r1
 8002534:	813b      	strh	r3, [r7, #8]
 8002536:	4613      	mov	r3, r2
 8002538:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800253a:	f7ff fb19 	bl	8001b70 <HAL_GetTick>
 800253e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b20      	cmp	r3, #32
 800254a:	f040 8214 	bne.w	8002976 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2319      	movs	r3, #25
 8002554:	2201      	movs	r2, #1
 8002556:	497b      	ldr	r1, [pc, #492]	; (8002744 <HAL_I2C_Mem_Read+0x224>)
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 fb91 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002564:	2302      	movs	r3, #2
 8002566:	e207      	b.n	8002978 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_I2C_Mem_Read+0x56>
 8002572:	2302      	movs	r3, #2
 8002574:	e200      	b.n	8002978 <HAL_I2C_Mem_Read+0x458>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b01      	cmp	r3, #1
 800258a:	d007      	beq.n	800259c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2222      	movs	r2, #34	; 0x22
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2240      	movs	r2, #64	; 0x40
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80025cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4a5b      	ldr	r2, [pc, #364]	; (8002748 <HAL_I2C_Mem_Read+0x228>)
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025de:	88f8      	ldrh	r0, [r7, #6]
 80025e0:	893a      	ldrh	r2, [r7, #8]
 80025e2:	8979      	ldrh	r1, [r7, #10]
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	4603      	mov	r3, r0
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fa5e 	bl	8002ab0 <I2C_RequestMemoryRead>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e1bc      	b.n	8002978 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002602:	2b00      	cmp	r3, #0
 8002604:	d113      	bne.n	800262e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	623b      	str	r3, [r7, #32]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	623b      	str	r3, [r7, #32]
 800261a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e190      	b.n	8002950 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002632:	2b01      	cmp	r3, #1
 8002634:	d11b      	bne.n	800266e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002644:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	61fb      	str	r3, [r7, #28]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	e170      	b.n	8002950 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002672:	2b02      	cmp	r3, #2
 8002674:	d11b      	bne.n	80026ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002684:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002694:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	61bb      	str	r3, [r7, #24]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	e150      	b.n	8002950 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026c4:	e144      	b.n	8002950 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	f200 80f1 	bhi.w	80028b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d123      	bne.n	8002720 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 fc79 	bl	8002fd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e145      	b.n	8002978 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800271e:	e117      	b.n	8002950 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	2b02      	cmp	r3, #2
 8002726:	d14e      	bne.n	80027c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272e:	2200      	movs	r2, #0
 8002730:	4906      	ldr	r1, [pc, #24]	; (800274c <HAL_I2C_Mem_Read+0x22c>)
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 faa4 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d008      	beq.n	8002750 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e11a      	b.n	8002978 <HAL_I2C_Mem_Read+0x458>
 8002742:	bf00      	nop
 8002744:	00100002 	.word	0x00100002
 8002748:	ffff0000 	.word	0xffff0000
 800274c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027c4:	e0c4      	b.n	8002950 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027cc:	2200      	movs	r2, #0
 80027ce:	496c      	ldr	r1, [pc, #432]	; (8002980 <HAL_I2C_Mem_Read+0x460>)
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 fa55 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0cb      	b.n	8002978 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002828:	2200      	movs	r2, #0
 800282a:	4955      	ldr	r1, [pc, #340]	; (8002980 <HAL_I2C_Mem_Read+0x460>)
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 fa27 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e09d      	b.n	8002978 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800284a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028b0:	e04e      	b.n	8002950 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fb8c 	bl	8002fd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e058      	b.n	8002978 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	2b04      	cmp	r3, #4
 8002904:	d124      	bne.n	8002950 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	2b03      	cmp	r3, #3
 800290c:	d107      	bne.n	800291e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800291c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002954:	2b00      	cmp	r3, #0
 8002956:	f47f aeb6 	bne.w	80026c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	e000      	b.n	8002978 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002976:	2302      	movs	r3, #2
  }
}
 8002978:	4618      	mov	r0, r3
 800297a:	3728      	adds	r7, #40	; 0x28
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	00010004 	.word	0x00010004

08002984 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	4608      	mov	r0, r1
 800298e:	4611      	mov	r1, r2
 8002990:	461a      	mov	r2, r3
 8002992:	4603      	mov	r3, r0
 8002994:	817b      	strh	r3, [r7, #10]
 8002996:	460b      	mov	r3, r1
 8002998:	813b      	strh	r3, [r7, #8]
 800299a:	4613      	mov	r3, r2
 800299c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f960 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00d      	beq.n	80029e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029d4:	d103      	bne.n	80029de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e05f      	b.n	8002aa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029e2:	897b      	ldrh	r3, [r7, #10]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	6a3a      	ldr	r2, [r7, #32]
 80029f6:	492d      	ldr	r1, [pc, #180]	; (8002aac <I2C_RequestMemoryWrite+0x128>)
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 f9bb 	bl	8002d74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e04c      	b.n	8002aa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a20:	6a39      	ldr	r1, [r7, #32]
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fa46 	bl	8002eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00d      	beq.n	8002a4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d107      	bne.n	8002a46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e02b      	b.n	8002aa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d105      	bne.n	8002a5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a50:	893b      	ldrh	r3, [r7, #8]
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	611a      	str	r2, [r3, #16]
 8002a5a:	e021      	b.n	8002aa0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a5c:	893b      	ldrh	r3, [r7, #8]
 8002a5e:	0a1b      	lsrs	r3, r3, #8
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6c:	6a39      	ldr	r1, [r7, #32]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 fa20 	bl	8002eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00d      	beq.n	8002a96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d107      	bne.n	8002a92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e005      	b.n	8002aa2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a96:	893b      	ldrh	r3, [r7, #8]
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	00010002 	.word	0x00010002

08002ab0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	4608      	mov	r0, r1
 8002aba:	4611      	mov	r1, r2
 8002abc:	461a      	mov	r2, r3
 8002abe:	4603      	mov	r3, r0
 8002ac0:	817b      	strh	r3, [r7, #10]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	813b      	strh	r3, [r7, #8]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ad8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f8c2 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00d      	beq.n	8002b1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b10:	d103      	bne.n	8002b1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e0aa      	b.n	8002c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b1e:	897b      	ldrh	r3, [r7, #10]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	6a3a      	ldr	r2, [r7, #32]
 8002b32:	4952      	ldr	r1, [pc, #328]	; (8002c7c <I2C_RequestMemoryRead+0x1cc>)
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f91d 	bl	8002d74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e097      	b.n	8002c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b5c:	6a39      	ldr	r1, [r7, #32]
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f9a8 	bl	8002eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00d      	beq.n	8002b86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d107      	bne.n	8002b82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e076      	b.n	8002c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d105      	bne.n	8002b98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b8c:	893b      	ldrh	r3, [r7, #8]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	611a      	str	r2, [r3, #16]
 8002b96:	e021      	b.n	8002bdc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b98:	893b      	ldrh	r3, [r7, #8]
 8002b9a:	0a1b      	lsrs	r3, r3, #8
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba8:	6a39      	ldr	r1, [r7, #32]
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f982 	bl	8002eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00d      	beq.n	8002bd2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d107      	bne.n	8002bce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e050      	b.n	8002c74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd2:	893b      	ldrh	r3, [r7, #8]
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bde:	6a39      	ldr	r1, [r7, #32]
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f967 	bl	8002eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00d      	beq.n	8002c08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d107      	bne.n	8002c04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e035      	b.n	8002c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 f82b 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00d      	beq.n	8002c4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c3e:	d103      	bne.n	8002c48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e013      	b.n	8002c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c4c:	897b      	ldrh	r3, [r7, #10]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	6a3a      	ldr	r2, [r7, #32]
 8002c60:	4906      	ldr	r1, [pc, #24]	; (8002c7c <I2C_RequestMemoryRead+0x1cc>)
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f886 	bl	8002d74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	00010002 	.word	0x00010002

08002c80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c90:	e048      	b.n	8002d24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d044      	beq.n	8002d24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9a:	f7fe ff69 	bl	8001b70 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d302      	bcc.n	8002cb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d139      	bne.n	8002d24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	0c1b      	lsrs	r3, r3, #16
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d10d      	bne.n	8002cd6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	43da      	mvns	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	e00c      	b.n	8002cf0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	43da      	mvns	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d116      	bne.n	8002d24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e023      	b.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	0c1b      	lsrs	r3, r3, #16
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d10d      	bne.n	8002d4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	43da      	mvns	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	e00c      	b.n	8002d64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	43da      	mvns	r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	4013      	ands	r3, r2
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2301      	moveq	r3, #1
 8002d5e:	2300      	movne	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d093      	beq.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d82:	e071      	b.n	8002e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d92:	d123      	bne.n	8002ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	f043 0204 	orr.w	r2, r3, #4
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e067      	b.n	8002eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de2:	d041      	beq.n	8002e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de4:	f7fe fec4 	bl	8001b70 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d302      	bcc.n	8002dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d136      	bne.n	8002e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d10c      	bne.n	8002e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	43da      	mvns	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	bf14      	ite	ne
 8002e16:	2301      	movne	r3, #1
 8002e18:	2300      	moveq	r3, #0
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	e00b      	b.n	8002e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	43da      	mvns	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf14      	ite	ne
 8002e30:	2301      	movne	r3, #1
 8002e32:	2300      	moveq	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d016      	beq.n	8002e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e021      	b.n	8002eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	0c1b      	lsrs	r3, r3, #16
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d10c      	bne.n	8002e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	43da      	mvns	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e00b      	b.n	8002ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	43da      	mvns	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4013      	ands	r3, r2
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	bf14      	ite	ne
 8002e9e:	2301      	movne	r3, #1
 8002ea0:	2300      	moveq	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f47f af6d 	bne.w	8002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ec0:	e034      	b.n	8002f2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f8e3 	bl	800308e <I2C_IsAcknowledgeFailed>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e034      	b.n	8002f3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d028      	beq.n	8002f2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eda:	f7fe fe49 	bl	8001b70 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d302      	bcc.n	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d11d      	bne.n	8002f2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efa:	2b80      	cmp	r3, #128	; 0x80
 8002efc:	d016      	beq.n	8002f2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f043 0220 	orr.w	r2, r3, #32
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e007      	b.n	8002f3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	2b80      	cmp	r3, #128	; 0x80
 8002f38:	d1c3      	bne.n	8002ec2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f50:	e034      	b.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f89b 	bl	800308e <I2C_IsAcknowledgeFailed>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e034      	b.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f68:	d028      	beq.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6a:	f7fe fe01 	bl	8001b70 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d302      	bcc.n	8002f80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d11d      	bne.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d016      	beq.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	f043 0220 	orr.w	r2, r3, #32
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e007      	b.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d1c3      	bne.n	8002f52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fe0:	e049      	b.n	8003076 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2b10      	cmp	r3, #16
 8002fee:	d119      	bne.n	8003024 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0210 	mvn.w	r2, #16
 8002ff8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e030      	b.n	8003086 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003024:	f7fe fda4 	bl	8001b70 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	429a      	cmp	r2, r3
 8003032:	d302      	bcc.n	800303a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d11d      	bne.n	8003076 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003044:	2b40      	cmp	r3, #64	; 0x40
 8003046:	d016      	beq.n	8003076 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f043 0220 	orr.w	r2, r3, #32
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e007      	b.n	8003086 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d1ae      	bne.n	8002fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a4:	d11b      	bne.n	80030de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f043 0204 	orr.w	r2, r3, #4
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e267      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d075      	beq.n	80031f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800310a:	4b88      	ldr	r3, [pc, #544]	; (800332c <HAL_RCC_OscConfig+0x240>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b04      	cmp	r3, #4
 8003114:	d00c      	beq.n	8003130 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003116:	4b85      	ldr	r3, [pc, #532]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800311e:	2b08      	cmp	r3, #8
 8003120:	d112      	bne.n	8003148 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003122:	4b82      	ldr	r3, [pc, #520]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800312e:	d10b      	bne.n	8003148 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003130:	4b7e      	ldr	r3, [pc, #504]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d05b      	beq.n	80031f4 <HAL_RCC_OscConfig+0x108>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d157      	bne.n	80031f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e242      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003150:	d106      	bne.n	8003160 <HAL_RCC_OscConfig+0x74>
 8003152:	4b76      	ldr	r3, [pc, #472]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a75      	ldr	r2, [pc, #468]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	e01d      	b.n	800319c <HAL_RCC_OscConfig+0xb0>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003168:	d10c      	bne.n	8003184 <HAL_RCC_OscConfig+0x98>
 800316a:	4b70      	ldr	r3, [pc, #448]	; (800332c <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a6f      	ldr	r2, [pc, #444]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	4b6d      	ldr	r3, [pc, #436]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a6c      	ldr	r2, [pc, #432]	; (800332c <HAL_RCC_OscConfig+0x240>)
 800317c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	e00b      	b.n	800319c <HAL_RCC_OscConfig+0xb0>
 8003184:	4b69      	ldr	r3, [pc, #420]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a68      	ldr	r2, [pc, #416]	; (800332c <HAL_RCC_OscConfig+0x240>)
 800318a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	4b66      	ldr	r3, [pc, #408]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a65      	ldr	r2, [pc, #404]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800319a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d013      	beq.n	80031cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fe fce4 	bl	8001b70 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ac:	f7fe fce0 	bl	8001b70 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b64      	cmp	r3, #100	; 0x64
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e207      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031be:	4b5b      	ldr	r3, [pc, #364]	; (800332c <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0xc0>
 80031ca:	e014      	b.n	80031f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031cc:	f7fe fcd0 	bl	8001b70 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031d4:	f7fe fccc 	bl	8001b70 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b64      	cmp	r3, #100	; 0x64
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e1f3      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e6:	4b51      	ldr	r3, [pc, #324]	; (800332c <HAL_RCC_OscConfig+0x240>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0xe8>
 80031f2:	e000      	b.n	80031f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d063      	beq.n	80032ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003202:	4b4a      	ldr	r3, [pc, #296]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320e:	4b47      	ldr	r3, [pc, #284]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003216:	2b08      	cmp	r3, #8
 8003218:	d11c      	bne.n	8003254 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800321a:	4b44      	ldr	r3, [pc, #272]	; (800332c <HAL_RCC_OscConfig+0x240>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d116      	bne.n	8003254 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003226:	4b41      	ldr	r3, [pc, #260]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d005      	beq.n	800323e <HAL_RCC_OscConfig+0x152>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d001      	beq.n	800323e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e1c7      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323e:	4b3b      	ldr	r3, [pc, #236]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4937      	ldr	r1, [pc, #220]	; (800332c <HAL_RCC_OscConfig+0x240>)
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003252:	e03a      	b.n	80032ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d020      	beq.n	800329e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800325c:	4b34      	ldr	r3, [pc, #208]	; (8003330 <HAL_RCC_OscConfig+0x244>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003262:	f7fe fc85 	bl	8001b70 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800326a:	f7fe fc81 	bl	8001b70 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e1a8      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327c:	4b2b      	ldr	r3, [pc, #172]	; (800332c <HAL_RCC_OscConfig+0x240>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003288:	4b28      	ldr	r3, [pc, #160]	; (800332c <HAL_RCC_OscConfig+0x240>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4925      	ldr	r1, [pc, #148]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003298:	4313      	orrs	r3, r2
 800329a:	600b      	str	r3, [r1, #0]
 800329c:	e015      	b.n	80032ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800329e:	4b24      	ldr	r3, [pc, #144]	; (8003330 <HAL_RCC_OscConfig+0x244>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe fc64 	bl	8001b70 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ac:	f7fe fc60 	bl	8001b70 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e187      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032be:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d036      	beq.n	8003344 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d016      	beq.n	800330c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <HAL_RCC_OscConfig+0x248>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e4:	f7fe fc44 	bl	8001b70 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ec:	f7fe fc40 	bl	8001b70 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e167      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0x200>
 800330a:	e01b      	b.n	8003344 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800330c:	4b09      	ldr	r3, [pc, #36]	; (8003334 <HAL_RCC_OscConfig+0x248>)
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003312:	f7fe fc2d 	bl	8001b70 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003318:	e00e      	b.n	8003338 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800331a:	f7fe fc29 	bl	8001b70 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d907      	bls.n	8003338 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e150      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
 800332c:	40023800 	.word	0x40023800
 8003330:	42470000 	.word	0x42470000
 8003334:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003338:	4b88      	ldr	r3, [pc, #544]	; (800355c <HAL_RCC_OscConfig+0x470>)
 800333a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1ea      	bne.n	800331a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8097 	beq.w	8003480 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003352:	2300      	movs	r3, #0
 8003354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003356:	4b81      	ldr	r3, [pc, #516]	; (800355c <HAL_RCC_OscConfig+0x470>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10f      	bne.n	8003382 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	4b7d      	ldr	r3, [pc, #500]	; (800355c <HAL_RCC_OscConfig+0x470>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	4a7c      	ldr	r2, [pc, #496]	; (800355c <HAL_RCC_OscConfig+0x470>)
 800336c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003370:	6413      	str	r3, [r2, #64]	; 0x40
 8003372:	4b7a      	ldr	r3, [pc, #488]	; (800355c <HAL_RCC_OscConfig+0x470>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337e:	2301      	movs	r3, #1
 8003380:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003382:	4b77      	ldr	r3, [pc, #476]	; (8003560 <HAL_RCC_OscConfig+0x474>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338a:	2b00      	cmp	r3, #0
 800338c:	d118      	bne.n	80033c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338e:	4b74      	ldr	r3, [pc, #464]	; (8003560 <HAL_RCC_OscConfig+0x474>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a73      	ldr	r2, [pc, #460]	; (8003560 <HAL_RCC_OscConfig+0x474>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800339a:	f7fe fbe9 	bl	8001b70 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a2:	f7fe fbe5 	bl	8001b70 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e10c      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <HAL_RCC_OscConfig+0x474>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d106      	bne.n	80033d6 <HAL_RCC_OscConfig+0x2ea>
 80033c8:	4b64      	ldr	r3, [pc, #400]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a63      	ldr	r2, [pc, #396]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
 80033d4:	e01c      	b.n	8003410 <HAL_RCC_OscConfig+0x324>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b05      	cmp	r3, #5
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x30c>
 80033de:	4b5f      	ldr	r3, [pc, #380]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	4a5e      	ldr	r2, [pc, #376]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ea:	4b5c      	ldr	r3, [pc, #368]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ee:	4a5b      	ldr	r2, [pc, #364]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	6713      	str	r3, [r2, #112]	; 0x70
 80033f6:	e00b      	b.n	8003410 <HAL_RCC_OscConfig+0x324>
 80033f8:	4b58      	ldr	r3, [pc, #352]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fc:	4a57      	ldr	r2, [pc, #348]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	6713      	str	r3, [r2, #112]	; 0x70
 8003404:	4b55      	ldr	r3, [pc, #340]	; (800355c <HAL_RCC_OscConfig+0x470>)
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	4a54      	ldr	r2, [pc, #336]	; (800355c <HAL_RCC_OscConfig+0x470>)
 800340a:	f023 0304 	bic.w	r3, r3, #4
 800340e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d015      	beq.n	8003444 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003418:	f7fe fbaa 	bl	8001b70 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341e:	e00a      	b.n	8003436 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003420:	f7fe fba6 	bl	8001b70 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	; 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e0cb      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003436:	4b49      	ldr	r3, [pc, #292]	; (800355c <HAL_RCC_OscConfig+0x470>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0ee      	beq.n	8003420 <HAL_RCC_OscConfig+0x334>
 8003442:	e014      	b.n	800346e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003444:	f7fe fb94 	bl	8001b70 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344a:	e00a      	b.n	8003462 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800344c:	f7fe fb90 	bl	8001b70 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f241 3288 	movw	r2, #5000	; 0x1388
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e0b5      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003462:	4b3e      	ldr	r3, [pc, #248]	; (800355c <HAL_RCC_OscConfig+0x470>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1ee      	bne.n	800344c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800346e:	7dfb      	ldrb	r3, [r7, #23]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d105      	bne.n	8003480 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003474:	4b39      	ldr	r3, [pc, #228]	; (800355c <HAL_RCC_OscConfig+0x470>)
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	4a38      	ldr	r2, [pc, #224]	; (800355c <HAL_RCC_OscConfig+0x470>)
 800347a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800347e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80a1 	beq.w	80035cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800348a:	4b34      	ldr	r3, [pc, #208]	; (800355c <HAL_RCC_OscConfig+0x470>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b08      	cmp	r3, #8
 8003494:	d05c      	beq.n	8003550 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d141      	bne.n	8003522 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349e:	4b31      	ldr	r3, [pc, #196]	; (8003564 <HAL_RCC_OscConfig+0x478>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fe fb64 	bl	8001b70 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ac:	f7fe fb60 	bl	8001b70 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e087      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034be:	4b27      	ldr	r3, [pc, #156]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69da      	ldr	r2, [r3, #28]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	019b      	lsls	r3, r3, #6
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	085b      	lsrs	r3, r3, #1
 80034e2:	3b01      	subs	r3, #1
 80034e4:	041b      	lsls	r3, r3, #16
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	061b      	lsls	r3, r3, #24
 80034ee:	491b      	ldr	r1, [pc, #108]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f4:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <HAL_RCC_OscConfig+0x478>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fa:	f7fe fb39 	bl	8001b70 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003502:	f7fe fb35 	bl	8001b70 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e05c      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003514:	4b11      	ldr	r3, [pc, #68]	; (800355c <HAL_RCC_OscConfig+0x470>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x416>
 8003520:	e054      	b.n	80035cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003522:	4b10      	ldr	r3, [pc, #64]	; (8003564 <HAL_RCC_OscConfig+0x478>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7fe fb22 	bl	8001b70 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003530:	f7fe fb1e 	bl	8001b70 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e045      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_RCC_OscConfig+0x470>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x444>
 800354e:	e03d      	b.n	80035cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d107      	bne.n	8003568 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e038      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
 800355c:	40023800 	.word	0x40023800
 8003560:	40007000 	.word	0x40007000
 8003564:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003568:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <HAL_RCC_OscConfig+0x4ec>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d028      	beq.n	80035c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d121      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358e:	429a      	cmp	r2, r3
 8003590:	d11a      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003598:	4013      	ands	r3, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800359e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d111      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	085b      	lsrs	r3, r3, #1
 80035b0:	3b01      	subs	r3, #1
 80035b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800

080035dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0cc      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035f0:	4b68      	ldr	r3, [pc, #416]	; (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d90c      	bls.n	8003618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b65      	ldr	r3, [pc, #404]	; (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003606:	4b63      	ldr	r3, [pc, #396]	; (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0b8      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d020      	beq.n	8003666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003630:	4b59      	ldr	r3, [pc, #356]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4a58      	ldr	r2, [pc, #352]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800363a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003648:	4b53      	ldr	r3, [pc, #332]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4a52      	ldr	r2, [pc, #328]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003654:	4b50      	ldr	r3, [pc, #320]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	494d      	ldr	r1, [pc, #308]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	4313      	orrs	r3, r2
 8003664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d044      	beq.n	80036fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d107      	bne.n	800368a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367a:	4b47      	ldr	r3, [pc, #284]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d119      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e07f      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d003      	beq.n	800369a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003696:	2b03      	cmp	r3, #3
 8003698:	d107      	bne.n	80036aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800369a:	4b3f      	ldr	r3, [pc, #252]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e06f      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036aa:	4b3b      	ldr	r3, [pc, #236]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e067      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ba:	4b37      	ldr	r3, [pc, #220]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f023 0203 	bic.w	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	4934      	ldr	r1, [pc, #208]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036cc:	f7fe fa50 	bl	8001b70 <HAL_GetTick>
 80036d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d4:	f7fe fa4c 	bl	8001b70 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e04f      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 020c 	and.w	r2, r3, #12
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d1eb      	bne.n	80036d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036fc:	4b25      	ldr	r3, [pc, #148]	; (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d20c      	bcs.n	8003724 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370a:	4b22      	ldr	r3, [pc, #136]	; (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e032      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003730:	4b19      	ldr	r3, [pc, #100]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4916      	ldr	r1, [pc, #88]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d009      	beq.n	8003762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800374e:	4b12      	ldr	r3, [pc, #72]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	490e      	ldr	r1, [pc, #56]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003762:	f000 f821 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8003766:	4602      	mov	r2, r0
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	091b      	lsrs	r3, r3, #4
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	490a      	ldr	r1, [pc, #40]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 8003774:	5ccb      	ldrb	r3, [r1, r3]
 8003776:	fa22 f303 	lsr.w	r3, r2, r3
 800377a:	4a09      	ldr	r2, [pc, #36]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800377c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe f9b0 	bl	8001ae8 <HAL_InitTick>

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40023c00 	.word	0x40023c00
 8003798:	40023800 	.word	0x40023800
 800379c:	08003df4 	.word	0x08003df4
 80037a0:	20000000 	.word	0x20000000
 80037a4:	20000004 	.word	0x20000004

080037a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037ac:	b090      	sub	sp, #64	; 0x40
 80037ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	637b      	str	r3, [r7, #52]	; 0x34
 80037b4:	2300      	movs	r3, #0
 80037b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037b8:	2300      	movs	r3, #0
 80037ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037c0:	4b59      	ldr	r3, [pc, #356]	; (8003928 <HAL_RCC_GetSysClockFreq+0x180>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 030c 	and.w	r3, r3, #12
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d00d      	beq.n	80037e8 <HAL_RCC_GetSysClockFreq+0x40>
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	f200 80a1 	bhi.w	8003914 <HAL_RCC_GetSysClockFreq+0x16c>
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0x34>
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d003      	beq.n	80037e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80037da:	e09b      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037dc:	4b53      	ldr	r3, [pc, #332]	; (800392c <HAL_RCC_GetSysClockFreq+0x184>)
 80037de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80037e0:	e09b      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037e2:	4b53      	ldr	r3, [pc, #332]	; (8003930 <HAL_RCC_GetSysClockFreq+0x188>)
 80037e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037e6:	e098      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037e8:	4b4f      	ldr	r3, [pc, #316]	; (8003928 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037f2:	4b4d      	ldr	r3, [pc, #308]	; (8003928 <HAL_RCC_GetSysClockFreq+0x180>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d028      	beq.n	8003850 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037fe:	4b4a      	ldr	r3, [pc, #296]	; (8003928 <HAL_RCC_GetSysClockFreq+0x180>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	099b      	lsrs	r3, r3, #6
 8003804:	2200      	movs	r2, #0
 8003806:	623b      	str	r3, [r7, #32]
 8003808:	627a      	str	r2, [r7, #36]	; 0x24
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003810:	2100      	movs	r1, #0
 8003812:	4b47      	ldr	r3, [pc, #284]	; (8003930 <HAL_RCC_GetSysClockFreq+0x188>)
 8003814:	fb03 f201 	mul.w	r2, r3, r1
 8003818:	2300      	movs	r3, #0
 800381a:	fb00 f303 	mul.w	r3, r0, r3
 800381e:	4413      	add	r3, r2
 8003820:	4a43      	ldr	r2, [pc, #268]	; (8003930 <HAL_RCC_GetSysClockFreq+0x188>)
 8003822:	fba0 1202 	umull	r1, r2, r0, r2
 8003826:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003828:	460a      	mov	r2, r1
 800382a:	62ba      	str	r2, [r7, #40]	; 0x28
 800382c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800382e:	4413      	add	r3, r2
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003834:	2200      	movs	r2, #0
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	61fa      	str	r2, [r7, #28]
 800383a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800383e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003842:	f7fd f985 	bl	8000b50 <__aeabi_uldivmod>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4613      	mov	r3, r2
 800384c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800384e:	e053      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003850:	4b35      	ldr	r3, [pc, #212]	; (8003928 <HAL_RCC_GetSysClockFreq+0x180>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	099b      	lsrs	r3, r3, #6
 8003856:	2200      	movs	r2, #0
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	617a      	str	r2, [r7, #20]
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003862:	f04f 0b00 	mov.w	fp, #0
 8003866:	4652      	mov	r2, sl
 8003868:	465b      	mov	r3, fp
 800386a:	f04f 0000 	mov.w	r0, #0
 800386e:	f04f 0100 	mov.w	r1, #0
 8003872:	0159      	lsls	r1, r3, #5
 8003874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003878:	0150      	lsls	r0, r2, #5
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	ebb2 080a 	subs.w	r8, r2, sl
 8003882:	eb63 090b 	sbc.w	r9, r3, fp
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003892:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003896:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800389a:	ebb2 0408 	subs.w	r4, r2, r8
 800389e:	eb63 0509 	sbc.w	r5, r3, r9
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	00eb      	lsls	r3, r5, #3
 80038ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038b0:	00e2      	lsls	r2, r4, #3
 80038b2:	4614      	mov	r4, r2
 80038b4:	461d      	mov	r5, r3
 80038b6:	eb14 030a 	adds.w	r3, r4, sl
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	eb45 030b 	adc.w	r3, r5, fp
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ce:	4629      	mov	r1, r5
 80038d0:	028b      	lsls	r3, r1, #10
 80038d2:	4621      	mov	r1, r4
 80038d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038d8:	4621      	mov	r1, r4
 80038da:	028a      	lsls	r2, r1, #10
 80038dc:	4610      	mov	r0, r2
 80038de:	4619      	mov	r1, r3
 80038e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e2:	2200      	movs	r2, #0
 80038e4:	60bb      	str	r3, [r7, #8]
 80038e6:	60fa      	str	r2, [r7, #12]
 80038e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ec:	f7fd f930 	bl	8000b50 <__aeabi_uldivmod>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4613      	mov	r3, r2
 80038f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_RCC_GetSysClockFreq+0x180>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	0c1b      	lsrs	r3, r3, #16
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	3301      	adds	r3, #1
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003908:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003910:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003912:	e002      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <HAL_RCC_GetSysClockFreq+0x184>)
 8003916:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800391c:	4618      	mov	r0, r3
 800391e:	3740      	adds	r7, #64	; 0x40
 8003920:	46bd      	mov	sp, r7
 8003922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003926:	bf00      	nop
 8003928:	40023800 	.word	0x40023800
 800392c:	00f42400 	.word	0x00f42400
 8003930:	017d7840 	.word	0x017d7840

08003934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003938:	4b03      	ldr	r3, [pc, #12]	; (8003948 <HAL_RCC_GetHCLKFreq+0x14>)
 800393a:	681b      	ldr	r3, [r3, #0]
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	20000000 	.word	0x20000000

0800394c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003950:	f7ff fff0 	bl	8003934 <HAL_RCC_GetHCLKFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	0a9b      	lsrs	r3, r3, #10
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	4903      	ldr	r1, [pc, #12]	; (8003970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003962:	5ccb      	ldrb	r3, [r1, r3]
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40023800 	.word	0x40023800
 8003970:	08003e04 	.word	0x08003e04

08003974 <memset>:
 8003974:	4402      	add	r2, r0
 8003976:	4603      	mov	r3, r0
 8003978:	4293      	cmp	r3, r2
 800397a:	d100      	bne.n	800397e <memset+0xa>
 800397c:	4770      	bx	lr
 800397e:	f803 1b01 	strb.w	r1, [r3], #1
 8003982:	e7f9      	b.n	8003978 <memset+0x4>

08003984 <__errno>:
 8003984:	4b01      	ldr	r3, [pc, #4]	; (800398c <__errno+0x8>)
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000058 	.word	0x20000058

08003990 <__libc_init_array>:
 8003990:	b570      	push	{r4, r5, r6, lr}
 8003992:	4d0d      	ldr	r5, [pc, #52]	; (80039c8 <__libc_init_array+0x38>)
 8003994:	4c0d      	ldr	r4, [pc, #52]	; (80039cc <__libc_init_array+0x3c>)
 8003996:	1b64      	subs	r4, r4, r5
 8003998:	10a4      	asrs	r4, r4, #2
 800399a:	2600      	movs	r6, #0
 800399c:	42a6      	cmp	r6, r4
 800399e:	d109      	bne.n	80039b4 <__libc_init_array+0x24>
 80039a0:	4d0b      	ldr	r5, [pc, #44]	; (80039d0 <__libc_init_array+0x40>)
 80039a2:	4c0c      	ldr	r4, [pc, #48]	; (80039d4 <__libc_init_array+0x44>)
 80039a4:	f000 fa1a 	bl	8003ddc <_init>
 80039a8:	1b64      	subs	r4, r4, r5
 80039aa:	10a4      	asrs	r4, r4, #2
 80039ac:	2600      	movs	r6, #0
 80039ae:	42a6      	cmp	r6, r4
 80039b0:	d105      	bne.n	80039be <__libc_init_array+0x2e>
 80039b2:	bd70      	pop	{r4, r5, r6, pc}
 80039b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b8:	4798      	blx	r3
 80039ba:	3601      	adds	r6, #1
 80039bc:	e7ee      	b.n	800399c <__libc_init_array+0xc>
 80039be:	f855 3b04 	ldr.w	r3, [r5], #4
 80039c2:	4798      	blx	r3
 80039c4:	3601      	adds	r6, #1
 80039c6:	e7f2      	b.n	80039ae <__libc_init_array+0x1e>
 80039c8:	08003e18 	.word	0x08003e18
 80039cc:	08003e18 	.word	0x08003e18
 80039d0:	08003e18 	.word	0x08003e18
 80039d4:	08003e1c 	.word	0x08003e1c

080039d8 <log>:
 80039d8:	b538      	push	{r3, r4, r5, lr}
 80039da:	ed2d 8b02 	vpush	{d8}
 80039de:	ec55 4b10 	vmov	r4, r5, d0
 80039e2:	f000 f841 	bl	8003a68 <__ieee754_log>
 80039e6:	4622      	mov	r2, r4
 80039e8:	462b      	mov	r3, r5
 80039ea:	4620      	mov	r0, r4
 80039ec:	4629      	mov	r1, r5
 80039ee:	eeb0 8a40 	vmov.f32	s16, s0
 80039f2:	eef0 8a60 	vmov.f32	s17, s1
 80039f6:	f7fd f845 	bl	8000a84 <__aeabi_dcmpun>
 80039fa:	b998      	cbnz	r0, 8003a24 <log+0x4c>
 80039fc:	2200      	movs	r2, #0
 80039fe:	2300      	movs	r3, #0
 8003a00:	4620      	mov	r0, r4
 8003a02:	4629      	mov	r1, r5
 8003a04:	f7fd f834 	bl	8000a70 <__aeabi_dcmpgt>
 8003a08:	b960      	cbnz	r0, 8003a24 <log+0x4c>
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	4620      	mov	r0, r4
 8003a10:	4629      	mov	r1, r5
 8003a12:	f7fd f805 	bl	8000a20 <__aeabi_dcmpeq>
 8003a16:	b160      	cbz	r0, 8003a32 <log+0x5a>
 8003a18:	f7ff ffb4 	bl	8003984 <__errno>
 8003a1c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8003a48 <log+0x70>
 8003a20:	2322      	movs	r3, #34	; 0x22
 8003a22:	6003      	str	r3, [r0, #0]
 8003a24:	eeb0 0a48 	vmov.f32	s0, s16
 8003a28:	eef0 0a68 	vmov.f32	s1, s17
 8003a2c:	ecbd 8b02 	vpop	{d8}
 8003a30:	bd38      	pop	{r3, r4, r5, pc}
 8003a32:	f7ff ffa7 	bl	8003984 <__errno>
 8003a36:	ecbd 8b02 	vpop	{d8}
 8003a3a:	2321      	movs	r3, #33	; 0x21
 8003a3c:	6003      	str	r3, [r0, #0]
 8003a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a42:	4803      	ldr	r0, [pc, #12]	; (8003a50 <log+0x78>)
 8003a44:	f000 b808 	b.w	8003a58 <nan>
 8003a48:	00000000 	.word	0x00000000
 8003a4c:	fff00000 	.word	0xfff00000
 8003a50:	08003e0c 	.word	0x08003e0c
 8003a54:	00000000 	.word	0x00000000

08003a58 <nan>:
 8003a58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8003a60 <nan+0x8>
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	00000000 	.word	0x00000000
 8003a64:	7ff80000 	.word	0x7ff80000

08003a68 <__ieee754_log>:
 8003a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a6c:	ec51 0b10 	vmov	r0, r1, d0
 8003a70:	ed2d 8b04 	vpush	{d8-d9}
 8003a74:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003a78:	b083      	sub	sp, #12
 8003a7a:	460d      	mov	r5, r1
 8003a7c:	da29      	bge.n	8003ad2 <__ieee754_log+0x6a>
 8003a7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003a82:	4303      	orrs	r3, r0
 8003a84:	ee10 2a10 	vmov	r2, s0
 8003a88:	d10c      	bne.n	8003aa4 <__ieee754_log+0x3c>
 8003a8a:	49cf      	ldr	r1, [pc, #828]	; (8003dc8 <__ieee754_log+0x360>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2300      	movs	r3, #0
 8003a90:	2000      	movs	r0, #0
 8003a92:	f7fc fe87 	bl	80007a4 <__aeabi_ddiv>
 8003a96:	ec41 0b10 	vmov	d0, r0, r1
 8003a9a:	b003      	add	sp, #12
 8003a9c:	ecbd 8b04 	vpop	{d8-d9}
 8003aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aa4:	2900      	cmp	r1, #0
 8003aa6:	da05      	bge.n	8003ab4 <__ieee754_log+0x4c>
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	f7fc fb99 	bl	80001e0 <__aeabi_dsub>
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	e7ee      	b.n	8003a92 <__ieee754_log+0x2a>
 8003ab4:	4bc5      	ldr	r3, [pc, #788]	; (8003dcc <__ieee754_log+0x364>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f7fc fd4a 	bl	8000550 <__aeabi_dmul>
 8003abc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8003ac0:	460d      	mov	r5, r1
 8003ac2:	4ac3      	ldr	r2, [pc, #780]	; (8003dd0 <__ieee754_log+0x368>)
 8003ac4:	4295      	cmp	r5, r2
 8003ac6:	dd06      	ble.n	8003ad6 <__ieee754_log+0x6e>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	f7fc fb8a 	bl	80001e4 <__adddf3>
 8003ad0:	e7e1      	b.n	8003a96 <__ieee754_log+0x2e>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e7f5      	b.n	8003ac2 <__ieee754_log+0x5a>
 8003ad6:	152c      	asrs	r4, r5, #20
 8003ad8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003adc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8003ae0:	441c      	add	r4, r3
 8003ae2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8003ae6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8003aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aee:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8003af2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8003af6:	ea42 0105 	orr.w	r1, r2, r5
 8003afa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8003afe:	2200      	movs	r2, #0
 8003b00:	4bb4      	ldr	r3, [pc, #720]	; (8003dd4 <__ieee754_log+0x36c>)
 8003b02:	f7fc fb6d 	bl	80001e0 <__aeabi_dsub>
 8003b06:	1cab      	adds	r3, r5, #2
 8003b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	4682      	mov	sl, r0
 8003b10:	468b      	mov	fp, r1
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	dc53      	bgt.n	8003bc0 <__ieee754_log+0x158>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f7fc ff81 	bl	8000a20 <__aeabi_dcmpeq>
 8003b1e:	b1d0      	cbz	r0, 8003b56 <__ieee754_log+0xee>
 8003b20:	2c00      	cmp	r4, #0
 8003b22:	f000 8122 	beq.w	8003d6a <__ieee754_log+0x302>
 8003b26:	4620      	mov	r0, r4
 8003b28:	f7fc fca8 	bl	800047c <__aeabi_i2d>
 8003b2c:	a390      	add	r3, pc, #576	; (adr r3, 8003d70 <__ieee754_log+0x308>)
 8003b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b32:	4606      	mov	r6, r0
 8003b34:	460f      	mov	r7, r1
 8003b36:	f7fc fd0b 	bl	8000550 <__aeabi_dmul>
 8003b3a:	a38f      	add	r3, pc, #572	; (adr r3, 8003d78 <__ieee754_log+0x310>)
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	4604      	mov	r4, r0
 8003b42:	460d      	mov	r5, r1
 8003b44:	4630      	mov	r0, r6
 8003b46:	4639      	mov	r1, r7
 8003b48:	f7fc fd02 	bl	8000550 <__aeabi_dmul>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4620      	mov	r0, r4
 8003b52:	4629      	mov	r1, r5
 8003b54:	e7ba      	b.n	8003acc <__ieee754_log+0x64>
 8003b56:	a38a      	add	r3, pc, #552	; (adr r3, 8003d80 <__ieee754_log+0x318>)
 8003b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5c:	4650      	mov	r0, sl
 8003b5e:	4659      	mov	r1, fp
 8003b60:	f7fc fcf6 	bl	8000550 <__aeabi_dmul>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	2000      	movs	r0, #0
 8003b6a:	499b      	ldr	r1, [pc, #620]	; (8003dd8 <__ieee754_log+0x370>)
 8003b6c:	f7fc fb38 	bl	80001e0 <__aeabi_dsub>
 8003b70:	4652      	mov	r2, sl
 8003b72:	4606      	mov	r6, r0
 8003b74:	460f      	mov	r7, r1
 8003b76:	465b      	mov	r3, fp
 8003b78:	4650      	mov	r0, sl
 8003b7a:	4659      	mov	r1, fp
 8003b7c:	f7fc fce8 	bl	8000550 <__aeabi_dmul>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4630      	mov	r0, r6
 8003b86:	4639      	mov	r1, r7
 8003b88:	f7fc fce2 	bl	8000550 <__aeabi_dmul>
 8003b8c:	4606      	mov	r6, r0
 8003b8e:	460f      	mov	r7, r1
 8003b90:	b914      	cbnz	r4, 8003b98 <__ieee754_log+0x130>
 8003b92:	4632      	mov	r2, r6
 8003b94:	463b      	mov	r3, r7
 8003b96:	e0a2      	b.n	8003cde <__ieee754_log+0x276>
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f7fc fc6f 	bl	800047c <__aeabi_i2d>
 8003b9e:	a374      	add	r3, pc, #464	; (adr r3, 8003d70 <__ieee754_log+0x308>)
 8003ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba4:	4680      	mov	r8, r0
 8003ba6:	4689      	mov	r9, r1
 8003ba8:	f7fc fcd2 	bl	8000550 <__aeabi_dmul>
 8003bac:	a372      	add	r3, pc, #456	; (adr r3, 8003d78 <__ieee754_log+0x310>)
 8003bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb2:	4604      	mov	r4, r0
 8003bb4:	460d      	mov	r5, r1
 8003bb6:	4640      	mov	r0, r8
 8003bb8:	4649      	mov	r1, r9
 8003bba:	f7fc fcc9 	bl	8000550 <__aeabi_dmul>
 8003bbe:	e0a7      	b.n	8003d10 <__ieee754_log+0x2a8>
 8003bc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003bc4:	f7fc fb0e 	bl	80001e4 <__adddf3>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4650      	mov	r0, sl
 8003bce:	4659      	mov	r1, fp
 8003bd0:	f7fc fde8 	bl	80007a4 <__aeabi_ddiv>
 8003bd4:	ec41 0b18 	vmov	d8, r0, r1
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f7fc fc4f 	bl	800047c <__aeabi_i2d>
 8003bde:	ec53 2b18 	vmov	r2, r3, d8
 8003be2:	ec41 0b19 	vmov	d9, r0, r1
 8003be6:	ec51 0b18 	vmov	r0, r1, d8
 8003bea:	f7fc fcb1 	bl	8000550 <__aeabi_dmul>
 8003bee:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8003bf2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4680      	mov	r8, r0
 8003bfe:	4689      	mov	r9, r1
 8003c00:	f7fc fca6 	bl	8000550 <__aeabi_dmul>
 8003c04:	a360      	add	r3, pc, #384	; (adr r3, 8003d88 <__ieee754_log+0x320>)
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	4606      	mov	r6, r0
 8003c0c:	460f      	mov	r7, r1
 8003c0e:	f7fc fc9f 	bl	8000550 <__aeabi_dmul>
 8003c12:	a35f      	add	r3, pc, #380	; (adr r3, 8003d90 <__ieee754_log+0x328>)
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	f7fc fae4 	bl	80001e4 <__adddf3>
 8003c1c:	4632      	mov	r2, r6
 8003c1e:	463b      	mov	r3, r7
 8003c20:	f7fc fc96 	bl	8000550 <__aeabi_dmul>
 8003c24:	a35c      	add	r3, pc, #368	; (adr r3, 8003d98 <__ieee754_log+0x330>)
 8003c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2a:	f7fc fadb 	bl	80001e4 <__adddf3>
 8003c2e:	4632      	mov	r2, r6
 8003c30:	463b      	mov	r3, r7
 8003c32:	f7fc fc8d 	bl	8000550 <__aeabi_dmul>
 8003c36:	a35a      	add	r3, pc, #360	; (adr r3, 8003da0 <__ieee754_log+0x338>)
 8003c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3c:	f7fc fad2 	bl	80001e4 <__adddf3>
 8003c40:	4642      	mov	r2, r8
 8003c42:	464b      	mov	r3, r9
 8003c44:	f7fc fc84 	bl	8000550 <__aeabi_dmul>
 8003c48:	a357      	add	r3, pc, #348	; (adr r3, 8003da8 <__ieee754_log+0x340>)
 8003c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4e:	4680      	mov	r8, r0
 8003c50:	4689      	mov	r9, r1
 8003c52:	4630      	mov	r0, r6
 8003c54:	4639      	mov	r1, r7
 8003c56:	f7fc fc7b 	bl	8000550 <__aeabi_dmul>
 8003c5a:	a355      	add	r3, pc, #340	; (adr r3, 8003db0 <__ieee754_log+0x348>)
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	f7fc fac0 	bl	80001e4 <__adddf3>
 8003c64:	4632      	mov	r2, r6
 8003c66:	463b      	mov	r3, r7
 8003c68:	f7fc fc72 	bl	8000550 <__aeabi_dmul>
 8003c6c:	a352      	add	r3, pc, #328	; (adr r3, 8003db8 <__ieee754_log+0x350>)
 8003c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c72:	f7fc fab7 	bl	80001e4 <__adddf3>
 8003c76:	4632      	mov	r2, r6
 8003c78:	463b      	mov	r3, r7
 8003c7a:	f7fc fc69 	bl	8000550 <__aeabi_dmul>
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4602      	mov	r2, r0
 8003c82:	4649      	mov	r1, r9
 8003c84:	4640      	mov	r0, r8
 8003c86:	f7fc faad 	bl	80001e4 <__adddf3>
 8003c8a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8003c8e:	9b01      	ldr	r3, [sp, #4]
 8003c90:	3551      	adds	r5, #81	; 0x51
 8003c92:	431d      	orrs	r5, r3
 8003c94:	2d00      	cmp	r5, #0
 8003c96:	4680      	mov	r8, r0
 8003c98:	4689      	mov	r9, r1
 8003c9a:	dd48      	ble.n	8003d2e <__ieee754_log+0x2c6>
 8003c9c:	4b4e      	ldr	r3, [pc, #312]	; (8003dd8 <__ieee754_log+0x370>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	4650      	mov	r0, sl
 8003ca2:	4659      	mov	r1, fp
 8003ca4:	f7fc fc54 	bl	8000550 <__aeabi_dmul>
 8003ca8:	4652      	mov	r2, sl
 8003caa:	465b      	mov	r3, fp
 8003cac:	f7fc fc50 	bl	8000550 <__aeabi_dmul>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4606      	mov	r6, r0
 8003cb6:	460f      	mov	r7, r1
 8003cb8:	4640      	mov	r0, r8
 8003cba:	4649      	mov	r1, r9
 8003cbc:	f7fc fa92 	bl	80001e4 <__adddf3>
 8003cc0:	ec53 2b18 	vmov	r2, r3, d8
 8003cc4:	f7fc fc44 	bl	8000550 <__aeabi_dmul>
 8003cc8:	4680      	mov	r8, r0
 8003cca:	4689      	mov	r9, r1
 8003ccc:	b964      	cbnz	r4, 8003ce8 <__ieee754_log+0x280>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4630      	mov	r0, r6
 8003cd4:	4639      	mov	r1, r7
 8003cd6:	f7fc fa83 	bl	80001e0 <__aeabi_dsub>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4650      	mov	r0, sl
 8003ce0:	4659      	mov	r1, fp
 8003ce2:	f7fc fa7d 	bl	80001e0 <__aeabi_dsub>
 8003ce6:	e6d6      	b.n	8003a96 <__ieee754_log+0x2e>
 8003ce8:	a321      	add	r3, pc, #132	; (adr r3, 8003d70 <__ieee754_log+0x308>)
 8003cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cee:	ec51 0b19 	vmov	r0, r1, d9
 8003cf2:	f7fc fc2d 	bl	8000550 <__aeabi_dmul>
 8003cf6:	a320      	add	r3, pc, #128	; (adr r3, 8003d78 <__ieee754_log+0x310>)
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	460d      	mov	r5, r1
 8003d00:	ec51 0b19 	vmov	r0, r1, d9
 8003d04:	f7fc fc24 	bl	8000550 <__aeabi_dmul>
 8003d08:	4642      	mov	r2, r8
 8003d0a:	464b      	mov	r3, r9
 8003d0c:	f7fc fa6a 	bl	80001e4 <__adddf3>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4630      	mov	r0, r6
 8003d16:	4639      	mov	r1, r7
 8003d18:	f7fc fa62 	bl	80001e0 <__aeabi_dsub>
 8003d1c:	4652      	mov	r2, sl
 8003d1e:	465b      	mov	r3, fp
 8003d20:	f7fc fa5e 	bl	80001e0 <__aeabi_dsub>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4620      	mov	r0, r4
 8003d2a:	4629      	mov	r1, r5
 8003d2c:	e7d9      	b.n	8003ce2 <__ieee754_log+0x27a>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4650      	mov	r0, sl
 8003d34:	4659      	mov	r1, fp
 8003d36:	f7fc fa53 	bl	80001e0 <__aeabi_dsub>
 8003d3a:	ec53 2b18 	vmov	r2, r3, d8
 8003d3e:	f7fc fc07 	bl	8000550 <__aeabi_dmul>
 8003d42:	4606      	mov	r6, r0
 8003d44:	460f      	mov	r7, r1
 8003d46:	2c00      	cmp	r4, #0
 8003d48:	f43f af23 	beq.w	8003b92 <__ieee754_log+0x12a>
 8003d4c:	a308      	add	r3, pc, #32	; (adr r3, 8003d70 <__ieee754_log+0x308>)
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	ec51 0b19 	vmov	r0, r1, d9
 8003d56:	f7fc fbfb 	bl	8000550 <__aeabi_dmul>
 8003d5a:	a307      	add	r3, pc, #28	; (adr r3, 8003d78 <__ieee754_log+0x310>)
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	4604      	mov	r4, r0
 8003d62:	460d      	mov	r5, r1
 8003d64:	ec51 0b19 	vmov	r0, r1, d9
 8003d68:	e727      	b.n	8003bba <__ieee754_log+0x152>
 8003d6a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8003dc0 <__ieee754_log+0x358>
 8003d6e:	e694      	b.n	8003a9a <__ieee754_log+0x32>
 8003d70:	fee00000 	.word	0xfee00000
 8003d74:	3fe62e42 	.word	0x3fe62e42
 8003d78:	35793c76 	.word	0x35793c76
 8003d7c:	3dea39ef 	.word	0x3dea39ef
 8003d80:	55555555 	.word	0x55555555
 8003d84:	3fd55555 	.word	0x3fd55555
 8003d88:	df3e5244 	.word	0xdf3e5244
 8003d8c:	3fc2f112 	.word	0x3fc2f112
 8003d90:	96cb03de 	.word	0x96cb03de
 8003d94:	3fc74664 	.word	0x3fc74664
 8003d98:	94229359 	.word	0x94229359
 8003d9c:	3fd24924 	.word	0x3fd24924
 8003da0:	55555593 	.word	0x55555593
 8003da4:	3fe55555 	.word	0x3fe55555
 8003da8:	d078c69f 	.word	0xd078c69f
 8003dac:	3fc39a09 	.word	0x3fc39a09
 8003db0:	1d8e78af 	.word	0x1d8e78af
 8003db4:	3fcc71c5 	.word	0x3fcc71c5
 8003db8:	9997fa04 	.word	0x9997fa04
 8003dbc:	3fd99999 	.word	0x3fd99999
	...
 8003dc8:	c3500000 	.word	0xc3500000
 8003dcc:	43500000 	.word	0x43500000
 8003dd0:	7fefffff 	.word	0x7fefffff
 8003dd4:	3ff00000 	.word	0x3ff00000
 8003dd8:	3fe00000 	.word	0x3fe00000

08003ddc <_init>:
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dde:	bf00      	nop
 8003de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de2:	bc08      	pop	{r3}
 8003de4:	469e      	mov	lr, r3
 8003de6:	4770      	bx	lr

08003de8 <_fini>:
 8003de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dea:	bf00      	nop
 8003dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dee:	bc08      	pop	{r3}
 8003df0:	469e      	mov	lr, r3
 8003df2:	4770      	bx	lr
