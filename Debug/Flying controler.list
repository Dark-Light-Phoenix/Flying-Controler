
Flying controler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000469c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004834  08004834  00014834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004864  08004864  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004864  08004864  00014864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800486c  0800486c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800486c  0800486c  0001486c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004870  08004870  00014870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002de8  20000060  080048d0  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002e48  080048d0  00022e48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006a61  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001302  00000000  00000000  00026b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  00027e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000567  00000000  00000000  00028540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000147db  00000000  00000000  00028aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008e97  00000000  00000000  0003d282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000814be  00000000  00000000  00046119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020ec  00000000  00000000  000c75d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000c96c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000060 	.word	0x20000060
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800481c 	.word	0x0800481c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000064 	.word	0x20000064
 80001d4:	0800481c 	.word	0x0800481c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b970 	b.w	8000d0c <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9e08      	ldr	r6, [sp, #32]
 8000a4a:	460d      	mov	r5, r1
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	460f      	mov	r7, r1
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d14a      	bne.n	8000aea <__udivmoddi4+0xa6>
 8000a54:	428a      	cmp	r2, r1
 8000a56:	4694      	mov	ip, r2
 8000a58:	d965      	bls.n	8000b26 <__udivmoddi4+0xe2>
 8000a5a:	fab2 f382 	clz	r3, r2
 8000a5e:	b143      	cbz	r3, 8000a72 <__udivmoddi4+0x2e>
 8000a60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a64:	f1c3 0220 	rsb	r2, r3, #32
 8000a68:	409f      	lsls	r7, r3
 8000a6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a6e:	4317      	orrs	r7, r2
 8000a70:	409c      	lsls	r4, r3
 8000a72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a76:	fa1f f58c 	uxth.w	r5, ip
 8000a7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a7e:	0c22      	lsrs	r2, r4, #16
 8000a80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a88:	fb01 f005 	mul.w	r0, r1, r5
 8000a8c:	4290      	cmp	r0, r2
 8000a8e:	d90a      	bls.n	8000aa6 <__udivmoddi4+0x62>
 8000a90:	eb1c 0202 	adds.w	r2, ip, r2
 8000a94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a98:	f080 811c 	bcs.w	8000cd4 <__udivmoddi4+0x290>
 8000a9c:	4290      	cmp	r0, r2
 8000a9e:	f240 8119 	bls.w	8000cd4 <__udivmoddi4+0x290>
 8000aa2:	3902      	subs	r1, #2
 8000aa4:	4462      	add	r2, ip
 8000aa6:	1a12      	subs	r2, r2, r0
 8000aa8:	b2a4      	uxth	r4, r4
 8000aaa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ab2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ab6:	fb00 f505 	mul.w	r5, r0, r5
 8000aba:	42a5      	cmp	r5, r4
 8000abc:	d90a      	bls.n	8000ad4 <__udivmoddi4+0x90>
 8000abe:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ac6:	f080 8107 	bcs.w	8000cd8 <__udivmoddi4+0x294>
 8000aca:	42a5      	cmp	r5, r4
 8000acc:	f240 8104 	bls.w	8000cd8 <__udivmoddi4+0x294>
 8000ad0:	4464      	add	r4, ip
 8000ad2:	3802      	subs	r0, #2
 8000ad4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ad8:	1b64      	subs	r4, r4, r5
 8000ada:	2100      	movs	r1, #0
 8000adc:	b11e      	cbz	r6, 8000ae6 <__udivmoddi4+0xa2>
 8000ade:	40dc      	lsrs	r4, r3
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0xbc>
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	f000 80ed 	beq.w	8000cce <__udivmoddi4+0x28a>
 8000af4:	2100      	movs	r1, #0
 8000af6:	e9c6 0500 	strd	r0, r5, [r6]
 8000afa:	4608      	mov	r0, r1
 8000afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b00:	fab3 f183 	clz	r1, r3
 8000b04:	2900      	cmp	r1, #0
 8000b06:	d149      	bne.n	8000b9c <__udivmoddi4+0x158>
 8000b08:	42ab      	cmp	r3, r5
 8000b0a:	d302      	bcc.n	8000b12 <__udivmoddi4+0xce>
 8000b0c:	4282      	cmp	r2, r0
 8000b0e:	f200 80f8 	bhi.w	8000d02 <__udivmoddi4+0x2be>
 8000b12:	1a84      	subs	r4, r0, r2
 8000b14:	eb65 0203 	sbc.w	r2, r5, r3
 8000b18:	2001      	movs	r0, #1
 8000b1a:	4617      	mov	r7, r2
 8000b1c:	2e00      	cmp	r6, #0
 8000b1e:	d0e2      	beq.n	8000ae6 <__udivmoddi4+0xa2>
 8000b20:	e9c6 4700 	strd	r4, r7, [r6]
 8000b24:	e7df      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000b26:	b902      	cbnz	r2, 8000b2a <__udivmoddi4+0xe6>
 8000b28:	deff      	udf	#255	; 0xff
 8000b2a:	fab2 f382 	clz	r3, r2
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f040 8090 	bne.w	8000c54 <__udivmoddi4+0x210>
 8000b34:	1a8a      	subs	r2, r1, r2
 8000b36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3a:	fa1f fe8c 	uxth.w	lr, ip
 8000b3e:	2101      	movs	r1, #1
 8000b40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b44:	fb07 2015 	mls	r0, r7, r5, r2
 8000b48:	0c22      	lsrs	r2, r4, #16
 8000b4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b4e:	fb0e f005 	mul.w	r0, lr, r5
 8000b52:	4290      	cmp	r0, r2
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x124>
 8000b56:	eb1c 0202 	adds.w	r2, ip, r2
 8000b5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x122>
 8000b60:	4290      	cmp	r0, r2
 8000b62:	f200 80cb 	bhi.w	8000cfc <__udivmoddi4+0x2b8>
 8000b66:	4645      	mov	r5, r8
 8000b68:	1a12      	subs	r2, r2, r0
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b70:	fb07 2210 	mls	r2, r7, r0, r2
 8000b74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b78:	fb0e fe00 	mul.w	lr, lr, r0
 8000b7c:	45a6      	cmp	lr, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x14e>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x14c>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	f200 80bb 	bhi.w	8000d06 <__udivmoddi4+0x2c2>
 8000b90:	4610      	mov	r0, r2
 8000b92:	eba4 040e 	sub.w	r4, r4, lr
 8000b96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b9a:	e79f      	b.n	8000adc <__udivmoddi4+0x98>
 8000b9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ba0:	408b      	lsls	r3, r1
 8000ba2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ba6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000baa:	fa05 f401 	lsl.w	r4, r5, r1
 8000bae:	fa20 f307 	lsr.w	r3, r0, r7
 8000bb2:	40fd      	lsrs	r5, r7
 8000bb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb8:	4323      	orrs	r3, r4
 8000bba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bbe:	fa1f fe8c 	uxth.w	lr, ip
 8000bc2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bc6:	0c1c      	lsrs	r4, r3, #16
 8000bc8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bcc:	fb08 f50e 	mul.w	r5, r8, lr
 8000bd0:	42a5      	cmp	r5, r4
 8000bd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bd6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b0>
 8000bdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000be0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000be4:	f080 8088 	bcs.w	8000cf8 <__udivmoddi4+0x2b4>
 8000be8:	42a5      	cmp	r5, r4
 8000bea:	f240 8085 	bls.w	8000cf8 <__udivmoddi4+0x2b4>
 8000bee:	f1a8 0802 	sub.w	r8, r8, #2
 8000bf2:	4464      	add	r4, ip
 8000bf4:	1b64      	subs	r4, r4, r5
 8000bf6:	b29d      	uxth	r5, r3
 8000bf8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bfc:	fb09 4413 	mls	r4, r9, r3, r4
 8000c00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1da>
 8000c0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c14:	d26c      	bcs.n	8000cf0 <__udivmoddi4+0x2ac>
 8000c16:	45a6      	cmp	lr, r4
 8000c18:	d96a      	bls.n	8000cf0 <__udivmoddi4+0x2ac>
 8000c1a:	3b02      	subs	r3, #2
 8000c1c:	4464      	add	r4, ip
 8000c1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c22:	fba3 9502 	umull	r9, r5, r3, r2
 8000c26:	eba4 040e 	sub.w	r4, r4, lr
 8000c2a:	42ac      	cmp	r4, r5
 8000c2c:	46c8      	mov	r8, r9
 8000c2e:	46ae      	mov	lr, r5
 8000c30:	d356      	bcc.n	8000ce0 <__udivmoddi4+0x29c>
 8000c32:	d053      	beq.n	8000cdc <__udivmoddi4+0x298>
 8000c34:	b156      	cbz	r6, 8000c4c <__udivmoddi4+0x208>
 8000c36:	ebb0 0208 	subs.w	r2, r0, r8
 8000c3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c42:	40ca      	lsrs	r2, r1
 8000c44:	40cc      	lsrs	r4, r1
 8000c46:	4317      	orrs	r7, r2
 8000c48:	e9c6 7400 	strd	r7, r4, [r6]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c54:	f1c3 0120 	rsb	r1, r3, #32
 8000c58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c60:	fa25 f101 	lsr.w	r1, r5, r1
 8000c64:	409d      	lsls	r5, r3
 8000c66:	432a      	orrs	r2, r5
 8000c68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c74:	fb07 1510 	mls	r5, r7, r0, r1
 8000c78:	0c11      	lsrs	r1, r2, #16
 8000c7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c82:	428d      	cmp	r5, r1
 8000c84:	fa04 f403 	lsl.w	r4, r4, r3
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x258>
 8000c8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c92:	d22f      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000c94:	428d      	cmp	r5, r1
 8000c96:	d92d      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	4461      	add	r1, ip
 8000c9c:	1b49      	subs	r1, r1, r5
 8000c9e:	b292      	uxth	r2, r2
 8000ca0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ca4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ca8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cac:	fb05 f10e 	mul.w	r1, r5, lr
 8000cb0:	4291      	cmp	r1, r2
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x282>
 8000cb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cbc:	d216      	bcs.n	8000cec <__udivmoddi4+0x2a8>
 8000cbe:	4291      	cmp	r1, r2
 8000cc0:	d914      	bls.n	8000cec <__udivmoddi4+0x2a8>
 8000cc2:	3d02      	subs	r5, #2
 8000cc4:	4462      	add	r2, ip
 8000cc6:	1a52      	subs	r2, r2, r1
 8000cc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ccc:	e738      	b.n	8000b40 <__udivmoddi4+0xfc>
 8000cce:	4631      	mov	r1, r6
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	e708      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000cd4:	4639      	mov	r1, r7
 8000cd6:	e6e6      	b.n	8000aa6 <__udivmoddi4+0x62>
 8000cd8:	4610      	mov	r0, r2
 8000cda:	e6fb      	b.n	8000ad4 <__udivmoddi4+0x90>
 8000cdc:	4548      	cmp	r0, r9
 8000cde:	d2a9      	bcs.n	8000c34 <__udivmoddi4+0x1f0>
 8000ce0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ce4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	e7a3      	b.n	8000c34 <__udivmoddi4+0x1f0>
 8000cec:	4645      	mov	r5, r8
 8000cee:	e7ea      	b.n	8000cc6 <__udivmoddi4+0x282>
 8000cf0:	462b      	mov	r3, r5
 8000cf2:	e794      	b.n	8000c1e <__udivmoddi4+0x1da>
 8000cf4:	4640      	mov	r0, r8
 8000cf6:	e7d1      	b.n	8000c9c <__udivmoddi4+0x258>
 8000cf8:	46d0      	mov	r8, sl
 8000cfa:	e77b      	b.n	8000bf4 <__udivmoddi4+0x1b0>
 8000cfc:	3d02      	subs	r5, #2
 8000cfe:	4462      	add	r2, ip
 8000d00:	e732      	b.n	8000b68 <__udivmoddi4+0x124>
 8000d02:	4608      	mov	r0, r1
 8000d04:	e70a      	b.n	8000b1c <__udivmoddi4+0xd8>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	e742      	b.n	8000b92 <__udivmoddi4+0x14e>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <initKalmanFilterAccel>:
    float P;
} KalmanFilterGyro;


void initKalmanFilterAccel(KalmanFilterAccel *filter) // Function to initialize Kalman filter for accelerometer
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
    filter->x = 0;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
    filter->P = 1;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000d26:	605a      	str	r2, [r3, #4]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <initKalmanFilterGyro>:

void initKalmanFilterGyro(KalmanFilterGyro *filter) // Function to initialize Kalman filter for gyroscope
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
    filter->x = 0;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f04f 0200 	mov.w	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
    filter->P = 1;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000d4a:	605a      	str	r2, [r3, #4]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <KalmanFilterUpdateAccel>:

void KalmanFilterUpdateAccel(KalmanFilterAccel *filter, float z, float R, float H) // Function to update Kalman filter for accelerometer
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d64:	edc7 0a01 	vstr	s1, [r7, #4]
 8000d68:	ed87 1a00 	vstr	s2, [r7]
    float x_pred = filter->x;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	61fb      	str	r3, [r7, #28]
    float P_pred = filter->P;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	61bb      	str	r3, [r7, #24]

    float K = P_pred * H / (H * P_pred * H + R);
 8000d78:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d7c:	edd7 7a00 	vldr	s15, [r7]
 8000d80:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000d84:	ed97 7a00 	vldr	s14, [r7]
 8000d88:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d90:	edd7 7a00 	vldr	s15, [r7]
 8000d94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d98:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000da4:	edc7 7a05 	vstr	s15, [r7, #20]
    filter->x = x_pred + K * (z - H * x_pred);
 8000da8:	ed97 7a00 	vldr	s14, [r7]
 8000dac:	edd7 7a07 	vldr	s15, [r7, #28]
 8000db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db4:	ed97 7a02 	vldr	s14, [r7, #8]
 8000db8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dc4:	edd7 7a07 	vldr	s15, [r7, #28]
 8000dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	edc3 7a00 	vstr	s15, [r3]
    filter->P = (1 - K * H) * P_pred;
 8000dd2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000dd6:	edd7 7a00 	vldr	s15, [r7]
 8000dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000de2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000de6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000df4:	bf00      	nop
 8000df6:	3724      	adds	r7, #36	; 0x24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <KalmanFilterUpdateGyro>:

void KalmanFilterUpdateGyro(KalmanFilterGyro *filter, float z, float R, float H) // Function to update Kalman filter for gyroscope
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e0c:	edc7 0a01 	vstr	s1, [r7, #4]
 8000e10:	ed87 1a00 	vstr	s2, [r7]
    float x_pred = filter->x;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	61fb      	str	r3, [r7, #28]
    float P_pred = filter->P;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	61bb      	str	r3, [r7, #24]

    float K = P_pred * H / (H * P_pred * H + R);
 8000e20:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e24:	edd7 7a00 	vldr	s15, [r7]
 8000e28:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000e2c:	ed97 7a00 	vldr	s14, [r7]
 8000e30:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e38:	edd7 7a00 	vldr	s15, [r7]
 8000e3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e40:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e4c:	edc7 7a05 	vstr	s15, [r7, #20]
    filter->x = x_pred + K * (z - H * x_pred);
 8000e50:	ed97 7a00 	vldr	s14, [r7]
 8000e54:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e5c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e64:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	edc3 7a00 	vstr	s15, [r3]
    filter->P = (1 - K * H) * P_pred;
 8000e7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e7e:	edd7 7a00 	vldr	s15, [r7]
 8000e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000e9c:	bf00      	nop
 8000e9e:	3724      	adds	r7, #36	; 0x24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <MPU6050_Init>:

void MPU6050_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af04      	add	r7, sp, #16
    uint8_t check, Data;
    HAL_Delay(1000);
 8000eae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb2:	f000 fd49 	bl	8001948 <HAL_Delay>
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	2275      	movs	r2, #117	; 0x75
 8000ec8:	21d0      	movs	r1, #208	; 0xd0
 8000eca:	4814      	ldr	r0, [pc, #80]	; (8000f1c <MPU6050_Init+0x74>)
 8000ecc:	f001 fd38 	bl	8002940 <HAL_I2C_Mem_Read>

    if (check == 0x68)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b68      	cmp	r3, #104	; 0x68
 8000ed4:	d11d      	bne.n	8000f12 <MPU6050_Init+0x6a>
    {
        Data = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	9302      	str	r3, [sp, #8]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	1dbb      	adds	r3, r7, #6
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	226b      	movs	r2, #107	; 0x6b
 8000eec:	21d0      	movs	r1, #208	; 0xd0
 8000eee:	480b      	ldr	r0, [pc, #44]	; (8000f1c <MPU6050_Init+0x74>)
 8000ef0:	f001 fc2c 	bl	800274c <HAL_I2C_Mem_Write>
        Data = 0x07;
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	2301      	movs	r3, #1
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	1dbb      	adds	r3, r7, #6
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2301      	movs	r3, #1
 8000f08:	2219      	movs	r2, #25
 8000f0a:	21d0      	movs	r1, #208	; 0xd0
 8000f0c:	4803      	ldr	r0, [pc, #12]	; (8000f1c <MPU6050_Init+0x74>)
 8000f0e:	f001 fc1d 	bl	800274c <HAL_I2C_Mem_Write>
    }
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000007c 	.word	0x2000007c

08000f20 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af04      	add	r7, sp, #16
    KalmanFilterAccel accelFilter;
    initKalmanFilterAccel(&accelFilter);
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fef0 	bl	8000d10 <initKalmanFilterAccel>

    for (int i = 0; i < 100; i++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	e0c0      	b.n	80010b8 <MPU6050_Read_Accel+0x198>
    {
        uint8_t Rec_Data[6];
        HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	9302      	str	r3, [sp, #8]
 8000f3c:	2306      	movs	r3, #6
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2301      	movs	r3, #1
 8000f46:	223b      	movs	r2, #59	; 0x3b
 8000f48:	21d0      	movs	r1, #208	; 0xd0
 8000f4a:	4860      	ldr	r0, [pc, #384]	; (80010cc <MPU6050_Read_Accel+0x1ac>)
 8000f4c:	f001 fcf8 	bl	8002940 <HAL_I2C_Mem_Read>

        Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8000f50:	793b      	ldrb	r3, [r7, #4]
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	797b      	ldrb	r3, [r7, #5]
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	4b5c      	ldr	r3, [pc, #368]	; (80010d0 <MPU6050_Read_Accel+0x1b0>)
 8000f60:	801a      	strh	r2, [r3, #0]
        Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8000f62:	79bb      	ldrb	r3, [r7, #6]
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	4b58      	ldr	r3, [pc, #352]	; (80010d4 <MPU6050_Read_Accel+0x1b4>)
 8000f72:	801a      	strh	r2, [r3, #0]
        Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8000f74:	7a3b      	ldrb	r3, [r7, #8]
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	7a7b      	ldrb	r3, [r7, #9]
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	4b55      	ldr	r3, [pc, #340]	; (80010d8 <MPU6050_Read_Accel+0x1b8>)
 8000f84:	801a      	strh	r2, [r3, #0]
        Ax = Accel_X_RAW / 16384.0;
 8000f86:	4b52      	ldr	r3, [pc, #328]	; (80010d0 <MPU6050_Read_Accel+0x1b0>)
 8000f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fa75 	bl	800047c <__aeabi_i2d>
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	4b51      	ldr	r3, [pc, #324]	; (80010dc <MPU6050_Read_Accel+0x1bc>)
 8000f98:	f7ff fc04 	bl	80007a4 <__aeabi_ddiv>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f7ff fce6 	bl	8000974 <__aeabi_d2f>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a4d      	ldr	r2, [pc, #308]	; (80010e0 <MPU6050_Read_Accel+0x1c0>)
 8000fac:	6013      	str	r3, [r2, #0]
        Ay = Accel_Y_RAW / 16384.0;
 8000fae:	4b49      	ldr	r3, [pc, #292]	; (80010d4 <MPU6050_Read_Accel+0x1b4>)
 8000fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fa61 	bl	800047c <__aeabi_i2d>
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	4b47      	ldr	r3, [pc, #284]	; (80010dc <MPU6050_Read_Accel+0x1bc>)
 8000fc0:	f7ff fbf0 	bl	80007a4 <__aeabi_ddiv>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f7ff fcd2 	bl	8000974 <__aeabi_d2f>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a44      	ldr	r2, [pc, #272]	; (80010e4 <MPU6050_Read_Accel+0x1c4>)
 8000fd4:	6013      	str	r3, [r2, #0]
        Az = Accel_Z_RAW / 16384.0;
 8000fd6:	4b40      	ldr	r3, [pc, #256]	; (80010d8 <MPU6050_Read_Accel+0x1b8>)
 8000fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fa4d 	bl	800047c <__aeabi_i2d>
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	4b3d      	ldr	r3, [pc, #244]	; (80010dc <MPU6050_Read_Accel+0x1bc>)
 8000fe8:	f7ff fbdc 	bl	80007a4 <__aeabi_ddiv>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fcbe 	bl	8000974 <__aeabi_d2f>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4a3b      	ldr	r2, [pc, #236]	; (80010e8 <MPU6050_Read_Accel+0x1c8>)
 8000ffc:	6013      	str	r3, [r2, #0]

        arr_accel_x[i] = Ax;
 8000ffe:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <MPU6050_Read_Accel+0x1c0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fa4c 	bl	80004a0 <__aeabi_f2d>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4837      	ldr	r0, [pc, #220]	; (80010ec <MPU6050_Read_Accel+0x1cc>)
 800100e:	6979      	ldr	r1, [r7, #20]
 8001010:	00c9      	lsls	r1, r1, #3
 8001012:	4401      	add	r1, r0
 8001014:	e9c1 2300 	strd	r2, r3, [r1]
        arr_accel_y[i] = Ay;
 8001018:	4b32      	ldr	r3, [pc, #200]	; (80010e4 <MPU6050_Read_Accel+0x1c4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fa3f 	bl	80004a0 <__aeabi_f2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4832      	ldr	r0, [pc, #200]	; (80010f0 <MPU6050_Read_Accel+0x1d0>)
 8001028:	6979      	ldr	r1, [r7, #20]
 800102a:	00c9      	lsls	r1, r1, #3
 800102c:	4401      	add	r1, r0
 800102e:	e9c1 2300 	strd	r2, r3, [r1]
        arr_accel_z[i] = Az;
 8001032:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <MPU6050_Read_Accel+0x1c8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fa32 	bl	80004a0 <__aeabi_f2d>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	482c      	ldr	r0, [pc, #176]	; (80010f4 <MPU6050_Read_Accel+0x1d4>)
 8001042:	6979      	ldr	r1, [r7, #20]
 8001044:	00c9      	lsls	r1, r1, #3
 8001046:	4401      	add	r1, r0
 8001048:	e9c1 2300 	strd	r2, r3, [r1]

        KalmanFilterUpdateAccel(&accelFilter, Ax, R_ACCEL, 1); // Apply Kalman filter to accelerometer data
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <MPU6050_Read_Accel+0x1c0>)
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800105a:	eddf 0a27 	vldr	s1, [pc, #156]	; 80010f8 <MPU6050_Read_Accel+0x1d8>
 800105e:	eeb0 0a67 	vmov.f32	s0, s15
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fe78 	bl	8000d58 <KalmanFilterUpdateAccel>

        Kalman_accel_x[i] = accelFilter.x;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa18 	bl	80004a0 <__aeabi_f2d>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4821      	ldr	r0, [pc, #132]	; (80010fc <MPU6050_Read_Accel+0x1dc>)
 8001076:	6979      	ldr	r1, [r7, #20]
 8001078:	00c9      	lsls	r1, r1, #3
 800107a:	4401      	add	r1, r0
 800107c:	e9c1 2300 	strd	r2, r3, [r1]
        Kalman_accel_y[i] = accelFilter.P;
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fa0c 	bl	80004a0 <__aeabi_f2d>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	481c      	ldr	r0, [pc, #112]	; (8001100 <MPU6050_Read_Accel+0x1e0>)
 800108e:	6979      	ldr	r1, [r7, #20]
 8001090:	00c9      	lsls	r1, r1, #3
 8001092:	4401      	add	r1, r0
 8001094:	e9c1 2300 	strd	r2, r3, [r1]
        Kalman_accel_z[i] = Az;
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <MPU6050_Read_Accel+0x1c8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff f9ff 	bl	80004a0 <__aeabi_f2d>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4817      	ldr	r0, [pc, #92]	; (8001104 <MPU6050_Read_Accel+0x1e4>)
 80010a8:	6979      	ldr	r1, [r7, #20]
 80010aa:	00c9      	lsls	r1, r1, #3
 80010ac:	4401      	add	r1, r0
 80010ae:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < 100; i++)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2b63      	cmp	r3, #99	; 0x63
 80010bc:	f77f af3b 	ble.w	8000f36 <MPU6050_Read_Accel+0x16>
    }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000007c 	.word	0x2000007c
 80010d0:	20000124 	.word	0x20000124
 80010d4:	20000126 	.word	0x20000126
 80010d8:	20000128 	.word	0x20000128
 80010dc:	40d00000 	.word	0x40d00000
 80010e0:	20002cf0 	.word	0x20002cf0
 80010e4:	20002cf4 	.word	0x20002cf4
 80010e8:	20002cf8 	.word	0x20002cf8
 80010ec:	200013f0 	.word	0x200013f0
 80010f0:	20001710 	.word	0x20001710
 80010f4:	20001a30 	.word	0x20001a30
 80010f8:	3c23d70a 	.word	0x3c23d70a
 80010fc:	20000130 	.word	0x20000130
 8001100:	20000450 	.word	0x20000450
 8001104:	20000770 	.word	0x20000770

08001108 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af04      	add	r7, sp, #16
    KalmanFilterGyro gyroFilter;
    initKalmanFilterGyro(&gyroFilter);
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fe0e 	bl	8000d34 <initKalmanFilterGyro>

    for (int i = 0; i < 100; i++)
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	e0c0      	b.n	80012a0 <MPU6050_Read_Gyro+0x198>
    {
        uint8_t Rec_Data[6];
        HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	2306      	movs	r3, #6
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	2243      	movs	r2, #67	; 0x43
 8001130:	21d0      	movs	r1, #208	; 0xd0
 8001132:	4863      	ldr	r0, [pc, #396]	; (80012c0 <MPU6050_Read_Gyro+0x1b8>)
 8001134:	f001 fc04 	bl	8002940 <HAL_I2C_Mem_Read>
        Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001138:	793b      	ldrb	r3, [r7, #4]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21a      	sxth	r2, r3
 800113e:	797b      	ldrb	r3, [r7, #5]
 8001140:	b21b      	sxth	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	b21a      	sxth	r2, r3
 8001146:	4b5f      	ldr	r3, [pc, #380]	; (80012c4 <MPU6050_Read_Gyro+0x1bc>)
 8001148:	801a      	strh	r2, [r3, #0]
        Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800114a:	79bb      	ldrb	r3, [r7, #6]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b21a      	sxth	r2, r3
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	b21b      	sxth	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b21a      	sxth	r2, r3
 8001158:	4b5b      	ldr	r3, [pc, #364]	; (80012c8 <MPU6050_Read_Gyro+0x1c0>)
 800115a:	801a      	strh	r2, [r3, #0]
        Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800115c:	7a3b      	ldrb	r3, [r7, #8]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	b21a      	sxth	r2, r3
 8001162:	7a7b      	ldrb	r3, [r7, #9]
 8001164:	b21b      	sxth	r3, r3
 8001166:	4313      	orrs	r3, r2
 8001168:	b21a      	sxth	r2, r3
 800116a:	4b58      	ldr	r3, [pc, #352]	; (80012cc <MPU6050_Read_Gyro+0x1c4>)
 800116c:	801a      	strh	r2, [r3, #0]
        Gx = Gyro_X_RAW / 131.0;
 800116e:	4b55      	ldr	r3, [pc, #340]	; (80012c4 <MPU6050_Read_Gyro+0x1bc>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f981 	bl	800047c <__aeabi_i2d>
 800117a:	a34f      	add	r3, pc, #316	; (adr r3, 80012b8 <MPU6050_Read_Gyro+0x1b0>)
 800117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001180:	f7ff fb10 	bl	80007a4 <__aeabi_ddiv>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fbf2 	bl	8000974 <__aeabi_d2f>
 8001190:	4603      	mov	r3, r0
 8001192:	4a4f      	ldr	r2, [pc, #316]	; (80012d0 <MPU6050_Read_Gyro+0x1c8>)
 8001194:	6013      	str	r3, [r2, #0]
        Gy = Gyro_Y_RAW / 131.0;
 8001196:	4b4c      	ldr	r3, [pc, #304]	; (80012c8 <MPU6050_Read_Gyro+0x1c0>)
 8001198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f96d 	bl	800047c <__aeabi_i2d>
 80011a2:	a345      	add	r3, pc, #276	; (adr r3, 80012b8 <MPU6050_Read_Gyro+0x1b0>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fafc 	bl	80007a4 <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fbde 	bl	8000974 <__aeabi_d2f>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a46      	ldr	r2, [pc, #280]	; (80012d4 <MPU6050_Read_Gyro+0x1cc>)
 80011bc:	6013      	str	r3, [r2, #0]
        Gz = Gyro_Z_RAW / 131.0;
 80011be:	4b43      	ldr	r3, [pc, #268]	; (80012cc <MPU6050_Read_Gyro+0x1c4>)
 80011c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f959 	bl	800047c <__aeabi_i2d>
 80011ca:	a33b      	add	r3, pc, #236	; (adr r3, 80012b8 <MPU6050_Read_Gyro+0x1b0>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	f7ff fae8 	bl	80007a4 <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fbca 	bl	8000974 <__aeabi_d2f>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a3d      	ldr	r2, [pc, #244]	; (80012d8 <MPU6050_Read_Gyro+0x1d0>)
 80011e4:	6013      	str	r3, [r2, #0]

        arr_gyro_x[i] = Gx;
 80011e6:	4b3a      	ldr	r3, [pc, #232]	; (80012d0 <MPU6050_Read_Gyro+0x1c8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f958 	bl	80004a0 <__aeabi_f2d>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4839      	ldr	r0, [pc, #228]	; (80012dc <MPU6050_Read_Gyro+0x1d4>)
 80011f6:	6979      	ldr	r1, [r7, #20]
 80011f8:	00c9      	lsls	r1, r1, #3
 80011fa:	4401      	add	r1, r0
 80011fc:	e9c1 2300 	strd	r2, r3, [r1]
        arr_gyro_y[i] = Gy;
 8001200:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <MPU6050_Read_Gyro+0x1cc>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f94b 	bl	80004a0 <__aeabi_f2d>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4834      	ldr	r0, [pc, #208]	; (80012e0 <MPU6050_Read_Gyro+0x1d8>)
 8001210:	6979      	ldr	r1, [r7, #20]
 8001212:	00c9      	lsls	r1, r1, #3
 8001214:	4401      	add	r1, r0
 8001216:	e9c1 2300 	strd	r2, r3, [r1]
        arr_gyro_z[i] = Gz;
 800121a:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <MPU6050_Read_Gyro+0x1d0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f93e 	bl	80004a0 <__aeabi_f2d>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	482e      	ldr	r0, [pc, #184]	; (80012e4 <MPU6050_Read_Gyro+0x1dc>)
 800122a:	6979      	ldr	r1, [r7, #20]
 800122c:	00c9      	lsls	r1, r1, #3
 800122e:	4401      	add	r1, r0
 8001230:	e9c1 2300 	strd	r2, r3, [r1]

        KalmanFilterUpdateGyro(&gyroFilter, Gz, R_GYRO, 1); // Apply Kalman filter to gyroscope data
 8001234:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <MPU6050_Read_Gyro+0x1d0>)
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001242:	eddf 0a29 	vldr	s1, [pc, #164]	; 80012e8 <MPU6050_Read_Gyro+0x1e0>
 8001246:	eeb0 0a67 	vmov.f32	s0, s15
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fdd8 	bl	8000e00 <KalmanFilterUpdateGyro>

        Kalman_gyro_x[i] = gyroFilter.x;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f924 	bl	80004a0 <__aeabi_f2d>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4823      	ldr	r0, [pc, #140]	; (80012ec <MPU6050_Read_Gyro+0x1e4>)
 800125e:	6979      	ldr	r1, [r7, #20]
 8001260:	00c9      	lsls	r1, r1, #3
 8001262:	4401      	add	r1, r0
 8001264:	e9c1 2300 	strd	r2, r3, [r1]
        Kalman_gyro_y[i] = gyroFilter.P;
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f918 	bl	80004a0 <__aeabi_f2d>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	481e      	ldr	r0, [pc, #120]	; (80012f0 <MPU6050_Read_Gyro+0x1e8>)
 8001276:	6979      	ldr	r1, [r7, #20]
 8001278:	00c9      	lsls	r1, r1, #3
 800127a:	4401      	add	r1, r0
 800127c:	e9c1 2300 	strd	r2, r3, [r1]
        Kalman_gyro_z[i] = Gz;
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MPU6050_Read_Gyro+0x1d0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f90b 	bl	80004a0 <__aeabi_f2d>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4819      	ldr	r0, [pc, #100]	; (80012f4 <MPU6050_Read_Gyro+0x1ec>)
 8001290:	6979      	ldr	r1, [r7, #20]
 8001292:	00c9      	lsls	r1, r1, #3
 8001294:	4401      	add	r1, r0
 8001296:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < 100; i++)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3301      	adds	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b63      	cmp	r3, #99	; 0x63
 80012a4:	f77f af3b 	ble.w	800111e <MPU6050_Read_Gyro+0x16>
    }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	f3af 8000 	nop.w
 80012b8:	00000000 	.word	0x00000000
 80012bc:	40606000 	.word	0x40606000
 80012c0:	2000007c 	.word	0x2000007c
 80012c4:	2000012a 	.word	0x2000012a
 80012c8:	2000012c 	.word	0x2000012c
 80012cc:	2000012e 	.word	0x2000012e
 80012d0:	20002cfc 	.word	0x20002cfc
 80012d4:	20002d00 	.word	0x20002d00
 80012d8:	20002d04 	.word	0x20002d04
 80012dc:	20001d50 	.word	0x20001d50
 80012e0:	20002070 	.word	0x20002070
 80012e4:	20002390 	.word	0x20002390
 80012e8:	3c23d70a 	.word	0x3c23d70a
 80012ec:	20000a90 	.word	0x20000a90
 80012f0:	20000db0 	.word	0x20000db0
 80012f4:	200010d0 	.word	0x200010d0

080012f8 <PressureToHeight>:

float PressureToHeight (float pressure) // Function that convert pressure to height
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	ed87 0a01 	vstr	s0, [r7, #4]
	return PRESSURE_CONST * (1.0 - powf (pressure / SEA_LEVEL_PRESSURE, 1.0 / 5.255));
 8001302:	edd7 7a01 	vldr	s15, [r7, #4]
 8001306:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001368 <PressureToHeight+0x70>
 800130a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800130e:	eddf 0a17 	vldr	s1, [pc, #92]	; 800136c <PressureToHeight+0x74>
 8001312:	eeb0 0a47 	vmov.f32	s0, s14
 8001316:	f002 febf 	bl	8004098 <powf>
 800131a:	ee10 3a10 	vmov	r3, s0
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f8be 	bl	80004a0 <__aeabi_f2d>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	f04f 0000 	mov.w	r0, #0
 800132c:	4910      	ldr	r1, [pc, #64]	; (8001370 <PressureToHeight+0x78>)
 800132e:	f7fe ff57 	bl	80001e0 <__aeabi_dsub>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	a309      	add	r3, pc, #36	; (adr r3, 8001360 <PressureToHeight+0x68>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff f906 	bl	8000550 <__aeabi_dmul>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fb12 	bl	8000974 <__aeabi_d2f>
 8001350:	4603      	mov	r3, r0
 8001352:	ee07 3a90 	vmov	s15, r3
}
 8001356:	eeb0 0a67 	vmov.f32	s0, s15
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	00000000 	.word	0x00000000
 8001364:	40e5a540 	.word	0x40e5a540
 8001368:	447d5000 	.word	0x447d5000
 800136c:	3e42dcae 	.word	0x3e42dcae
 8001370:	3ff00000 	.word	0x3ff00000

08001374 <BMP280_ReadPressure>:

void BMP280_ReadPressure (void) // Function for reading data from BMP280
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af02      	add	r7, sp, #8
	for (int i = 0; i < 100; i++)
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	e052      	b.n	8001426 <BMP280_ReadPressure+0xb2>
	{
		uint8_t data [3];
		int32_t rawPressure;

		data [0] = 0xF7; // Address register of pressure
 8001380:	23f7      	movs	r3, #247	; 0xf7
 8001382:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Master_Transmit (&hi2c2, BMP280_ADDRESS << 1, data, 1, HAL_MAX_DELAY); // Sending command for reading pressure data from BMP280
 8001384:	1d3a      	adds	r2, r7, #4
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	21ec      	movs	r1, #236	; 0xec
 8001390:	4829      	ldr	r0, [pc, #164]	; (8001438 <BMP280_ReadPressure+0xc4>)
 8001392:	f000 feab 	bl	80020ec <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive (&hi2c2, BMP280_ADDRESS << 1, data, 3, HAL_MAX_DELAY);
 8001396:	1d3a      	adds	r2, r7, #4
 8001398:	f04f 33ff 	mov.w	r3, #4294967295
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2303      	movs	r3, #3
 80013a0:	21ec      	movs	r1, #236	; 0xec
 80013a2:	4825      	ldr	r0, [pc, #148]	; (8001438 <BMP280_ReadPressure+0xc4>)
 80013a4:	f000 ffa0 	bl	80022e8 <HAL_I2C_Master_Receive>

		rawPressure = (data [0] << 12) | (data [1] << 4) | (data [2] >> 4);
 80013a8:	793b      	ldrb	r3, [r7, #4]
 80013aa:	031a      	lsls	r2, r3, #12
 80013ac:	797b      	ldrb	r3, [r7, #5]
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	4313      	orrs	r3, r2
 80013b2:	79ba      	ldrb	r2, [r7, #6]
 80013b4:	0912      	lsrs	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	4313      	orrs	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
		Pressure = (float) rawPressure / 256.0; // Convert in Pascal
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c6:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800143c <BMP280_ReadPressure+0xc8>
 80013ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <BMP280_ReadPressure+0xcc>)
 80013d0:	edc3 7a00 	vstr	s15, [r3]
		pressure [i] = Pressure;
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <BMP280_ReadPressure+0xcc>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f861 	bl	80004a0 <__aeabi_f2d>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4818      	ldr	r0, [pc, #96]	; (8001444 <BMP280_ReadPressure+0xd0>)
 80013e4:	68f9      	ldr	r1, [r7, #12]
 80013e6:	00c9      	lsls	r1, r1, #3
 80013e8:	4401      	add	r1, r0
 80013ea:	e9c1 2300 	strd	r2, r3, [r1]
		Height [i] = PressureToHeight(*pressure);
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <BMP280_ReadPressure+0xd0>)
 80013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fabc 	bl	8000974 <__aeabi_d2f>
 80013fc:	4603      	mov	r3, r0
 80013fe:	ee00 3a10 	vmov	s0, r3
 8001402:	f7ff ff79 	bl	80012f8 <PressureToHeight>
 8001406:	ee10 3a10 	vmov	r3, s0
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f848 	bl	80004a0 <__aeabi_f2d>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	480c      	ldr	r0, [pc, #48]	; (8001448 <BMP280_ReadPressure+0xd4>)
 8001416:	68f9      	ldr	r1, [r7, #12]
 8001418:	00c9      	lsls	r1, r1, #3
 800141a:	4401      	add	r1, r0
 800141c:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 100; i++)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2b63      	cmp	r3, #99	; 0x63
 800142a:	dda9      	ble.n	8001380 <BMP280_ReadPressure+0xc>
	}
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200000d0 	.word	0x200000d0
 800143c:	43800000 	.word	0x43800000
 8001440:	20002d08 	.word	0x20002d08
 8001444:	200026b0 	.word	0x200026b0
 8001448:	200029d0 	.word	0x200029d0

0800144c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001450:	f000 fa08 	bl	8001864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001454:	f000 f810 	bl	8001478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001458:	f000 f8ca 	bl	80015f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800145c:	f000 f86c 	bl	8001538 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001460:	f000 f898 	bl	8001594 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	MPU6050_Init();
 8001464:	f7ff fd20 	bl	8000ea8 <MPU6050_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_Accel();
 8001468:	f7ff fd5a 	bl	8000f20 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 800146c:	f7ff fe4c 	bl	8001108 <MPU6050_Read_Gyro>
	  BMP280_ReadPressure();
 8001470:	f7ff ff80 	bl	8001374 <BMP280_ReadPressure>
	  MPU6050_Read_Accel();
 8001474:	e7f8      	b.n	8001468 <main+0x1c>
	...

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b094      	sub	sp, #80	; 0x50
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	2230      	movs	r2, #48	; 0x30
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f002 fdd4 	bl	8004034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	4b23      	ldr	r3, [pc, #140]	; (8001530 <SystemClock_Config+0xb8>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	4a22      	ldr	r2, [pc, #136]	; (8001530 <SystemClock_Config+0xb8>)
 80014a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014aa:	6413      	str	r3, [r2, #64]	; 0x40
 80014ac:	4b20      	ldr	r3, [pc, #128]	; (8001530 <SystemClock_Config+0xb8>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <SystemClock_Config+0xbc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014c4:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <SystemClock_Config+0xbc>)
 80014c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <SystemClock_Config+0xbc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d8:	2302      	movs	r3, #2
 80014da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014dc:	2301      	movs	r3, #1
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e0:	2310      	movs	r3, #16
 80014e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e8:	f107 0320 	add.w	r3, r7, #32
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 f95d 	bl	80037ac <HAL_RCC_OscConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80014f8:	f000 f894 	bl	8001624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fc:	230f      	movs	r3, #15
 80014fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f002 fbc0 	bl	8003c9c <HAL_RCC_ClockConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001522:	f000 f87f 	bl	8001624 <Error_Handler>
  }
}
 8001526:	bf00      	nop
 8001528:	3750      	adds	r7, #80	; 0x50
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40007000 	.word	0x40007000

08001538 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <MX_I2C1_Init+0x50>)
 800153e:	4a13      	ldr	r2, [pc, #76]	; (800158c <MX_I2C1_Init+0x54>)
 8001540:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_I2C1_Init+0x50>)
 8001544:	4a12      	ldr	r2, [pc, #72]	; (8001590 <MX_I2C1_Init+0x58>)
 8001546:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_I2C1_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_I2C1_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_I2C1_Init+0x50>)
 8001556:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800155a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <MX_I2C1_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_I2C1_Init+0x50>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <MX_I2C1_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_I2C1_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_I2C1_Init+0x50>)
 8001576:	f000 fc75 	bl	8001e64 <HAL_I2C_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001580:	f000 f850 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000007c 	.word	0x2000007c
 800158c:	40005400 	.word	0x40005400
 8001590:	000186a0 	.word	0x000186a0

08001594 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <MX_I2C2_Init+0x50>)
 800159a:	4a13      	ldr	r2, [pc, #76]	; (80015e8 <MX_I2C2_Init+0x54>)
 800159c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_I2C2_Init+0x50>)
 80015a0:	4a12      	ldr	r2, [pc, #72]	; (80015ec <MX_I2C2_Init+0x58>)
 80015a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_I2C2_Init+0x50>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_I2C2_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_I2C2_Init+0x50>)
 80015b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <MX_I2C2_Init+0x50>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_I2C2_Init+0x50>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <MX_I2C2_Init+0x50>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_I2C2_Init+0x50>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <MX_I2C2_Init+0x50>)
 80015d2:	f000 fc47 	bl	8001e64 <HAL_I2C_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015dc:	f000 f822 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200000d0 	.word	0x200000d0
 80015e8:	40005800 	.word	0x40005800
 80015ec:	000186a0 	.word	0x000186a0

080015f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_GPIO_Init+0x30>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a08      	ldr	r2, [pc, #32]	; (8001620 <MX_GPIO_Init+0x30>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_GPIO_Init+0x30>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162c:	e7fe      	b.n	800162c <Error_Handler+0x8>
	...

08001630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <HAL_MspInit+0x4c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a0f      	ldr	r2, [pc, #60]	; (800167c <HAL_MspInit+0x4c>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_MspInit+0x4c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a08      	ldr	r2, [pc, #32]	; (800167c <HAL_MspInit+0x4c>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800

08001680 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08c      	sub	sp, #48	; 0x30
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a3a      	ldr	r2, [pc, #232]	; (8001788 <HAL_I2C_MspInit+0x108>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d12c      	bne.n	80016fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	4b39      	ldr	r3, [pc, #228]	; (800178c <HAL_I2C_MspInit+0x10c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a38      	ldr	r2, [pc, #224]	; (800178c <HAL_I2C_MspInit+0x10c>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b36      	ldr	r3, [pc, #216]	; (800178c <HAL_I2C_MspInit+0x10c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016be:	23c0      	movs	r3, #192	; 0xc0
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c2:	2312      	movs	r3, #18
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ce:	2304      	movs	r3, #4
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	482d      	ldr	r0, [pc, #180]	; (8001790 <HAL_I2C_MspInit+0x110>)
 80016da:	f000 fa3f 	bl	8001b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	4b2a      	ldr	r3, [pc, #168]	; (800178c <HAL_I2C_MspInit+0x10c>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	4a29      	ldr	r2, [pc, #164]	; (800178c <HAL_I2C_MspInit+0x10c>)
 80016e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ec:	6413      	str	r3, [r2, #64]	; 0x40
 80016ee:	4b27      	ldr	r3, [pc, #156]	; (800178c <HAL_I2C_MspInit+0x10c>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016fa:	e041      	b.n	8001780 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a24      	ldr	r2, [pc, #144]	; (8001794 <HAL_I2C_MspInit+0x114>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d13c      	bne.n	8001780 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_I2C_MspInit+0x10c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a1f      	ldr	r2, [pc, #124]	; (800178c <HAL_I2C_MspInit+0x10c>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <HAL_I2C_MspInit+0x10c>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001728:	2312      	movs	r3, #18
 800172a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001734:	2304      	movs	r3, #4
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	4619      	mov	r1, r3
 800173e:	4814      	ldr	r0, [pc, #80]	; (8001790 <HAL_I2C_MspInit+0x110>)
 8001740:	f000 fa0c 	bl	8001b5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001744:	2308      	movs	r3, #8
 8001746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001748:	2312      	movs	r3, #18
 800174a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001754:	2309      	movs	r3, #9
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4619      	mov	r1, r3
 800175e:	480c      	ldr	r0, [pc, #48]	; (8001790 <HAL_I2C_MspInit+0x110>)
 8001760:	f000 f9fc 	bl	8001b5c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_I2C_MspInit+0x10c>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	4a07      	ldr	r2, [pc, #28]	; (800178c <HAL_I2C_MspInit+0x10c>)
 800176e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001772:	6413      	str	r3, [r2, #64]	; 0x40
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_I2C_MspInit+0x10c>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	bf00      	nop
 8001782:	3730      	adds	r7, #48	; 0x30
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40005400 	.word	0x40005400
 800178c:	40023800 	.word	0x40023800
 8001790:	40020400 	.word	0x40020400
 8001794:	40005800 	.word	0x40005800

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800179c:	e7fe      	b.n	800179c <NMI_Handler+0x4>

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler+0x4>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e4:	f000 f890 	bl	8001908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <SystemInit+0x20>)
 80017f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f6:	4a05      	ldr	r2, [pc, #20]	; (800180c <SystemInit+0x20>)
 80017f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8001810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001848 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001814:	f7ff ffea 	bl	80017ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001818:	480c      	ldr	r0, [pc, #48]	; (800184c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800181a:	490d      	ldr	r1, [pc, #52]	; (8001850 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800181c:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001820:	e002      	b.n	8001828 <LoopCopyDataInit>

08001822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001826:	3304      	adds	r3, #4

08001828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800182c:	d3f9      	bcc.n	8001822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001830:	4c0a      	ldr	r4, [pc, #40]	; (800185c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001834:	e001      	b.n	800183a <LoopFillZerobss>

08001836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001838:	3204      	adds	r2, #4

0800183a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800183c:	d3fb      	bcc.n	8001836 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800183e:	f002 fc07 	bl	8004050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001842:	f7ff fe03 	bl	800144c <main>
  bx  lr    
 8001846:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001848:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001850:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001854:	08004874 	.word	0x08004874
  ldr r2, =_sbss
 8001858:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800185c:	20002e48 	.word	0x20002e48

08001860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC_IRQHandler>
	...

08001864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001868:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <HAL_Init+0x40>)
 800186e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001872:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_Init+0x40>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_Init+0x40>)
 800187a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800187e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_Init+0x40>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <HAL_Init+0x40>)
 8001886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800188c:	2003      	movs	r0, #3
 800188e:	f000 f931 	bl	8001af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001892:	200f      	movs	r0, #15
 8001894:	f000 f808 	bl	80018a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001898:	f7ff feca 	bl	8001630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023c00 	.word	0x40023c00

080018a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_InitTick+0x54>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x58>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f93b 	bl	8001b42 <HAL_SYSTICK_Config>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00e      	b.n	80018f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d80a      	bhi.n	80018f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f000 f911 	bl	8001b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e8:	4a06      	ldr	r2, [pc, #24]	; (8001904 <HAL_InitTick+0x5c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e000      	b.n	80018f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000000 	.word	0x20000000
 8001900:	20000008 	.word	0x20000008
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x20>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x24>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_IncTick+0x24>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000008 	.word	0x20000008
 800192c:	20002d0c 	.word	0x20002d0c

08001930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_GetTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20002d0c 	.word	0x20002d0c

08001948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff ffee 	bl	8001930 <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001960:	d005      	beq.n	800196e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_Delay+0x44>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800196e:	bf00      	nop
 8001970:	f7ff ffde 	bl	8001930 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8f7      	bhi.n	8001970 <HAL_Delay+0x28>
  {
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000008 	.word	0x20000008

08001990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db0a      	blt.n	8001a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	490c      	ldr	r1, [pc, #48]	; (8001a40 <__NVIC_SetPriority+0x4c>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	440b      	add	r3, r1
 8001a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a1c:	e00a      	b.n	8001a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4908      	ldr	r1, [pc, #32]	; (8001a44 <__NVIC_SetPriority+0x50>)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	3b04      	subs	r3, #4
 8001a2c:	0112      	lsls	r2, r2, #4
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	440b      	add	r3, r1
 8001a32:	761a      	strb	r2, [r3, #24]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000e100 	.word	0xe000e100
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f1c3 0307 	rsb	r3, r3, #7
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	bf28      	it	cs
 8001a66:	2304      	movcs	r3, #4
 8001a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d902      	bls.n	8001a78 <NVIC_EncodePriority+0x30>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3b03      	subs	r3, #3
 8001a76:	e000      	b.n	8001a7a <NVIC_EncodePriority+0x32>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a90:	f04f 31ff 	mov.w	r1, #4294967295
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43d9      	mvns	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	4313      	orrs	r3, r2
         );
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac0:	d301      	bcc.n	8001ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00f      	b.n	8001ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <SysTick_Config+0x40>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ace:	210f      	movs	r1, #15
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f7ff ff8e 	bl	80019f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <SysTick_Config+0x40>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ade:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <SysTick_Config+0x40>)
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff47 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b1c:	f7ff ff5c 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	6978      	ldr	r0, [r7, #20]
 8001b28:	f7ff ff8e 	bl	8001a48 <NVIC_EncodePriority>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff5d 	bl	80019f4 <__NVIC_SetPriority>
}
 8001b3a:	bf00      	nop
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ffb0 	bl	8001ab0 <SysTick_Config>
 8001b50:	4603      	mov	r3, r0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	e159      	b.n	8001e2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	f040 8148 	bne.w	8001e26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d005      	beq.n	8001bae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d130      	bne.n	8001c10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	2203      	movs	r2, #3
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be4:	2201      	movs	r2, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 0201 	and.w	r2, r3, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d017      	beq.n	8001c4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d123      	bne.n	8001ca0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	08da      	lsrs	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3208      	adds	r2, #8
 8001c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	08da      	lsrs	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3208      	adds	r2, #8
 8001c9a:	69b9      	ldr	r1, [r7, #24]
 8001c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0203 	and.w	r2, r3, #3
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80a2 	beq.w	8001e26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b57      	ldr	r3, [pc, #348]	; (8001e44 <HAL_GPIO_Init+0x2e8>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	4a56      	ldr	r2, [pc, #344]	; (8001e44 <HAL_GPIO_Init+0x2e8>)
 8001cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf2:	4b54      	ldr	r3, [pc, #336]	; (8001e44 <HAL_GPIO_Init+0x2e8>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cfe:	4a52      	ldr	r2, [pc, #328]	; (8001e48 <HAL_GPIO_Init+0x2ec>)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	220f      	movs	r2, #15
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a49      	ldr	r2, [pc, #292]	; (8001e4c <HAL_GPIO_Init+0x2f0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d019      	beq.n	8001d5e <HAL_GPIO_Init+0x202>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a48      	ldr	r2, [pc, #288]	; (8001e50 <HAL_GPIO_Init+0x2f4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0x1fe>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a47      	ldr	r2, [pc, #284]	; (8001e54 <HAL_GPIO_Init+0x2f8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00d      	beq.n	8001d56 <HAL_GPIO_Init+0x1fa>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a46      	ldr	r2, [pc, #280]	; (8001e58 <HAL_GPIO_Init+0x2fc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <HAL_GPIO_Init+0x1f6>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a45      	ldr	r2, [pc, #276]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_GPIO_Init+0x1f2>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	e008      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d4e:	2307      	movs	r3, #7
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d52:	2303      	movs	r3, #3
 8001d54:	e004      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e002      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	f002 0203 	and.w	r2, r2, #3
 8001d66:	0092      	lsls	r2, r2, #2
 8001d68:	4093      	lsls	r3, r2
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d70:	4935      	ldr	r1, [pc, #212]	; (8001e48 <HAL_GPIO_Init+0x2ec>)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	3302      	adds	r3, #2
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7e:	4b38      	ldr	r3, [pc, #224]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da2:	4a2f      	ldr	r2, [pc, #188]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da8:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dcc:	4a24      	ldr	r2, [pc, #144]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dd2:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df6:	4a1a      	ldr	r2, [pc, #104]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e20:	4a0f      	ldr	r2, [pc, #60]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	61fb      	str	r3, [r7, #28]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	2b0f      	cmp	r3, #15
 8001e30:	f67f aea2 	bls.w	8001b78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3724      	adds	r7, #36	; 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40013800 	.word	0x40013800
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	40020400 	.word	0x40020400
 8001e54:	40020800 	.word	0x40020800
 8001e58:	40020c00 	.word	0x40020c00
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40013c00 	.word	0x40013c00

08001e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e12b      	b.n	80020ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d106      	bne.n	8001e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fbf8 	bl	8001680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2224      	movs	r2, #36	; 0x24
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ec6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ec8:	f002 f8a0 	bl	800400c <HAL_RCC_GetPCLK1Freq>
 8001ecc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4a81      	ldr	r2, [pc, #516]	; (80020d8 <HAL_I2C_Init+0x274>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d807      	bhi.n	8001ee8 <HAL_I2C_Init+0x84>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4a80      	ldr	r2, [pc, #512]	; (80020dc <HAL_I2C_Init+0x278>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	bf94      	ite	ls
 8001ee0:	2301      	movls	r3, #1
 8001ee2:	2300      	movhi	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	e006      	b.n	8001ef6 <HAL_I2C_Init+0x92>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4a7d      	ldr	r2, [pc, #500]	; (80020e0 <HAL_I2C_Init+0x27c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	bf94      	ite	ls
 8001ef0:	2301      	movls	r3, #1
 8001ef2:	2300      	movhi	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e0e7      	b.n	80020ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4a78      	ldr	r2, [pc, #480]	; (80020e4 <HAL_I2C_Init+0x280>)
 8001f02:	fba2 2303 	umull	r2, r3, r2, r3
 8001f06:	0c9b      	lsrs	r3, r3, #18
 8001f08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4a6a      	ldr	r2, [pc, #424]	; (80020d8 <HAL_I2C_Init+0x274>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d802      	bhi.n	8001f38 <HAL_I2C_Init+0xd4>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	3301      	adds	r3, #1
 8001f36:	e009      	b.n	8001f4c <HAL_I2C_Init+0xe8>
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	4a69      	ldr	r2, [pc, #420]	; (80020e8 <HAL_I2C_Init+0x284>)
 8001f44:	fba2 2303 	umull	r2, r3, r2, r3
 8001f48:	099b      	lsrs	r3, r3, #6
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	430b      	orrs	r3, r1
 8001f52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	495c      	ldr	r1, [pc, #368]	; (80020d8 <HAL_I2C_Init+0x274>)
 8001f68:	428b      	cmp	r3, r1
 8001f6a:	d819      	bhi.n	8001fa0 <HAL_I2C_Init+0x13c>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1e59      	subs	r1, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f7a:	1c59      	adds	r1, r3, #1
 8001f7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f80:	400b      	ands	r3, r1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <HAL_I2C_Init+0x138>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1e59      	subs	r1, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f94:	3301      	adds	r3, #1
 8001f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9a:	e051      	b.n	8002040 <HAL_I2C_Init+0x1dc>
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	e04f      	b.n	8002040 <HAL_I2C_Init+0x1dc>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d111      	bne.n	8001fcc <HAL_I2C_Init+0x168>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1e58      	subs	r0, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	440b      	add	r3, r1
 8001fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf0c      	ite	eq
 8001fc4:	2301      	moveq	r3, #1
 8001fc6:	2300      	movne	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	e012      	b.n	8001ff2 <HAL_I2C_Init+0x18e>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	1e58      	subs	r0, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6859      	ldr	r1, [r3, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	0099      	lsls	r1, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	bf0c      	ite	eq
 8001fec:	2301      	moveq	r3, #1
 8001fee:	2300      	movne	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_I2C_Init+0x196>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e022      	b.n	8002040 <HAL_I2C_Init+0x1dc>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10e      	bne.n	8002020 <HAL_I2C_Init+0x1bc>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1e58      	subs	r0, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6859      	ldr	r1, [r3, #4]
 800200a:	460b      	mov	r3, r1
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	440b      	add	r3, r1
 8002010:	fbb0 f3f3 	udiv	r3, r0, r3
 8002014:	3301      	adds	r3, #1
 8002016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800201a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800201e:	e00f      	b.n	8002040 <HAL_I2C_Init+0x1dc>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1e58      	subs	r0, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	0099      	lsls	r1, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	fbb0 f3f3 	udiv	r3, r0, r3
 8002036:	3301      	adds	r3, #1
 8002038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	6809      	ldr	r1, [r1, #0]
 8002044:	4313      	orrs	r3, r2
 8002046:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69da      	ldr	r2, [r3, #28]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800206e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6911      	ldr	r1, [r2, #16]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68d2      	ldr	r2, [r2, #12]
 800207a:	4311      	orrs	r1, r2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	430b      	orrs	r3, r1
 8002082:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	000186a0 	.word	0x000186a0
 80020dc:	001e847f 	.word	0x001e847f
 80020e0:	003d08ff 	.word	0x003d08ff
 80020e4:	431bde83 	.word	0x431bde83
 80020e8:	10624dd3 	.word	0x10624dd3

080020ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	461a      	mov	r2, r3
 80020f8:	460b      	mov	r3, r1
 80020fa:	817b      	strh	r3, [r7, #10]
 80020fc:	4613      	mov	r3, r2
 80020fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002100:	f7ff fc16 	bl	8001930 <HAL_GetTick>
 8002104:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b20      	cmp	r3, #32
 8002110:	f040 80e0 	bne.w	80022d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	2319      	movs	r3, #25
 800211a:	2201      	movs	r2, #1
 800211c:	4970      	ldr	r1, [pc, #448]	; (80022e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f001 f90e 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800212a:	2302      	movs	r3, #2
 800212c:	e0d3      	b.n	80022d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_I2C_Master_Transmit+0x50>
 8002138:	2302      	movs	r3, #2
 800213a:	e0cc      	b.n	80022d6 <HAL_I2C_Master_Transmit+0x1ea>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b01      	cmp	r3, #1
 8002150:	d007      	beq.n	8002162 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f042 0201 	orr.w	r2, r2, #1
 8002160:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002170:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2221      	movs	r2, #33	; 0x21
 8002176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2210      	movs	r2, #16
 800217e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	893a      	ldrh	r2, [r7, #8]
 8002192:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4a50      	ldr	r2, [pc, #320]	; (80022e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80021a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021a4:	8979      	ldrh	r1, [r7, #10]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	6a3a      	ldr	r2, [r7, #32]
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 fdfa 	bl	8002da4 <I2C_MasterRequestWrite>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e08d      	b.n	80022d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021d0:	e066      	b.n	80022a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	6a39      	ldr	r1, [r7, #32]
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f001 f9cc 	bl	8003574 <I2C_WaitOnTXEFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00d      	beq.n	80021fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d107      	bne.n	80021fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e06b      	b.n	80022d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	781a      	ldrb	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002218:	b29b      	uxth	r3, r3
 800221a:	3b01      	subs	r3, #1
 800221c:	b29a      	uxth	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b04      	cmp	r3, #4
 800223a:	d11b      	bne.n	8002274 <HAL_I2C_Master_Transmit+0x188>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002240:	2b00      	cmp	r3, #0
 8002242:	d017      	beq.n	8002274 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	781a      	ldrb	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225e:	b29b      	uxth	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	6a39      	ldr	r1, [r7, #32]
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f001 f9c3 	bl	8003604 <I2C_WaitOnBTFFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00d      	beq.n	80022a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	2b04      	cmp	r3, #4
 800228a:	d107      	bne.n	800229c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e01a      	b.n	80022d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d194      	bne.n	80021d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	e000      	b.n	80022d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022d4:	2302      	movs	r3, #2
  }
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	00100002 	.word	0x00100002
 80022e4:	ffff0000 	.word	0xffff0000

080022e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08c      	sub	sp, #48	; 0x30
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	461a      	mov	r2, r3
 80022f4:	460b      	mov	r3, r1
 80022f6:	817b      	strh	r3, [r7, #10]
 80022f8:	4613      	mov	r3, r2
 80022fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022fc:	f7ff fb18 	bl	8001930 <HAL_GetTick>
 8002300:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b20      	cmp	r3, #32
 800230c:	f040 8217 	bne.w	800273e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	2319      	movs	r3, #25
 8002316:	2201      	movs	r2, #1
 8002318:	497c      	ldr	r1, [pc, #496]	; (800250c <HAL_I2C_Master_Receive+0x224>)
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f001 f810 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002326:	2302      	movs	r3, #2
 8002328:	e20a      	b.n	8002740 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_I2C_Master_Receive+0x50>
 8002334:	2302      	movs	r3, #2
 8002336:	e203      	b.n	8002740 <HAL_I2C_Master_Receive+0x458>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b01      	cmp	r3, #1
 800234c:	d007      	beq.n	800235e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0201 	orr.w	r2, r2, #1
 800235c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800236c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2222      	movs	r2, #34	; 0x22
 8002372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2210      	movs	r2, #16
 800237a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	893a      	ldrh	r2, [r7, #8]
 800238e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4a5c      	ldr	r2, [pc, #368]	; (8002510 <HAL_I2C_Master_Receive+0x228>)
 800239e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023a0:	8979      	ldrh	r1, [r7, #10]
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 fd7e 	bl	8002ea8 <I2C_MasterRequestRead>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e1c4      	b.n	8002740 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d113      	bne.n	80023e6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023be:	2300      	movs	r3, #0
 80023c0:	623b      	str	r3, [r7, #32]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	623b      	str	r3, [r7, #32]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	623b      	str	r3, [r7, #32]
 80023d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	e198      	b.n	8002718 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d11b      	bne.n	8002426 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	e178      	b.n	8002718 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242a:	2b02      	cmp	r3, #2
 800242c:	d11b      	bne.n	8002466 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800243c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800244c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	61bb      	str	r3, [r7, #24]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	e158      	b.n	8002718 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002474:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800248c:	e144      	b.n	8002718 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002492:	2b03      	cmp	r3, #3
 8002494:	f200 80f1 	bhi.w	800267a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249c:	2b01      	cmp	r3, #1
 800249e:	d123      	bne.n	80024e8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f001 f8f5 	bl	8003694 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e145      	b.n	8002740 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024e6:	e117      	b.n	8002718 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d14e      	bne.n	800258e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f6:	2200      	movs	r2, #0
 80024f8:	4906      	ldr	r1, [pc, #24]	; (8002514 <HAL_I2C_Master_Receive+0x22c>)
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 ff20 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e11a      	b.n	8002740 <HAL_I2C_Master_Receive+0x458>
 800250a:	bf00      	nop
 800250c:	00100002 	.word	0x00100002
 8002510:	ffff0000 	.word	0xffff0000
 8002514:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002582:	b29b      	uxth	r3, r3
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800258c:	e0c4      	b.n	8002718 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002594:	2200      	movs	r2, #0
 8002596:	496c      	ldr	r1, [pc, #432]	; (8002748 <HAL_I2C_Master_Receive+0x460>)
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 fed1 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0cb      	b.n	8002740 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	2200      	movs	r2, #0
 80025f2:	4955      	ldr	r1, [pc, #340]	; (8002748 <HAL_I2C_Master_Receive+0x460>)
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fea3 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e09d      	b.n	8002740 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002612:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002630:	3b01      	subs	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263c:	b29b      	uxth	r3, r3
 800263e:	3b01      	subs	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266e:	b29b      	uxth	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002678:	e04e      	b.n	8002718 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f001 f808 	bl	8003694 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e058      	b.n	8002740 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d124      	bne.n	8002718 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d107      	bne.n	80026e6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	f47f aeb6 	bne.w	800248e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	e000      	b.n	8002740 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800273e:	2302      	movs	r3, #2
  }
}
 8002740:	4618      	mov	r0, r3
 8002742:	3728      	adds	r7, #40	; 0x28
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	00010004 	.word	0x00010004

0800274c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	4608      	mov	r0, r1
 8002756:	4611      	mov	r1, r2
 8002758:	461a      	mov	r2, r3
 800275a:	4603      	mov	r3, r0
 800275c:	817b      	strh	r3, [r7, #10]
 800275e:	460b      	mov	r3, r1
 8002760:	813b      	strh	r3, [r7, #8]
 8002762:	4613      	mov	r3, r2
 8002764:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002766:	f7ff f8e3 	bl	8001930 <HAL_GetTick>
 800276a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b20      	cmp	r3, #32
 8002776:	f040 80d9 	bne.w	800292c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2319      	movs	r3, #25
 8002780:	2201      	movs	r2, #1
 8002782:	496d      	ldr	r1, [pc, #436]	; (8002938 <HAL_I2C_Mem_Write+0x1ec>)
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fddb 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002790:	2302      	movs	r3, #2
 8002792:	e0cc      	b.n	800292e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_I2C_Mem_Write+0x56>
 800279e:	2302      	movs	r3, #2
 80027a0:	e0c5      	b.n	800292e <HAL_I2C_Mem_Write+0x1e2>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d007      	beq.n	80027c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2221      	movs	r2, #33	; 0x21
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2240      	movs	r2, #64	; 0x40
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a3a      	ldr	r2, [r7, #32]
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4a4d      	ldr	r2, [pc, #308]	; (800293c <HAL_I2C_Mem_Write+0x1f0>)
 8002808:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800280a:	88f8      	ldrh	r0, [r7, #6]
 800280c:	893a      	ldrh	r2, [r7, #8]
 800280e:	8979      	ldrh	r1, [r7, #10]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	4603      	mov	r3, r0
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 fc12 	bl	8003044 <I2C_RequestMemoryWrite>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d052      	beq.n	80028cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e081      	b.n	800292e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 fea0 	bl	8003574 <I2C_WaitOnTXEFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00d      	beq.n	8002856 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	2b04      	cmp	r3, #4
 8002840:	d107      	bne.n	8002852 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002850:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e06b      	b.n	800292e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	781a      	ldrb	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b04      	cmp	r3, #4
 8002892:	d11b      	bne.n	80028cc <HAL_I2C_Mem_Write+0x180>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002898:	2b00      	cmp	r3, #0
 800289a:	d017      	beq.n	80028cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	781a      	ldrb	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1aa      	bne.n	800282a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fe93 	bl	8003604 <I2C_WaitOnBTFFlagUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00d      	beq.n	8002900 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d107      	bne.n	80028fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e016      	b.n	800292e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	e000      	b.n	800292e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800292c:	2302      	movs	r3, #2
  }
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	00100002 	.word	0x00100002
 800293c:	ffff0000 	.word	0xffff0000

08002940 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08c      	sub	sp, #48	; 0x30
 8002944:	af02      	add	r7, sp, #8
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	4608      	mov	r0, r1
 800294a:	4611      	mov	r1, r2
 800294c:	461a      	mov	r2, r3
 800294e:	4603      	mov	r3, r0
 8002950:	817b      	strh	r3, [r7, #10]
 8002952:	460b      	mov	r3, r1
 8002954:	813b      	strh	r3, [r7, #8]
 8002956:	4613      	mov	r3, r2
 8002958:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800295a:	f7fe ffe9 	bl	8001930 <HAL_GetTick>
 800295e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b20      	cmp	r3, #32
 800296a:	f040 8214 	bne.w	8002d96 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	2319      	movs	r3, #25
 8002974:	2201      	movs	r2, #1
 8002976:	497b      	ldr	r1, [pc, #492]	; (8002b64 <HAL_I2C_Mem_Read+0x224>)
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 fce1 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002984:	2302      	movs	r3, #2
 8002986:	e207      	b.n	8002d98 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_I2C_Mem_Read+0x56>
 8002992:	2302      	movs	r3, #2
 8002994:	e200      	b.n	8002d98 <HAL_I2C_Mem_Read+0x458>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d007      	beq.n	80029bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2222      	movs	r2, #34	; 0x22
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2240      	movs	r2, #64	; 0x40
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80029ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4a5b      	ldr	r2, [pc, #364]	; (8002b68 <HAL_I2C_Mem_Read+0x228>)
 80029fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029fe:	88f8      	ldrh	r0, [r7, #6]
 8002a00:	893a      	ldrh	r2, [r7, #8]
 8002a02:	8979      	ldrh	r1, [r7, #10]
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 fbae 	bl	8003170 <I2C_RequestMemoryRead>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e1bc      	b.n	8002d98 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d113      	bne.n	8002a4e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	623b      	str	r3, [r7, #32]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	623b      	str	r3, [r7, #32]
 8002a3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	e190      	b.n	8002d70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d11b      	bne.n	8002a8e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	e170      	b.n	8002d70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d11b      	bne.n	8002ace <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ab4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	e150      	b.n	8002d70 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ae4:	e144      	b.n	8002d70 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	f200 80f1 	bhi.w	8002cd2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d123      	bne.n	8002b40 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 fdc9 	bl	8003694 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e145      	b.n	8002d98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b3e:	e117      	b.n	8002d70 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d14e      	bne.n	8002be6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4e:	2200      	movs	r2, #0
 8002b50:	4906      	ldr	r1, [pc, #24]	; (8002b6c <HAL_I2C_Mem_Read+0x22c>)
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fbf4 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d008      	beq.n	8002b70 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e11a      	b.n	8002d98 <HAL_I2C_Mem_Read+0x458>
 8002b62:	bf00      	nop
 8002b64:	00100002 	.word	0x00100002
 8002b68:	ffff0000 	.word	0xffff0000
 8002b6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002be4:	e0c4      	b.n	8002d70 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bec:	2200      	movs	r2, #0
 8002bee:	496c      	ldr	r1, [pc, #432]	; (8002da0 <HAL_I2C_Mem_Read+0x460>)
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fba5 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0cb      	b.n	8002d98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c48:	2200      	movs	r2, #0
 8002c4a:	4955      	ldr	r1, [pc, #340]	; (8002da0 <HAL_I2C_Mem_Read+0x460>)
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fb77 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e09d      	b.n	8002d98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cd0:	e04e      	b.n	8002d70 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fcdc 	bl	8003694 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e058      	b.n	8002d98 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d124      	bne.n	8002d70 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d107      	bne.n	8002d3e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d3c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f47f aeb6 	bne.w	8002ae6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e000      	b.n	8002d98 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002d96:	2302      	movs	r3, #2
  }
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3728      	adds	r7, #40	; 0x28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	00010004 	.word	0x00010004

08002da4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	460b      	mov	r3, r1
 8002db2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d006      	beq.n	8002dce <I2C_MasterRequestWrite+0x2a>
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d003      	beq.n	8002dce <I2C_MasterRequestWrite+0x2a>
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dcc:	d108      	bne.n	8002de0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	e00b      	b.n	8002df8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	2b12      	cmp	r3, #18
 8002de6:	d107      	bne.n	8002df8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002df6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 fa9b 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00d      	beq.n	8002e2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e1e:	d103      	bne.n	8002e28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e035      	b.n	8002e98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e34:	d108      	bne.n	8002e48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e36:	897b      	ldrh	r3, [r7, #10]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e44:	611a      	str	r2, [r3, #16]
 8002e46:	e01b      	b.n	8002e80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e48:	897b      	ldrh	r3, [r7, #10]
 8002e4a:	11db      	asrs	r3, r3, #7
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f003 0306 	and.w	r3, r3, #6
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f063 030f 	orn	r3, r3, #15
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	490e      	ldr	r1, [pc, #56]	; (8002ea0 <I2C_MasterRequestWrite+0xfc>)
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 fae4 	bl	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e010      	b.n	8002e98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e76:	897b      	ldrh	r3, [r7, #10]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4907      	ldr	r1, [pc, #28]	; (8002ea4 <I2C_MasterRequestWrite+0x100>)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fad4 	bl	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	00010008 	.word	0x00010008
 8002ea4:	00010002 	.word	0x00010002

08002ea8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ecc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d006      	beq.n	8002ee2 <I2C_MasterRequestRead+0x3a>
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d003      	beq.n	8002ee2 <I2C_MasterRequestRead+0x3a>
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ee0:	d108      	bne.n	8002ef4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	e00b      	b.n	8002f0c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	2b11      	cmp	r3, #17
 8002efa:	d107      	bne.n	8002f0c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 fa11 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00d      	beq.n	8002f40 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f32:	d103      	bne.n	8002f3c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e079      	b.n	8003034 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f48:	d108      	bne.n	8002f5c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f4a:	897b      	ldrh	r3, [r7, #10]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	611a      	str	r2, [r3, #16]
 8002f5a:	e05f      	b.n	800301c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f5c:	897b      	ldrh	r3, [r7, #10]
 8002f5e:	11db      	asrs	r3, r3, #7
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f003 0306 	and.w	r3, r3, #6
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f063 030f 	orn	r3, r3, #15
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	4930      	ldr	r1, [pc, #192]	; (800303c <I2C_MasterRequestRead+0x194>)
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 fa5a 	bl	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e054      	b.n	8003034 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f8a:	897b      	ldrh	r3, [r7, #10]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4929      	ldr	r1, [pc, #164]	; (8003040 <I2C_MasterRequestRead+0x198>)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fa4a 	bl	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e044      	b.n	8003034 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f9af 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00d      	beq.n	8003004 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff6:	d103      	bne.n	8003000 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e017      	b.n	8003034 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003004:	897b      	ldrh	r3, [r7, #10]
 8003006:	11db      	asrs	r3, r3, #7
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f003 0306 	and.w	r3, r3, #6
 800300e:	b2db      	uxtb	r3, r3
 8003010:	f063 030e 	orn	r3, r3, #14
 8003014:	b2da      	uxtb	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	4907      	ldr	r1, [pc, #28]	; (8003040 <I2C_MasterRequestRead+0x198>)
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fa06 	bl	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	00010008 	.word	0x00010008
 8003040:	00010002 	.word	0x00010002

08003044 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af02      	add	r7, sp, #8
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	4608      	mov	r0, r1
 800304e:	4611      	mov	r1, r2
 8003050:	461a      	mov	r2, r3
 8003052:	4603      	mov	r3, r0
 8003054:	817b      	strh	r3, [r7, #10]
 8003056:	460b      	mov	r3, r1
 8003058:	813b      	strh	r3, [r7, #8]
 800305a:	4613      	mov	r3, r2
 800305c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800306c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	2200      	movs	r2, #0
 8003076:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f960 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00d      	beq.n	80030a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003094:	d103      	bne.n	800309e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800309c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e05f      	b.n	8003162 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030a2:	897b      	ldrh	r3, [r7, #10]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	6a3a      	ldr	r2, [r7, #32]
 80030b6:	492d      	ldr	r1, [pc, #180]	; (800316c <I2C_RequestMemoryWrite+0x128>)
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f9bb 	bl	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e04c      	b.n	8003162 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e0:	6a39      	ldr	r1, [r7, #32]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fa46 	bl	8003574 <I2C_WaitOnTXEFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00d      	beq.n	800310a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d107      	bne.n	8003106 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003104:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e02b      	b.n	8003162 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003110:	893b      	ldrh	r3, [r7, #8]
 8003112:	b2da      	uxtb	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	611a      	str	r2, [r3, #16]
 800311a:	e021      	b.n	8003160 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800311c:	893b      	ldrh	r3, [r7, #8]
 800311e:	0a1b      	lsrs	r3, r3, #8
 8003120:	b29b      	uxth	r3, r3
 8003122:	b2da      	uxtb	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800312a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312c:	6a39      	ldr	r1, [r7, #32]
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 fa20 	bl	8003574 <I2C_WaitOnTXEFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00d      	beq.n	8003156 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	2b04      	cmp	r3, #4
 8003140:	d107      	bne.n	8003152 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003150:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e005      	b.n	8003162 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003156:	893b      	ldrh	r3, [r7, #8]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	00010002 	.word	0x00010002

08003170 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	4608      	mov	r0, r1
 800317a:	4611      	mov	r1, r2
 800317c:	461a      	mov	r2, r3
 800317e:	4603      	mov	r3, r0
 8003180:	817b      	strh	r3, [r7, #10]
 8003182:	460b      	mov	r3, r1
 8003184:	813b      	strh	r3, [r7, #8]
 8003186:	4613      	mov	r3, r2
 8003188:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003198:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f8c2 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00d      	beq.n	80031de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d0:	d103      	bne.n	80031da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e0aa      	b.n	8003334 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031de:	897b      	ldrh	r3, [r7, #10]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	6a3a      	ldr	r2, [r7, #32]
 80031f2:	4952      	ldr	r1, [pc, #328]	; (800333c <I2C_RequestMemoryRead+0x1cc>)
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f91d 	bl	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e097      	b.n	8003334 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800321a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321c:	6a39      	ldr	r1, [r7, #32]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f9a8 	bl	8003574 <I2C_WaitOnTXEFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00d      	beq.n	8003246 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	2b04      	cmp	r3, #4
 8003230:	d107      	bne.n	8003242 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003240:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e076      	b.n	8003334 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d105      	bne.n	8003258 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800324c:	893b      	ldrh	r3, [r7, #8]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	611a      	str	r2, [r3, #16]
 8003256:	e021      	b.n	800329c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003258:	893b      	ldrh	r3, [r7, #8]
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	b29b      	uxth	r3, r3
 800325e:	b2da      	uxtb	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003268:	6a39      	ldr	r1, [r7, #32]
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f982 	bl	8003574 <I2C_WaitOnTXEFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00d      	beq.n	8003292 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	2b04      	cmp	r3, #4
 800327c:	d107      	bne.n	800328e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e050      	b.n	8003334 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003292:	893b      	ldrh	r3, [r7, #8]
 8003294:	b2da      	uxtb	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800329c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329e:	6a39      	ldr	r1, [r7, #32]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f967 	bl	8003574 <I2C_WaitOnTXEFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00d      	beq.n	80032c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d107      	bne.n	80032c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e035      	b.n	8003334 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	2200      	movs	r2, #0
 80032e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f82b 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00d      	beq.n	800330c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032fe:	d103      	bne.n	8003308 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003306:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e013      	b.n	8003334 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800330c:	897b      	ldrh	r3, [r7, #10]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	b2da      	uxtb	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	6a3a      	ldr	r2, [r7, #32]
 8003320:	4906      	ldr	r1, [pc, #24]	; (800333c <I2C_RequestMemoryRead+0x1cc>)
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f886 	bl	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	00010002 	.word	0x00010002

08003340 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	4613      	mov	r3, r2
 800334e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003350:	e048      	b.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003358:	d044      	beq.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335a:	f7fe fae9 	bl	8001930 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d302      	bcc.n	8003370 <I2C_WaitOnFlagUntilTimeout+0x30>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d139      	bne.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	0c1b      	lsrs	r3, r3, #16
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b01      	cmp	r3, #1
 8003378:	d10d      	bne.n	8003396 <I2C_WaitOnFlagUntilTimeout+0x56>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	43da      	mvns	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	4013      	ands	r3, r2
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	e00c      	b.n	80033b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	43da      	mvns	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4013      	ands	r3, r2
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf0c      	ite	eq
 80033a8:	2301      	moveq	r3, #1
 80033aa:	2300      	movne	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d116      	bne.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	f043 0220 	orr.w	r2, r3, #32
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e023      	b.n	800342c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	0c1b      	lsrs	r3, r3, #16
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d10d      	bne.n	800340a <I2C_WaitOnFlagUntilTimeout+0xca>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	43da      	mvns	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	4013      	ands	r3, r2
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	e00c      	b.n	8003424 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	43da      	mvns	r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	4013      	ands	r3, r2
 8003416:	b29b      	uxth	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	429a      	cmp	r2, r3
 8003428:	d093      	beq.n	8003352 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003442:	e071      	b.n	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003452:	d123      	bne.n	800349c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003462:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800346c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	f043 0204 	orr.w	r2, r3, #4
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e067      	b.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d041      	beq.n	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a4:	f7fe fa44 	bl	8001930 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d302      	bcc.n	80034ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d136      	bne.n	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	0c1b      	lsrs	r3, r3, #16
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d10c      	bne.n	80034de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	43da      	mvns	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4013      	ands	r3, r2
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	bf14      	ite	ne
 80034d6:	2301      	movne	r3, #1
 80034d8:	2300      	moveq	r3, #0
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	e00b      	b.n	80034f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	43da      	mvns	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4013      	ands	r3, r2
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d016      	beq.n	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e021      	b.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	0c1b      	lsrs	r3, r3, #16
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b01      	cmp	r3, #1
 8003530:	d10c      	bne.n	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	43da      	mvns	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4013      	ands	r3, r2
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf14      	ite	ne
 8003544:	2301      	movne	r3, #1
 8003546:	2300      	moveq	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e00b      	b.n	8003564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	43da      	mvns	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4013      	ands	r3, r2
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	bf14      	ite	ne
 800355e:	2301      	movne	r3, #1
 8003560:	2300      	moveq	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	f47f af6d 	bne.w	8003444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003580:	e034      	b.n	80035ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f8e3 	bl	800374e <I2C_IsAcknowledgeFailed>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e034      	b.n	80035fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d028      	beq.n	80035ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359a:	f7fe f9c9 	bl	8001930 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d302      	bcc.n	80035b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d11d      	bne.n	80035ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ba:	2b80      	cmp	r3, #128	; 0x80
 80035bc:	d016      	beq.n	80035ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	f043 0220 	orr.w	r2, r3, #32
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e007      	b.n	80035fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f6:	2b80      	cmp	r3, #128	; 0x80
 80035f8:	d1c3      	bne.n	8003582 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003610:	e034      	b.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 f89b 	bl	800374e <I2C_IsAcknowledgeFailed>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e034      	b.n	800368c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003628:	d028      	beq.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362a:	f7fe f981 	bl	8001930 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	429a      	cmp	r2, r3
 8003638:	d302      	bcc.n	8003640 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d11d      	bne.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b04      	cmp	r3, #4
 800364c:	d016      	beq.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	f043 0220 	orr.w	r2, r3, #32
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e007      	b.n	800368c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b04      	cmp	r3, #4
 8003688:	d1c3      	bne.n	8003612 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036a0:	e049      	b.n	8003736 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b10      	cmp	r3, #16
 80036ae:	d119      	bne.n	80036e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0210 	mvn.w	r2, #16
 80036b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e030      	b.n	8003746 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e4:	f7fe f924 	bl	8001930 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d302      	bcc.n	80036fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d11d      	bne.n	8003736 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003704:	2b40      	cmp	r3, #64	; 0x40
 8003706:	d016      	beq.n	8003736 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f043 0220 	orr.w	r2, r3, #32
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e007      	b.n	8003746 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d1ae      	bne.n	80036a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003764:	d11b      	bne.n	800379e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800376e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f043 0204 	orr.w	r2, r3, #4
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e267      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d075      	beq.n	80038b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ca:	4b88      	ldr	r3, [pc, #544]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d00c      	beq.n	80037f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037d6:	4b85      	ldr	r3, [pc, #532]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d112      	bne.n	8003808 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e2:	4b82      	ldr	r3, [pc, #520]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ee:	d10b      	bne.n	8003808 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f0:	4b7e      	ldr	r3, [pc, #504]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d05b      	beq.n	80038b4 <HAL_RCC_OscConfig+0x108>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d157      	bne.n	80038b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e242      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003810:	d106      	bne.n	8003820 <HAL_RCC_OscConfig+0x74>
 8003812:	4b76      	ldr	r3, [pc, #472]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a75      	ldr	r2, [pc, #468]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e01d      	b.n	800385c <HAL_RCC_OscConfig+0xb0>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003828:	d10c      	bne.n	8003844 <HAL_RCC_OscConfig+0x98>
 800382a:	4b70      	ldr	r3, [pc, #448]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a6f      	ldr	r2, [pc, #444]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	4b6d      	ldr	r3, [pc, #436]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a6c      	ldr	r2, [pc, #432]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 800383c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	e00b      	b.n	800385c <HAL_RCC_OscConfig+0xb0>
 8003844:	4b69      	ldr	r3, [pc, #420]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a68      	ldr	r2, [pc, #416]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 800384a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	4b66      	ldr	r3, [pc, #408]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a65      	ldr	r2, [pc, #404]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800385a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d013      	beq.n	800388c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003864:	f7fe f864 	bl	8001930 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800386c:	f7fe f860 	bl	8001930 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b64      	cmp	r3, #100	; 0x64
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e207      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387e:	4b5b      	ldr	r3, [pc, #364]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0xc0>
 800388a:	e014      	b.n	80038b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388c:	f7fe f850 	bl	8001930 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003894:	f7fe f84c 	bl	8001930 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b64      	cmp	r3, #100	; 0x64
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e1f3      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a6:	4b51      	ldr	r3, [pc, #324]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0xe8>
 80038b2:	e000      	b.n	80038b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d063      	beq.n	800398a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038c2:	4b4a      	ldr	r3, [pc, #296]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ce:	4b47      	ldr	r3, [pc, #284]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d11c      	bne.n	8003914 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038da:	4b44      	ldr	r3, [pc, #272]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d116      	bne.n	8003914 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e6:	4b41      	ldr	r3, [pc, #260]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <HAL_RCC_OscConfig+0x152>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d001      	beq.n	80038fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e1c7      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fe:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4937      	ldr	r1, [pc, #220]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003912:	e03a      	b.n	800398a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d020      	beq.n	800395e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800391c:	4b34      	ldr	r3, [pc, #208]	; (80039f0 <HAL_RCC_OscConfig+0x244>)
 800391e:	2201      	movs	r2, #1
 8003920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003922:	f7fe f805 	bl	8001930 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800392a:	f7fe f801 	bl	8001930 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e1a8      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393c:	4b2b      	ldr	r3, [pc, #172]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003948:	4b28      	ldr	r3, [pc, #160]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	4925      	ldr	r1, [pc, #148]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003958:	4313      	orrs	r3, r2
 800395a:	600b      	str	r3, [r1, #0]
 800395c:	e015      	b.n	800398a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800395e:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <HAL_RCC_OscConfig+0x244>)
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fd ffe4 	bl	8001930 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800396c:	f7fd ffe0 	bl	8001930 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e187      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397e:	4b1b      	ldr	r3, [pc, #108]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d036      	beq.n	8003a04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d016      	beq.n	80039cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399e:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <HAL_RCC_OscConfig+0x248>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a4:	f7fd ffc4 	bl	8001930 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ac:	f7fd ffc0 	bl	8001930 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e167      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039be:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_RCC_OscConfig+0x240>)
 80039c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0x200>
 80039ca:	e01b      	b.n	8003a04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039cc:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <HAL_RCC_OscConfig+0x248>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d2:	f7fd ffad 	bl	8001930 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d8:	e00e      	b.n	80039f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039da:	f7fd ffa9 	bl	8001930 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d907      	bls.n	80039f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e150      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
 80039ec:	40023800 	.word	0x40023800
 80039f0:	42470000 	.word	0x42470000
 80039f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f8:	4b88      	ldr	r3, [pc, #544]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 80039fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1ea      	bne.n	80039da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 8097 	beq.w	8003b40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a12:	2300      	movs	r3, #0
 8003a14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a16:	4b81      	ldr	r3, [pc, #516]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10f      	bne.n	8003a42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	4b7d      	ldr	r3, [pc, #500]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	4a7c      	ldr	r2, [pc, #496]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a30:	6413      	str	r3, [r2, #64]	; 0x40
 8003a32:	4b7a      	ldr	r3, [pc, #488]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a42:	4b77      	ldr	r3, [pc, #476]	; (8003c20 <HAL_RCC_OscConfig+0x474>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d118      	bne.n	8003a80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a4e:	4b74      	ldr	r3, [pc, #464]	; (8003c20 <HAL_RCC_OscConfig+0x474>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a73      	ldr	r2, [pc, #460]	; (8003c20 <HAL_RCC_OscConfig+0x474>)
 8003a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a5a:	f7fd ff69 	bl	8001930 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a62:	f7fd ff65 	bl	8001930 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e10c      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a74:	4b6a      	ldr	r3, [pc, #424]	; (8003c20 <HAL_RCC_OscConfig+0x474>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d106      	bne.n	8003a96 <HAL_RCC_OscConfig+0x2ea>
 8003a88:	4b64      	ldr	r3, [pc, #400]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	4a63      	ldr	r2, [pc, #396]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	6713      	str	r3, [r2, #112]	; 0x70
 8003a94:	e01c      	b.n	8003ad0 <HAL_RCC_OscConfig+0x324>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b05      	cmp	r3, #5
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x30c>
 8003a9e:	4b5f      	ldr	r3, [pc, #380]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa2:	4a5e      	ldr	r2, [pc, #376]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003aa4:	f043 0304 	orr.w	r3, r3, #4
 8003aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aaa:	4b5c      	ldr	r3, [pc, #368]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	4a5b      	ldr	r2, [pc, #364]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab6:	e00b      	b.n	8003ad0 <HAL_RCC_OscConfig+0x324>
 8003ab8:	4b58      	ldr	r3, [pc, #352]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abc:	4a57      	ldr	r2, [pc, #348]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac4:	4b55      	ldr	r3, [pc, #340]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac8:	4a54      	ldr	r2, [pc, #336]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003aca:	f023 0304 	bic.w	r3, r3, #4
 8003ace:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d015      	beq.n	8003b04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad8:	f7fd ff2a 	bl	8001930 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae0:	f7fd ff26 	bl	8001930 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e0cb      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af6:	4b49      	ldr	r3, [pc, #292]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0ee      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x334>
 8003b02:	e014      	b.n	8003b2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b04:	f7fd ff14 	bl	8001930 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b0c:	f7fd ff10 	bl	8001930 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e0b5      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b22:	4b3e      	ldr	r3, [pc, #248]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1ee      	bne.n	8003b0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d105      	bne.n	8003b40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b34:	4b39      	ldr	r3, [pc, #228]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	4a38      	ldr	r2, [pc, #224]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003b3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80a1 	beq.w	8003c8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b4a:	4b34      	ldr	r3, [pc, #208]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d05c      	beq.n	8003c10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d141      	bne.n	8003be2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5e:	4b31      	ldr	r3, [pc, #196]	; (8003c24 <HAL_RCC_OscConfig+0x478>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fd fee4 	bl	8001930 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7fd fee0 	bl	8001930 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e087      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7e:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69da      	ldr	r2, [r3, #28]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	019b      	lsls	r3, r3, #6
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	041b      	lsls	r3, r3, #16
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	061b      	lsls	r3, r3, #24
 8003bae:	491b      	ldr	r1, [pc, #108]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb4:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <HAL_RCC_OscConfig+0x478>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bba:	f7fd feb9 	bl	8001930 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc2:	f7fd feb5 	bl	8001930 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e05c      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd4:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x416>
 8003be0:	e054      	b.n	8003c8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be2:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <HAL_RCC_OscConfig+0x478>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be8:	f7fd fea2 	bl	8001930 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf0:	f7fd fe9e 	bl	8001930 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e045      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <HAL_RCC_OscConfig+0x470>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x444>
 8003c0e:	e03d      	b.n	8003c8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d107      	bne.n	8003c28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e038      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	40007000 	.word	0x40007000
 8003c24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c28:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <HAL_RCC_OscConfig+0x4ec>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d028      	beq.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d121      	bne.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d11a      	bne.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c58:	4013      	ands	r3, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d111      	bne.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	3b01      	subs	r3, #1
 8003c72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d107      	bne.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800

08003c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0cc      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb0:	4b68      	ldr	r3, [pc, #416]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d90c      	bls.n	8003cd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cbe:	4b65      	ldr	r3, [pc, #404]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc6:	4b63      	ldr	r3, [pc, #396]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0b8      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d020      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf0:	4b59      	ldr	r3, [pc, #356]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4a58      	ldr	r2, [pc, #352]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d08:	4b53      	ldr	r3, [pc, #332]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4a52      	ldr	r2, [pc, #328]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d14:	4b50      	ldr	r3, [pc, #320]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	494d      	ldr	r1, [pc, #308]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d044      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d107      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3a:	4b47      	ldr	r3, [pc, #284]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d119      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e07f      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d003      	beq.n	8003d5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d107      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5a:	4b3f      	ldr	r3, [pc, #252]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e06f      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6a:	4b3b      	ldr	r3, [pc, #236]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e067      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d7a:	4b37      	ldr	r3, [pc, #220]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f023 0203 	bic.w	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4934      	ldr	r1, [pc, #208]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d8c:	f7fd fdd0 	bl	8001930 <HAL_GetTick>
 8003d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d94:	f7fd fdcc 	bl	8001930 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e04f      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003daa:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 020c 	and.w	r2, r3, #12
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d1eb      	bne.n	8003d94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dbc:	4b25      	ldr	r3, [pc, #148]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d20c      	bcs.n	8003de4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dca:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd2:	4b20      	ldr	r3, [pc, #128]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e032      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df0:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4916      	ldr	r1, [pc, #88]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0e:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	490e      	ldr	r1, [pc, #56]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e22:	f000 f821 	bl	8003e68 <HAL_RCC_GetSysClockFreq>
 8003e26:	4602      	mov	r2, r0
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	490a      	ldr	r1, [pc, #40]	; (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003e34:	5ccb      	ldrb	r3, [r1, r3]
 8003e36:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3a:	4a09      	ldr	r2, [pc, #36]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e3e:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fd fd30 	bl	80018a8 <HAL_InitTick>

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40023c00 	.word	0x40023c00
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	08004834 	.word	0x08004834
 8003e60:	20000000 	.word	0x20000000
 8003e64:	20000004 	.word	0x20000004

08003e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e6c:	b090      	sub	sp, #64	; 0x40
 8003e6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	637b      	str	r3, [r7, #52]	; 0x34
 8003e74:	2300      	movs	r3, #0
 8003e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e78:	2300      	movs	r3, #0
 8003e7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e80:	4b59      	ldr	r3, [pc, #356]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 030c 	and.w	r3, r3, #12
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d00d      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x40>
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	f200 80a1 	bhi.w	8003fd4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_RCC_GetSysClockFreq+0x34>
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d003      	beq.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e9a:	e09b      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e9c:	4b53      	ldr	r3, [pc, #332]	; (8003fec <HAL_RCC_GetSysClockFreq+0x184>)
 8003e9e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003ea0:	e09b      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ea2:	4b53      	ldr	r3, [pc, #332]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ea4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ea6:	e098      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ea8:	4b4f      	ldr	r3, [pc, #316]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eb0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eb2:	4b4d      	ldr	r3, [pc, #308]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d028      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ebe:	4b4a      	ldr	r3, [pc, #296]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	099b      	lsrs	r3, r3, #6
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	623b      	str	r3, [r7, #32]
 8003ec8:	627a      	str	r2, [r7, #36]	; 0x24
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4b47      	ldr	r3, [pc, #284]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ed4:	fb03 f201 	mul.w	r2, r3, r1
 8003ed8:	2300      	movs	r3, #0
 8003eda:	fb00 f303 	mul.w	r3, r0, r3
 8003ede:	4413      	add	r3, r2
 8003ee0:	4a43      	ldr	r2, [pc, #268]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ee2:	fba0 1202 	umull	r1, r2, r0, r2
 8003ee6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ee8:	460a      	mov	r2, r1
 8003eea:	62ba      	str	r2, [r7, #40]	; 0x28
 8003eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eee:	4413      	add	r3, r2
 8003ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	61bb      	str	r3, [r7, #24]
 8003ef8:	61fa      	str	r2, [r7, #28]
 8003efa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003efe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003f02:	f7fc fd87 	bl	8000a14 <__aeabi_uldivmod>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f0e:	e053      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f10:	4b35      	ldr	r3, [pc, #212]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	099b      	lsrs	r3, r3, #6
 8003f16:	2200      	movs	r2, #0
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	617a      	str	r2, [r7, #20]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f22:	f04f 0b00 	mov.w	fp, #0
 8003f26:	4652      	mov	r2, sl
 8003f28:	465b      	mov	r3, fp
 8003f2a:	f04f 0000 	mov.w	r0, #0
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	0159      	lsls	r1, r3, #5
 8003f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f38:	0150      	lsls	r0, r2, #5
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	ebb2 080a 	subs.w	r8, r2, sl
 8003f42:	eb63 090b 	sbc.w	r9, r3, fp
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f5a:	ebb2 0408 	subs.w	r4, r2, r8
 8003f5e:	eb63 0509 	sbc.w	r5, r3, r9
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	00eb      	lsls	r3, r5, #3
 8003f6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f70:	00e2      	lsls	r2, r4, #3
 8003f72:	4614      	mov	r4, r2
 8003f74:	461d      	mov	r5, r3
 8003f76:	eb14 030a 	adds.w	r3, r4, sl
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	eb45 030b 	adc.w	r3, r5, fp
 8003f80:	607b      	str	r3, [r7, #4]
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f8e:	4629      	mov	r1, r5
 8003f90:	028b      	lsls	r3, r1, #10
 8003f92:	4621      	mov	r1, r4
 8003f94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f98:	4621      	mov	r1, r4
 8003f9a:	028a      	lsls	r2, r1, #10
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	60fa      	str	r2, [r7, #12]
 8003fa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fac:	f7fc fd32 	bl	8000a14 <__aeabi_uldivmod>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003fc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fd2:	e002      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <HAL_RCC_GetSysClockFreq+0x184>)
 8003fd6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3740      	adds	r7, #64	; 0x40
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	00f42400 	.word	0x00f42400
 8003ff0:	017d7840 	.word	0x017d7840

08003ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ff8:	4b03      	ldr	r3, [pc, #12]	; (8004008 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	20000000 	.word	0x20000000

0800400c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004010:	f7ff fff0 	bl	8003ff4 <HAL_RCC_GetHCLKFreq>
 8004014:	4602      	mov	r2, r0
 8004016:	4b05      	ldr	r3, [pc, #20]	; (800402c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	0a9b      	lsrs	r3, r3, #10
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	4903      	ldr	r1, [pc, #12]	; (8004030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004022:	5ccb      	ldrb	r3, [r1, r3]
 8004024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004028:	4618      	mov	r0, r3
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40023800 	.word	0x40023800
 8004030:	08004844 	.word	0x08004844

08004034 <memset>:
 8004034:	4402      	add	r2, r0
 8004036:	4603      	mov	r3, r0
 8004038:	4293      	cmp	r3, r2
 800403a:	d100      	bne.n	800403e <memset+0xa>
 800403c:	4770      	bx	lr
 800403e:	f803 1b01 	strb.w	r1, [r3], #1
 8004042:	e7f9      	b.n	8004038 <memset+0x4>

08004044 <__errno>:
 8004044:	4b01      	ldr	r3, [pc, #4]	; (800404c <__errno+0x8>)
 8004046:	6818      	ldr	r0, [r3, #0]
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000058 	.word	0x20000058

08004050 <__libc_init_array>:
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	4d0d      	ldr	r5, [pc, #52]	; (8004088 <__libc_init_array+0x38>)
 8004054:	4c0d      	ldr	r4, [pc, #52]	; (800408c <__libc_init_array+0x3c>)
 8004056:	1b64      	subs	r4, r4, r5
 8004058:	10a4      	asrs	r4, r4, #2
 800405a:	2600      	movs	r6, #0
 800405c:	42a6      	cmp	r6, r4
 800405e:	d109      	bne.n	8004074 <__libc_init_array+0x24>
 8004060:	4d0b      	ldr	r5, [pc, #44]	; (8004090 <__libc_init_array+0x40>)
 8004062:	4c0c      	ldr	r4, [pc, #48]	; (8004094 <__libc_init_array+0x44>)
 8004064:	f000 fbda 	bl	800481c <_init>
 8004068:	1b64      	subs	r4, r4, r5
 800406a:	10a4      	asrs	r4, r4, #2
 800406c:	2600      	movs	r6, #0
 800406e:	42a6      	cmp	r6, r4
 8004070:	d105      	bne.n	800407e <__libc_init_array+0x2e>
 8004072:	bd70      	pop	{r4, r5, r6, pc}
 8004074:	f855 3b04 	ldr.w	r3, [r5], #4
 8004078:	4798      	blx	r3
 800407a:	3601      	adds	r6, #1
 800407c:	e7ee      	b.n	800405c <__libc_init_array+0xc>
 800407e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004082:	4798      	blx	r3
 8004084:	3601      	adds	r6, #1
 8004086:	e7f2      	b.n	800406e <__libc_init_array+0x1e>
 8004088:	0800486c 	.word	0x0800486c
 800408c:	0800486c 	.word	0x0800486c
 8004090:	0800486c 	.word	0x0800486c
 8004094:	08004870 	.word	0x08004870

08004098 <powf>:
 8004098:	b508      	push	{r3, lr}
 800409a:	ed2d 8b04 	vpush	{d8-d9}
 800409e:	eeb0 8a60 	vmov.f32	s16, s1
 80040a2:	eeb0 9a40 	vmov.f32	s18, s0
 80040a6:	f000 f85b 	bl	8004160 <__ieee754_powf>
 80040aa:	eeb4 8a48 	vcmp.f32	s16, s16
 80040ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b2:	eef0 8a40 	vmov.f32	s17, s0
 80040b6:	d63e      	bvs.n	8004136 <powf+0x9e>
 80040b8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80040bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c0:	d112      	bne.n	80040e8 <powf+0x50>
 80040c2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80040c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ca:	d039      	beq.n	8004140 <powf+0xa8>
 80040cc:	eeb0 0a48 	vmov.f32	s0, s16
 80040d0:	f000 f839 	bl	8004146 <finitef>
 80040d4:	b378      	cbz	r0, 8004136 <powf+0x9e>
 80040d6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80040da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040de:	d52a      	bpl.n	8004136 <powf+0x9e>
 80040e0:	f7ff ffb0 	bl	8004044 <__errno>
 80040e4:	2322      	movs	r3, #34	; 0x22
 80040e6:	e014      	b.n	8004112 <powf+0x7a>
 80040e8:	f000 f82d 	bl	8004146 <finitef>
 80040ec:	b998      	cbnz	r0, 8004116 <powf+0x7e>
 80040ee:	eeb0 0a49 	vmov.f32	s0, s18
 80040f2:	f000 f828 	bl	8004146 <finitef>
 80040f6:	b170      	cbz	r0, 8004116 <powf+0x7e>
 80040f8:	eeb0 0a48 	vmov.f32	s0, s16
 80040fc:	f000 f823 	bl	8004146 <finitef>
 8004100:	b148      	cbz	r0, 8004116 <powf+0x7e>
 8004102:	eef4 8a68 	vcmp.f32	s17, s17
 8004106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800410a:	d7e9      	bvc.n	80040e0 <powf+0x48>
 800410c:	f7ff ff9a 	bl	8004044 <__errno>
 8004110:	2321      	movs	r3, #33	; 0x21
 8004112:	6003      	str	r3, [r0, #0]
 8004114:	e00f      	b.n	8004136 <powf+0x9e>
 8004116:	eef5 8a40 	vcmp.f32	s17, #0.0
 800411a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411e:	d10a      	bne.n	8004136 <powf+0x9e>
 8004120:	eeb0 0a49 	vmov.f32	s0, s18
 8004124:	f000 f80f 	bl	8004146 <finitef>
 8004128:	b128      	cbz	r0, 8004136 <powf+0x9e>
 800412a:	eeb0 0a48 	vmov.f32	s0, s16
 800412e:	f000 f80a 	bl	8004146 <finitef>
 8004132:	2800      	cmp	r0, #0
 8004134:	d1d4      	bne.n	80040e0 <powf+0x48>
 8004136:	eeb0 0a68 	vmov.f32	s0, s17
 800413a:	ecbd 8b04 	vpop	{d8-d9}
 800413e:	bd08      	pop	{r3, pc}
 8004140:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8004144:	e7f7      	b.n	8004136 <powf+0x9e>

08004146 <finitef>:
 8004146:	b082      	sub	sp, #8
 8004148:	ed8d 0a01 	vstr	s0, [sp, #4]
 800414c:	9801      	ldr	r0, [sp, #4]
 800414e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004152:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8004156:	bfac      	ite	ge
 8004158:	2000      	movge	r0, #0
 800415a:	2001      	movlt	r0, #1
 800415c:	b002      	add	sp, #8
 800415e:	4770      	bx	lr

08004160 <__ieee754_powf>:
 8004160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004164:	ee10 4a90 	vmov	r4, s1
 8004168:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800416c:	ed2d 8b02 	vpush	{d8}
 8004170:	ee10 7a10 	vmov	r7, s0
 8004174:	eeb0 8a40 	vmov.f32	s16, s0
 8004178:	eef0 8a60 	vmov.f32	s17, s1
 800417c:	d10c      	bne.n	8004198 <__ieee754_powf+0x38>
 800417e:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8004182:	007f      	lsls	r7, r7, #1
 8004184:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8004188:	f240 8292 	bls.w	80046b0 <__ieee754_powf+0x550>
 800418c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8004190:	ecbd 8b02 	vpop	{d8}
 8004194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004198:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800419c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80041a0:	dcf4      	bgt.n	800418c <__ieee754_powf+0x2c>
 80041a2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80041a6:	dd08      	ble.n	80041ba <__ieee754_powf+0x5a>
 80041a8:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80041ac:	d1ee      	bne.n	800418c <__ieee754_powf+0x2c>
 80041ae:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80041b2:	0064      	lsls	r4, r4, #1
 80041b4:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80041b8:	e7e6      	b.n	8004188 <__ieee754_powf+0x28>
 80041ba:	2f00      	cmp	r7, #0
 80041bc:	da20      	bge.n	8004200 <__ieee754_powf+0xa0>
 80041be:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 80041c2:	da2d      	bge.n	8004220 <__ieee754_powf+0xc0>
 80041c4:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80041c8:	f2c0 827b 	blt.w	80046c2 <__ieee754_powf+0x562>
 80041cc:	ea4f 53e8 	mov.w	r3, r8, asr #23
 80041d0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80041d4:	fa48 f603 	asr.w	r6, r8, r3
 80041d8:	fa06 f303 	lsl.w	r3, r6, r3
 80041dc:	4543      	cmp	r3, r8
 80041de:	f040 8270 	bne.w	80046c2 <__ieee754_powf+0x562>
 80041e2:	f006 0601 	and.w	r6, r6, #1
 80041e6:	f1c6 0602 	rsb	r6, r6, #2
 80041ea:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80041ee:	d11f      	bne.n	8004230 <__ieee754_powf+0xd0>
 80041f0:	2c00      	cmp	r4, #0
 80041f2:	f280 8263 	bge.w	80046bc <__ieee754_powf+0x55c>
 80041f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80041fa:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80041fe:	e7c7      	b.n	8004190 <__ieee754_powf+0x30>
 8004200:	2600      	movs	r6, #0
 8004202:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8004206:	d1f0      	bne.n	80041ea <__ieee754_powf+0x8a>
 8004208:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800420c:	f000 8250 	beq.w	80046b0 <__ieee754_powf+0x550>
 8004210:	dd08      	ble.n	8004224 <__ieee754_powf+0xc4>
 8004212:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8004518 <__ieee754_powf+0x3b8>
 8004216:	2c00      	cmp	r4, #0
 8004218:	bfa8      	it	ge
 800421a:	eeb0 0a68 	vmovge.f32	s0, s17
 800421e:	e7b7      	b.n	8004190 <__ieee754_powf+0x30>
 8004220:	2602      	movs	r6, #2
 8004222:	e7ee      	b.n	8004202 <__ieee754_powf+0xa2>
 8004224:	2c00      	cmp	r4, #0
 8004226:	f280 8246 	bge.w	80046b6 <__ieee754_powf+0x556>
 800422a:	eeb1 0a68 	vneg.f32	s0, s17
 800422e:	e7af      	b.n	8004190 <__ieee754_powf+0x30>
 8004230:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8004234:	d102      	bne.n	800423c <__ieee754_powf+0xdc>
 8004236:	ee28 0a08 	vmul.f32	s0, s16, s16
 800423a:	e7a9      	b.n	8004190 <__ieee754_powf+0x30>
 800423c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8004240:	eeb0 0a48 	vmov.f32	s0, s16
 8004244:	d107      	bne.n	8004256 <__ieee754_powf+0xf6>
 8004246:	2f00      	cmp	r7, #0
 8004248:	db05      	blt.n	8004256 <__ieee754_powf+0xf6>
 800424a:	ecbd 8b02 	vpop	{d8}
 800424e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004252:	f000 badf 	b.w	8004814 <__ieee754_sqrtf>
 8004256:	f000 fa4d 	bl	80046f4 <fabsf>
 800425a:	b125      	cbz	r5, 8004266 <__ieee754_powf+0x106>
 800425c:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8004260:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8004264:	d115      	bne.n	8004292 <__ieee754_powf+0x132>
 8004266:	2c00      	cmp	r4, #0
 8004268:	bfbc      	itt	lt
 800426a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800426e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8004272:	2f00      	cmp	r7, #0
 8004274:	da8c      	bge.n	8004190 <__ieee754_powf+0x30>
 8004276:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800427a:	4335      	orrs	r5, r6
 800427c:	d104      	bne.n	8004288 <__ieee754_powf+0x128>
 800427e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004282:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8004286:	e783      	b.n	8004190 <__ieee754_powf+0x30>
 8004288:	2e01      	cmp	r6, #1
 800428a:	d181      	bne.n	8004190 <__ieee754_powf+0x30>
 800428c:	eeb1 0a40 	vneg.f32	s0, s0
 8004290:	e77e      	b.n	8004190 <__ieee754_powf+0x30>
 8004292:	0ff8      	lsrs	r0, r7, #31
 8004294:	3801      	subs	r0, #1
 8004296:	ea56 0300 	orrs.w	r3, r6, r0
 800429a:	d104      	bne.n	80042a6 <__ieee754_powf+0x146>
 800429c:	ee38 8a48 	vsub.f32	s16, s16, s16
 80042a0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80042a4:	e774      	b.n	8004190 <__ieee754_powf+0x30>
 80042a6:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 80042aa:	dd73      	ble.n	8004394 <__ieee754_powf+0x234>
 80042ac:	4b9b      	ldr	r3, [pc, #620]	; (800451c <__ieee754_powf+0x3bc>)
 80042ae:	429d      	cmp	r5, r3
 80042b0:	dc08      	bgt.n	80042c4 <__ieee754_powf+0x164>
 80042b2:	2c00      	cmp	r4, #0
 80042b4:	da0b      	bge.n	80042ce <__ieee754_powf+0x16e>
 80042b6:	2000      	movs	r0, #0
 80042b8:	ecbd 8b02 	vpop	{d8}
 80042bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042c0:	f000 baa2 	b.w	8004808 <__math_oflowf>
 80042c4:	4b96      	ldr	r3, [pc, #600]	; (8004520 <__ieee754_powf+0x3c0>)
 80042c6:	429d      	cmp	r5, r3
 80042c8:	dd08      	ble.n	80042dc <__ieee754_powf+0x17c>
 80042ca:	2c00      	cmp	r4, #0
 80042cc:	dcf3      	bgt.n	80042b6 <__ieee754_powf+0x156>
 80042ce:	2000      	movs	r0, #0
 80042d0:	ecbd 8b02 	vpop	{d8}
 80042d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042d8:	f000 ba90 	b.w	80047fc <__math_uflowf>
 80042dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80042e0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80042e4:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8004524 <__ieee754_powf+0x3c4>
 80042e8:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80042ec:	eee0 6a67 	vfms.f32	s13, s0, s15
 80042f0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80042f4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80042f8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80042fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004300:	eddf 7a89 	vldr	s15, [pc, #548]	; 8004528 <__ieee754_powf+0x3c8>
 8004304:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8004308:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800452c <__ieee754_powf+0x3cc>
 800430c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004310:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8004530 <__ieee754_powf+0x3d0>
 8004314:	eef0 6a67 	vmov.f32	s13, s15
 8004318:	eee0 6a07 	vfma.f32	s13, s0, s14
 800431c:	ee16 3a90 	vmov	r3, s13
 8004320:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004324:	f023 030f 	bic.w	r3, r3, #15
 8004328:	ee06 3a90 	vmov	s13, r3
 800432c:	eee0 6a47 	vfms.f32	s13, s0, s14
 8004330:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004334:	3e01      	subs	r6, #1
 8004336:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800433a:	4306      	orrs	r6, r0
 800433c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004340:	f024 040f 	bic.w	r4, r4, #15
 8004344:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8004348:	bf08      	it	eq
 800434a:	eeb0 8a47 	vmoveq.f32	s16, s14
 800434e:	ee07 4a10 	vmov	s14, r4
 8004352:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8004356:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8004362:	ee07 4a10 	vmov	s14, r4
 8004366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800436a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800436e:	ee17 1a10 	vmov	r1, s14
 8004372:	2900      	cmp	r1, #0
 8004374:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004378:	f340 817c 	ble.w	8004674 <__ieee754_powf+0x514>
 800437c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8004380:	f340 80f8 	ble.w	8004574 <__ieee754_powf+0x414>
 8004384:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438c:	bf4c      	ite	mi
 800438e:	2001      	movmi	r0, #1
 8004390:	2000      	movpl	r0, #0
 8004392:	e791      	b.n	80042b8 <__ieee754_powf+0x158>
 8004394:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8004398:	bf01      	itttt	eq
 800439a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8004534 <__ieee754_powf+0x3d4>
 800439e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80043a2:	f06f 0317 	mvneq.w	r3, #23
 80043a6:	ee17 5a90 	vmoveq	r5, s15
 80043aa:	ea4f 52e5 	mov.w	r2, r5, asr #23
 80043ae:	bf18      	it	ne
 80043b0:	2300      	movne	r3, #0
 80043b2:	3a7f      	subs	r2, #127	; 0x7f
 80043b4:	441a      	add	r2, r3
 80043b6:	4b60      	ldr	r3, [pc, #384]	; (8004538 <__ieee754_powf+0x3d8>)
 80043b8:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80043bc:	429d      	cmp	r5, r3
 80043be:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 80043c2:	dd06      	ble.n	80043d2 <__ieee754_powf+0x272>
 80043c4:	4b5d      	ldr	r3, [pc, #372]	; (800453c <__ieee754_powf+0x3dc>)
 80043c6:	429d      	cmp	r5, r3
 80043c8:	f340 80a4 	ble.w	8004514 <__ieee754_powf+0x3b4>
 80043cc:	3201      	adds	r2, #1
 80043ce:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80043d2:	2500      	movs	r5, #0
 80043d4:	4b5a      	ldr	r3, [pc, #360]	; (8004540 <__ieee754_powf+0x3e0>)
 80043d6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80043da:	ee07 1a10 	vmov	s14, r1
 80043de:	edd3 5a00 	vldr	s11, [r3]
 80043e2:	4b58      	ldr	r3, [pc, #352]	; (8004544 <__ieee754_powf+0x3e4>)
 80043e4:	ee75 7a87 	vadd.f32	s15, s11, s14
 80043e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ec:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80043f0:	1049      	asrs	r1, r1, #1
 80043f2:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80043f6:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80043fa:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80043fe:	ee37 6a65 	vsub.f32	s12, s14, s11
 8004402:	ee07 1a90 	vmov	s15, r1
 8004406:	ee26 5a24 	vmul.f32	s10, s12, s9
 800440a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800440e:	ee15 7a10 	vmov	r7, s10
 8004412:	401f      	ands	r7, r3
 8004414:	ee06 7a90 	vmov	s13, r7
 8004418:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800441c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8004420:	ee65 7a05 	vmul.f32	s15, s10, s10
 8004424:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8004428:	eddf 5a47 	vldr	s11, [pc, #284]	; 8004548 <__ieee754_powf+0x3e8>
 800442c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800454c <__ieee754_powf+0x3ec>
 8004430:	eee7 5a87 	vfma.f32	s11, s15, s14
 8004434:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004550 <__ieee754_powf+0x3f0>
 8004438:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800443c:	eddf 5a39 	vldr	s11, [pc, #228]	; 8004524 <__ieee754_powf+0x3c4>
 8004440:	eee7 5a27 	vfma.f32	s11, s14, s15
 8004444:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8004554 <__ieee754_powf+0x3f4>
 8004448:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800444c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8004558 <__ieee754_powf+0x3f8>
 8004450:	ee26 6a24 	vmul.f32	s12, s12, s9
 8004454:	eee7 5a27 	vfma.f32	s11, s14, s15
 8004458:	ee35 7a26 	vadd.f32	s14, s10, s13
 800445c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8004460:	ee27 7a06 	vmul.f32	s14, s14, s12
 8004464:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8004468:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800446c:	eef0 5a67 	vmov.f32	s11, s15
 8004470:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8004474:	ee75 5a87 	vadd.f32	s11, s11, s14
 8004478:	ee15 1a90 	vmov	r1, s11
 800447c:	4019      	ands	r1, r3
 800447e:	ee05 1a90 	vmov	s11, r1
 8004482:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8004486:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800448a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800448e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8004492:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004496:	eeb0 6a67 	vmov.f32	s12, s15
 800449a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800449e:	ee16 1a10 	vmov	r1, s12
 80044a2:	4019      	ands	r1, r3
 80044a4:	ee07 1a10 	vmov	s14, r1
 80044a8:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80044ac:	ee06 1a10 	vmov	s12, r1
 80044b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044b4:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800455c <__ieee754_powf+0x3fc>
 80044b8:	4929      	ldr	r1, [pc, #164]	; (8004560 <__ieee754_powf+0x400>)
 80044ba:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8004564 <__ieee754_powf+0x404>
 80044be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044c2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004568 <__ieee754_powf+0x408>
 80044c6:	eee6 7a07 	vfma.f32	s15, s12, s14
 80044ca:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80044ce:	ed91 7a00 	vldr	s14, [r1]
 80044d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044d6:	ee07 2a10 	vmov	s14, r2
 80044da:	eef0 6a67 	vmov.f32	s13, s15
 80044de:	4a23      	ldr	r2, [pc, #140]	; (800456c <__ieee754_powf+0x40c>)
 80044e0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80044e4:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80044e8:	ed92 5a00 	vldr	s10, [r2]
 80044ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80044f0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80044f4:	ee76 6a87 	vadd.f32	s13, s13, s14
 80044f8:	ee16 2a90 	vmov	r2, s13
 80044fc:	4013      	ands	r3, r2
 80044fe:	ee06 3a90 	vmov	s13, r3
 8004502:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004506:	ee37 7a45 	vsub.f32	s14, s14, s10
 800450a:	eea6 7a65 	vfms.f32	s14, s12, s11
 800450e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004512:	e70f      	b.n	8004334 <__ieee754_powf+0x1d4>
 8004514:	2501      	movs	r5, #1
 8004516:	e75d      	b.n	80043d4 <__ieee754_powf+0x274>
 8004518:	00000000 	.word	0x00000000
 800451c:	3f7ffff3 	.word	0x3f7ffff3
 8004520:	3f800007 	.word	0x3f800007
 8004524:	3eaaaaab 	.word	0x3eaaaaab
 8004528:	3fb8aa3b 	.word	0x3fb8aa3b
 800452c:	36eca570 	.word	0x36eca570
 8004530:	3fb8aa00 	.word	0x3fb8aa00
 8004534:	4b800000 	.word	0x4b800000
 8004538:	001cc471 	.word	0x001cc471
 800453c:	005db3d6 	.word	0x005db3d6
 8004540:	0800484c 	.word	0x0800484c
 8004544:	fffff000 	.word	0xfffff000
 8004548:	3e6c3255 	.word	0x3e6c3255
 800454c:	3e53f142 	.word	0x3e53f142
 8004550:	3e8ba305 	.word	0x3e8ba305
 8004554:	3edb6db7 	.word	0x3edb6db7
 8004558:	3f19999a 	.word	0x3f19999a
 800455c:	3f76384f 	.word	0x3f76384f
 8004560:	0800485c 	.word	0x0800485c
 8004564:	3f763800 	.word	0x3f763800
 8004568:	369dc3a0 	.word	0x369dc3a0
 800456c:	08004854 	.word	0x08004854
 8004570:	3338aa3c 	.word	0x3338aa3c
 8004574:	f040 8093 	bne.w	800469e <__ieee754_powf+0x53e>
 8004578:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8004570 <__ieee754_powf+0x410>
 800457c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004580:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8004584:	eef4 6ac7 	vcmpe.f32	s13, s14
 8004588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458c:	f73f aefa 	bgt.w	8004384 <__ieee754_powf+0x224>
 8004590:	15db      	asrs	r3, r3, #23
 8004592:	3b7e      	subs	r3, #126	; 0x7e
 8004594:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004598:	4118      	asrs	r0, r3
 800459a:	4408      	add	r0, r1
 800459c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80045a0:	4a49      	ldr	r2, [pc, #292]	; (80046c8 <__ieee754_powf+0x568>)
 80045a2:	3b7f      	subs	r3, #127	; 0x7f
 80045a4:	411a      	asrs	r2, r3
 80045a6:	4002      	ands	r2, r0
 80045a8:	ee07 2a10 	vmov	s14, r2
 80045ac:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80045b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80045b4:	f1c3 0317 	rsb	r3, r3, #23
 80045b8:	4118      	asrs	r0, r3
 80045ba:	2900      	cmp	r1, #0
 80045bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045c0:	bfb8      	it	lt
 80045c2:	4240      	neglt	r0, r0
 80045c4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80045c8:	eddf 6a40 	vldr	s13, [pc, #256]	; 80046cc <__ieee754_powf+0x56c>
 80045cc:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80046d0 <__ieee754_powf+0x570>
 80045d0:	ee17 3a10 	vmov	r3, s14
 80045d4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80045d8:	f023 030f 	bic.w	r3, r3, #15
 80045dc:	ee07 3a10 	vmov	s14, r3
 80045e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80045e8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80045ec:	eddf 7a39 	vldr	s15, [pc, #228]	; 80046d4 <__ieee754_powf+0x574>
 80045f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f4:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80045f8:	eef0 6a67 	vmov.f32	s13, s15
 80045fc:	eee7 6a06 	vfma.f32	s13, s14, s12
 8004600:	eef0 5a66 	vmov.f32	s11, s13
 8004604:	eee7 5a46 	vfms.f32	s11, s14, s12
 8004608:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800460c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8004610:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80046d8 <__ieee754_powf+0x578>
 8004614:	eddf 5a31 	vldr	s11, [pc, #196]	; 80046dc <__ieee754_powf+0x57c>
 8004618:	eea7 6a25 	vfma.f32	s12, s14, s11
 800461c:	eddf 5a30 	vldr	s11, [pc, #192]	; 80046e0 <__ieee754_powf+0x580>
 8004620:	eee6 5a07 	vfma.f32	s11, s12, s14
 8004624:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80046e4 <__ieee754_powf+0x584>
 8004628:	eea5 6a87 	vfma.f32	s12, s11, s14
 800462c:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80046e8 <__ieee754_powf+0x588>
 8004630:	eee6 5a07 	vfma.f32	s11, s12, s14
 8004634:	eeb0 6a66 	vmov.f32	s12, s13
 8004638:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800463c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004640:	ee66 5a86 	vmul.f32	s11, s13, s12
 8004644:	ee36 6a47 	vsub.f32	s12, s12, s14
 8004648:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800464c:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8004650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004654:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004658:	ee30 0a67 	vsub.f32	s0, s0, s15
 800465c:	ee10 3a10 	vmov	r3, s0
 8004660:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8004664:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004668:	da1f      	bge.n	80046aa <__ieee754_powf+0x54a>
 800466a:	f000 f84b 	bl	8004704 <scalbnf>
 800466e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004672:	e58d      	b.n	8004190 <__ieee754_powf+0x30>
 8004674:	4a1d      	ldr	r2, [pc, #116]	; (80046ec <__ieee754_powf+0x58c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	dd07      	ble.n	800468a <__ieee754_powf+0x52a>
 800467a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800467e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004682:	bf4c      	ite	mi
 8004684:	2001      	movmi	r0, #1
 8004686:	2000      	movpl	r0, #0
 8004688:	e622      	b.n	80042d0 <__ieee754_powf+0x170>
 800468a:	d108      	bne.n	800469e <__ieee754_powf+0x53e>
 800468c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004690:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8004694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004698:	f6ff af7a 	blt.w	8004590 <__ieee754_powf+0x430>
 800469c:	e7ed      	b.n	800467a <__ieee754_powf+0x51a>
 800469e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80046a2:	f73f af75 	bgt.w	8004590 <__ieee754_powf+0x430>
 80046a6:	2000      	movs	r0, #0
 80046a8:	e78c      	b.n	80045c4 <__ieee754_powf+0x464>
 80046aa:	ee00 3a10 	vmov	s0, r3
 80046ae:	e7de      	b.n	800466e <__ieee754_powf+0x50e>
 80046b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80046b4:	e56c      	b.n	8004190 <__ieee754_powf+0x30>
 80046b6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80046f0 <__ieee754_powf+0x590>
 80046ba:	e569      	b.n	8004190 <__ieee754_powf+0x30>
 80046bc:	eeb0 0a48 	vmov.f32	s0, s16
 80046c0:	e566      	b.n	8004190 <__ieee754_powf+0x30>
 80046c2:	2600      	movs	r6, #0
 80046c4:	e591      	b.n	80041ea <__ieee754_powf+0x8a>
 80046c6:	bf00      	nop
 80046c8:	ff800000 	.word	0xff800000
 80046cc:	3f317218 	.word	0x3f317218
 80046d0:	3f317200 	.word	0x3f317200
 80046d4:	35bfbe8c 	.word	0x35bfbe8c
 80046d8:	b5ddea0e 	.word	0xb5ddea0e
 80046dc:	3331bb4c 	.word	0x3331bb4c
 80046e0:	388ab355 	.word	0x388ab355
 80046e4:	bb360b61 	.word	0xbb360b61
 80046e8:	3e2aaaab 	.word	0x3e2aaaab
 80046ec:	43160000 	.word	0x43160000
 80046f0:	00000000 	.word	0x00000000

080046f4 <fabsf>:
 80046f4:	ee10 3a10 	vmov	r3, s0
 80046f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046fc:	ee00 3a10 	vmov	s0, r3
 8004700:	4770      	bx	lr
	...

08004704 <scalbnf>:
 8004704:	ee10 3a10 	vmov	r3, s0
 8004708:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800470c:	d02b      	beq.n	8004766 <scalbnf+0x62>
 800470e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004712:	d302      	bcc.n	800471a <scalbnf+0x16>
 8004714:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004718:	4770      	bx	lr
 800471a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800471e:	d123      	bne.n	8004768 <scalbnf+0x64>
 8004720:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <scalbnf+0xb0>)
 8004722:	eddf 7a25 	vldr	s15, [pc, #148]	; 80047b8 <scalbnf+0xb4>
 8004726:	4298      	cmp	r0, r3
 8004728:	ee20 0a27 	vmul.f32	s0, s0, s15
 800472c:	db17      	blt.n	800475e <scalbnf+0x5a>
 800472e:	ee10 3a10 	vmov	r3, s0
 8004732:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004736:	3a19      	subs	r2, #25
 8004738:	f24c 3150 	movw	r1, #50000	; 0xc350
 800473c:	4288      	cmp	r0, r1
 800473e:	dd15      	ble.n	800476c <scalbnf+0x68>
 8004740:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80047bc <scalbnf+0xb8>
 8004744:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80047c0 <scalbnf+0xbc>
 8004748:	ee10 3a10 	vmov	r3, s0
 800474c:	eeb0 7a67 	vmov.f32	s14, s15
 8004750:	2b00      	cmp	r3, #0
 8004752:	bfb8      	it	lt
 8004754:	eef0 7a66 	vmovlt.f32	s15, s13
 8004758:	ee27 0a87 	vmul.f32	s0, s15, s14
 800475c:	4770      	bx	lr
 800475e:	eddf 7a19 	vldr	s15, [pc, #100]	; 80047c4 <scalbnf+0xc0>
 8004762:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004766:	4770      	bx	lr
 8004768:	0dd2      	lsrs	r2, r2, #23
 800476a:	e7e5      	b.n	8004738 <scalbnf+0x34>
 800476c:	4410      	add	r0, r2
 800476e:	28fe      	cmp	r0, #254	; 0xfe
 8004770:	dce6      	bgt.n	8004740 <scalbnf+0x3c>
 8004772:	2800      	cmp	r0, #0
 8004774:	dd06      	ble.n	8004784 <scalbnf+0x80>
 8004776:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800477a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800477e:	ee00 3a10 	vmov	s0, r3
 8004782:	4770      	bx	lr
 8004784:	f110 0f16 	cmn.w	r0, #22
 8004788:	da09      	bge.n	800479e <scalbnf+0x9a>
 800478a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80047c4 <scalbnf+0xc0>
 800478e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80047c8 <scalbnf+0xc4>
 8004792:	ee10 3a10 	vmov	r3, s0
 8004796:	eeb0 7a67 	vmov.f32	s14, s15
 800479a:	2b00      	cmp	r3, #0
 800479c:	e7d9      	b.n	8004752 <scalbnf+0x4e>
 800479e:	3019      	adds	r0, #25
 80047a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80047a4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80047a8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80047cc <scalbnf+0xc8>
 80047ac:	ee07 3a90 	vmov	s15, r3
 80047b0:	e7d7      	b.n	8004762 <scalbnf+0x5e>
 80047b2:	bf00      	nop
 80047b4:	ffff3cb0 	.word	0xffff3cb0
 80047b8:	4c000000 	.word	0x4c000000
 80047bc:	7149f2ca 	.word	0x7149f2ca
 80047c0:	f149f2ca 	.word	0xf149f2ca
 80047c4:	0da24260 	.word	0x0da24260
 80047c8:	8da24260 	.word	0x8da24260
 80047cc:	33000000 	.word	0x33000000

080047d0 <with_errnof>:
 80047d0:	b513      	push	{r0, r1, r4, lr}
 80047d2:	4604      	mov	r4, r0
 80047d4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80047d8:	f7ff fc34 	bl	8004044 <__errno>
 80047dc:	ed9d 0a01 	vldr	s0, [sp, #4]
 80047e0:	6004      	str	r4, [r0, #0]
 80047e2:	b002      	add	sp, #8
 80047e4:	bd10      	pop	{r4, pc}

080047e6 <xflowf>:
 80047e6:	b130      	cbz	r0, 80047f6 <xflowf+0x10>
 80047e8:	eef1 7a40 	vneg.f32	s15, s0
 80047ec:	ee27 0a80 	vmul.f32	s0, s15, s0
 80047f0:	2022      	movs	r0, #34	; 0x22
 80047f2:	f7ff bfed 	b.w	80047d0 <with_errnof>
 80047f6:	eef0 7a40 	vmov.f32	s15, s0
 80047fa:	e7f7      	b.n	80047ec <xflowf+0x6>

080047fc <__math_uflowf>:
 80047fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004804 <__math_uflowf+0x8>
 8004800:	f7ff bff1 	b.w	80047e6 <xflowf>
 8004804:	10000000 	.word	0x10000000

08004808 <__math_oflowf>:
 8004808:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004810 <__math_oflowf+0x8>
 800480c:	f7ff bfeb 	b.w	80047e6 <xflowf>
 8004810:	70000000 	.word	0x70000000

08004814 <__ieee754_sqrtf>:
 8004814:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004818:	4770      	bx	lr
	...

0800481c <_init>:
 800481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481e:	bf00      	nop
 8004820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004822:	bc08      	pop	{r3}
 8004824:	469e      	mov	lr, r3
 8004826:	4770      	bx	lr

08004828 <_fini>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	bf00      	nop
 800482c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482e:	bc08      	pop	{r3}
 8004830:	469e      	mov	lr, r3
 8004832:	4770      	bx	lr
