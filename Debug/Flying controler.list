
Flying controler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000865c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08008800  08008800  00018800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c14  08008c14  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008c14  08008c14  00018c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c1c  08008c1c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c1c  08008c1c  00018c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c20  08008c20  00018c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  200001d4  08008df8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08008df8  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c1d4  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001efa  00000000  00000000  0002c41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  0002e318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000820  00000000  00000000  0002ed98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000174f7  00000000  00000000  0002f5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef10  00000000  00000000  00046aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089dd7  00000000  00000000  000559bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003de4  00000000  00000000  000df798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e357c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080087e4 	.word	0x080087e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080087e4 	.word	0x080087e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_frsub>:
 8000c58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	e002      	b.n	8000c64 <__addsf3>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_fsub>:
 8000c60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c64 <__addsf3>:
 8000c64:	0042      	lsls	r2, r0, #1
 8000c66:	bf1f      	itttt	ne
 8000c68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c6c:	ea92 0f03 	teqne	r2, r3
 8000c70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c78:	d06a      	beq.n	8000d50 <__addsf3+0xec>
 8000c7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c82:	bfc1      	itttt	gt
 8000c84:	18d2      	addgt	r2, r2, r3
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	4048      	eorgt	r0, r1
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	bfb8      	it	lt
 8000c8e:	425b      	neglt	r3, r3
 8000c90:	2b19      	cmp	r3, #25
 8000c92:	bf88      	it	hi
 8000c94:	4770      	bxhi	lr
 8000c96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000caa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cb2:	bf18      	it	ne
 8000cb4:	4249      	negne	r1, r1
 8000cb6:	ea92 0f03 	teq	r2, r3
 8000cba:	d03f      	beq.n	8000d3c <__addsf3+0xd8>
 8000cbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc4:	eb10 000c 	adds.w	r0, r0, ip
 8000cc8:	f1c3 0320 	rsb	r3, r3, #32
 8000ccc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__addsf3+0x78>
 8000cd6:	4249      	negs	r1, r1
 8000cd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce0:	d313      	bcc.n	8000d0a <__addsf3+0xa6>
 8000ce2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ce6:	d306      	bcc.n	8000cf6 <__addsf3+0x92>
 8000ce8:	0840      	lsrs	r0, r0, #1
 8000cea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cee:	f102 0201 	add.w	r2, r2, #1
 8000cf2:	2afe      	cmp	r2, #254	; 0xfe
 8000cf4:	d251      	bcs.n	8000d9a <__addsf3+0x136>
 8000cf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfe:	bf08      	it	eq
 8000d00:	f020 0001 	biceq.w	r0, r0, #1
 8000d04:	ea40 0003 	orr.w	r0, r0, r3
 8000d08:	4770      	bx	lr
 8000d0a:	0049      	lsls	r1, r1, #1
 8000d0c:	eb40 0000 	adc.w	r0, r0, r0
 8000d10:	3a01      	subs	r2, #1
 8000d12:	bf28      	it	cs
 8000d14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d18:	d2ed      	bcs.n	8000cf6 <__addsf3+0x92>
 8000d1a:	fab0 fc80 	clz	ip, r0
 8000d1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d22:	ebb2 020c 	subs.w	r2, r2, ip
 8000d26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2a:	bfaa      	itet	ge
 8000d2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d30:	4252      	neglt	r2, r2
 8000d32:	4318      	orrge	r0, r3
 8000d34:	bfbc      	itt	lt
 8000d36:	40d0      	lsrlt	r0, r2
 8000d38:	4318      	orrlt	r0, r3
 8000d3a:	4770      	bx	lr
 8000d3c:	f092 0f00 	teq	r2, #0
 8000d40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d44:	bf06      	itte	eq
 8000d46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d4a:	3201      	addeq	r2, #1
 8000d4c:	3b01      	subne	r3, #1
 8000d4e:	e7b5      	b.n	8000cbc <__addsf3+0x58>
 8000d50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d58:	bf18      	it	ne
 8000d5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5e:	d021      	beq.n	8000da4 <__addsf3+0x140>
 8000d60:	ea92 0f03 	teq	r2, r3
 8000d64:	d004      	beq.n	8000d70 <__addsf3+0x10c>
 8000d66:	f092 0f00 	teq	r2, #0
 8000d6a:	bf08      	it	eq
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	4770      	bx	lr
 8000d70:	ea90 0f01 	teq	r0, r1
 8000d74:	bf1c      	itt	ne
 8000d76:	2000      	movne	r0, #0
 8000d78:	4770      	bxne	lr
 8000d7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d7e:	d104      	bne.n	8000d8a <__addsf3+0x126>
 8000d80:	0040      	lsls	r0, r0, #1
 8000d82:	bf28      	it	cs
 8000d84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d8e:	bf3c      	itt	cc
 8000d90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d94:	4770      	bxcc	lr
 8000d96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da2:	4770      	bx	lr
 8000da4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da8:	bf16      	itet	ne
 8000daa:	4608      	movne	r0, r1
 8000dac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db0:	4601      	movne	r1, r0
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	bf06      	itte	eq
 8000db6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dba:	ea90 0f01 	teqeq	r0, r1
 8000dbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_ui2f>:
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e004      	b.n	8000dd4 <__aeabi_i2f+0x8>
 8000dca:	bf00      	nop

08000dcc <__aeabi_i2f>:
 8000dcc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd0:	bf48      	it	mi
 8000dd2:	4240      	negmi	r0, r0
 8000dd4:	ea5f 0c00 	movs.w	ip, r0
 8000dd8:	bf08      	it	eq
 8000dda:	4770      	bxeq	lr
 8000ddc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de0:	4601      	mov	r1, r0
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	e01c      	b.n	8000e22 <__aeabi_l2f+0x2a>

08000de8 <__aeabi_ul2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e00a      	b.n	8000e0c <__aeabi_l2f+0x14>
 8000df6:	bf00      	nop

08000df8 <__aeabi_l2f>:
 8000df8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dfc:	bf08      	it	eq
 8000dfe:	4770      	bxeq	lr
 8000e00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e04:	d502      	bpl.n	8000e0c <__aeabi_l2f+0x14>
 8000e06:	4240      	negs	r0, r0
 8000e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e0c:	ea5f 0c01 	movs.w	ip, r1
 8000e10:	bf02      	ittt	eq
 8000e12:	4684      	moveq	ip, r0
 8000e14:	4601      	moveq	r1, r0
 8000e16:	2000      	moveq	r0, #0
 8000e18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e1c:	bf08      	it	eq
 8000e1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e26:	fabc f28c 	clz	r2, ip
 8000e2a:	3a08      	subs	r2, #8
 8000e2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e30:	db10      	blt.n	8000e54 <__aeabi_l2f+0x5c>
 8000e32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e36:	4463      	add	r3, ip
 8000e38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e44:	fa20 f202 	lsr.w	r2, r0, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	f020 0001 	biceq.w	r0, r0, #1
 8000e52:	4770      	bx	lr
 8000e54:	f102 0220 	add.w	r2, r2, #32
 8000e58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e5c:	f1c2 0220 	rsb	r2, r2, #32
 8000e60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e64:	fa21 f202 	lsr.w	r2, r1, r2
 8000e68:	eb43 0002 	adc.w	r0, r3, r2
 8000e6c:	bf08      	it	eq
 8000e6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_ldivmod>:
 8000e74:	b97b      	cbnz	r3, 8000e96 <__aeabi_ldivmod+0x22>
 8000e76:	b972      	cbnz	r2, 8000e96 <__aeabi_ldivmod+0x22>
 8000e78:	2900      	cmp	r1, #0
 8000e7a:	bfbe      	ittt	lt
 8000e7c:	2000      	movlt	r0, #0
 8000e7e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000e82:	e006      	blt.n	8000e92 <__aeabi_ldivmod+0x1e>
 8000e84:	bf08      	it	eq
 8000e86:	2800      	cmpeq	r0, #0
 8000e88:	bf1c      	itt	ne
 8000e8a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000e8e:	f04f 30ff 	movne.w	r0, #4294967295
 8000e92:	f000 b9bb 	b.w	800120c <__aeabi_idiv0>
 8000e96:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e9a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e9e:	2900      	cmp	r1, #0
 8000ea0:	db09      	blt.n	8000eb6 <__aeabi_ldivmod+0x42>
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db1a      	blt.n	8000edc <__aeabi_ldivmod+0x68>
 8000ea6:	f000 f84d 	bl	8000f44 <__udivmoddi4>
 8000eaa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eb2:	b004      	add	sp, #16
 8000eb4:	4770      	bx	lr
 8000eb6:	4240      	negs	r0, r0
 8000eb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db1b      	blt.n	8000ef8 <__aeabi_ldivmod+0x84>
 8000ec0:	f000 f840 	bl	8000f44 <__udivmoddi4>
 8000ec4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ec8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ecc:	b004      	add	sp, #16
 8000ece:	4240      	negs	r0, r0
 8000ed0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ed4:	4252      	negs	r2, r2
 8000ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eda:	4770      	bx	lr
 8000edc:	4252      	negs	r2, r2
 8000ede:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ee2:	f000 f82f 	bl	8000f44 <__udivmoddi4>
 8000ee6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eee:	b004      	add	sp, #16
 8000ef0:	4240      	negs	r0, r0
 8000ef2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ef6:	4770      	bx	lr
 8000ef8:	4252      	negs	r2, r2
 8000efa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000efe:	f000 f821 	bl	8000f44 <__udivmoddi4>
 8000f02:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f0a:	b004      	add	sp, #16
 8000f0c:	4252      	negs	r2, r2
 8000f0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f12:	4770      	bx	lr

08000f14 <__aeabi_uldivmod>:
 8000f14:	b953      	cbnz	r3, 8000f2c <__aeabi_uldivmod+0x18>
 8000f16:	b94a      	cbnz	r2, 8000f2c <__aeabi_uldivmod+0x18>
 8000f18:	2900      	cmp	r1, #0
 8000f1a:	bf08      	it	eq
 8000f1c:	2800      	cmpeq	r0, #0
 8000f1e:	bf1c      	itt	ne
 8000f20:	f04f 31ff 	movne.w	r1, #4294967295
 8000f24:	f04f 30ff 	movne.w	r0, #4294967295
 8000f28:	f000 b970 	b.w	800120c <__aeabi_idiv0>
 8000f2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f34:	f000 f806 	bl	8000f44 <__udivmoddi4>
 8000f38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f40:	b004      	add	sp, #16
 8000f42:	4770      	bx	lr

08000f44 <__udivmoddi4>:
 8000f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f48:	9e08      	ldr	r6, [sp, #32]
 8000f4a:	460d      	mov	r5, r1
 8000f4c:	4604      	mov	r4, r0
 8000f4e:	460f      	mov	r7, r1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d14a      	bne.n	8000fea <__udivmoddi4+0xa6>
 8000f54:	428a      	cmp	r2, r1
 8000f56:	4694      	mov	ip, r2
 8000f58:	d965      	bls.n	8001026 <__udivmoddi4+0xe2>
 8000f5a:	fab2 f382 	clz	r3, r2
 8000f5e:	b143      	cbz	r3, 8000f72 <__udivmoddi4+0x2e>
 8000f60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f64:	f1c3 0220 	rsb	r2, r3, #32
 8000f68:	409f      	lsls	r7, r3
 8000f6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000f6e:	4317      	orrs	r7, r2
 8000f70:	409c      	lsls	r4, r3
 8000f72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f76:	fa1f f58c 	uxth.w	r5, ip
 8000f7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000f7e:	0c22      	lsrs	r2, r4, #16
 8000f80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000f84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000f88:	fb01 f005 	mul.w	r0, r1, r5
 8000f8c:	4290      	cmp	r0, r2
 8000f8e:	d90a      	bls.n	8000fa6 <__udivmoddi4+0x62>
 8000f90:	eb1c 0202 	adds.w	r2, ip, r2
 8000f94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000f98:	f080 811c 	bcs.w	80011d4 <__udivmoddi4+0x290>
 8000f9c:	4290      	cmp	r0, r2
 8000f9e:	f240 8119 	bls.w	80011d4 <__udivmoddi4+0x290>
 8000fa2:	3902      	subs	r1, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a12      	subs	r2, r2, r0
 8000fa8:	b2a4      	uxth	r4, r4
 8000faa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000fae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000fb2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fb6:	fb00 f505 	mul.w	r5, r0, r5
 8000fba:	42a5      	cmp	r5, r4
 8000fbc:	d90a      	bls.n	8000fd4 <__udivmoddi4+0x90>
 8000fbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fc6:	f080 8107 	bcs.w	80011d8 <__udivmoddi4+0x294>
 8000fca:	42a5      	cmp	r5, r4
 8000fcc:	f240 8104 	bls.w	80011d8 <__udivmoddi4+0x294>
 8000fd0:	4464      	add	r4, ip
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fd8:	1b64      	subs	r4, r4, r5
 8000fda:	2100      	movs	r1, #0
 8000fdc:	b11e      	cbz	r6, 8000fe6 <__udivmoddi4+0xa2>
 8000fde:	40dc      	lsrs	r4, r3
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e9c6 4300 	strd	r4, r3, [r6]
 8000fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d908      	bls.n	8001000 <__udivmoddi4+0xbc>
 8000fee:	2e00      	cmp	r6, #0
 8000ff0:	f000 80ed 	beq.w	80011ce <__udivmoddi4+0x28a>
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	e9c6 0500 	strd	r0, r5, [r6]
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001000:	fab3 f183 	clz	r1, r3
 8001004:	2900      	cmp	r1, #0
 8001006:	d149      	bne.n	800109c <__udivmoddi4+0x158>
 8001008:	42ab      	cmp	r3, r5
 800100a:	d302      	bcc.n	8001012 <__udivmoddi4+0xce>
 800100c:	4282      	cmp	r2, r0
 800100e:	f200 80f8 	bhi.w	8001202 <__udivmoddi4+0x2be>
 8001012:	1a84      	subs	r4, r0, r2
 8001014:	eb65 0203 	sbc.w	r2, r5, r3
 8001018:	2001      	movs	r0, #1
 800101a:	4617      	mov	r7, r2
 800101c:	2e00      	cmp	r6, #0
 800101e:	d0e2      	beq.n	8000fe6 <__udivmoddi4+0xa2>
 8001020:	e9c6 4700 	strd	r4, r7, [r6]
 8001024:	e7df      	b.n	8000fe6 <__udivmoddi4+0xa2>
 8001026:	b902      	cbnz	r2, 800102a <__udivmoddi4+0xe6>
 8001028:	deff      	udf	#255	; 0xff
 800102a:	fab2 f382 	clz	r3, r2
 800102e:	2b00      	cmp	r3, #0
 8001030:	f040 8090 	bne.w	8001154 <__udivmoddi4+0x210>
 8001034:	1a8a      	subs	r2, r1, r2
 8001036:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103a:	fa1f fe8c 	uxth.w	lr, ip
 800103e:	2101      	movs	r1, #1
 8001040:	fbb2 f5f7 	udiv	r5, r2, r7
 8001044:	fb07 2015 	mls	r0, r7, r5, r2
 8001048:	0c22      	lsrs	r2, r4, #16
 800104a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800104e:	fb0e f005 	mul.w	r0, lr, r5
 8001052:	4290      	cmp	r0, r2
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x124>
 8001056:	eb1c 0202 	adds.w	r2, ip, r2
 800105a:	f105 38ff 	add.w	r8, r5, #4294967295
 800105e:	d202      	bcs.n	8001066 <__udivmoddi4+0x122>
 8001060:	4290      	cmp	r0, r2
 8001062:	f200 80cb 	bhi.w	80011fc <__udivmoddi4+0x2b8>
 8001066:	4645      	mov	r5, r8
 8001068:	1a12      	subs	r2, r2, r0
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb2 f0f7 	udiv	r0, r2, r7
 8001070:	fb07 2210 	mls	r2, r7, r0, r2
 8001074:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001078:	fb0e fe00 	mul.w	lr, lr, r0
 800107c:	45a6      	cmp	lr, r4
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x14e>
 8001080:	eb1c 0404 	adds.w	r4, ip, r4
 8001084:	f100 32ff 	add.w	r2, r0, #4294967295
 8001088:	d202      	bcs.n	8001090 <__udivmoddi4+0x14c>
 800108a:	45a6      	cmp	lr, r4
 800108c:	f200 80bb 	bhi.w	8001206 <__udivmoddi4+0x2c2>
 8001090:	4610      	mov	r0, r2
 8001092:	eba4 040e 	sub.w	r4, r4, lr
 8001096:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800109a:	e79f      	b.n	8000fdc <__udivmoddi4+0x98>
 800109c:	f1c1 0720 	rsb	r7, r1, #32
 80010a0:	408b      	lsls	r3, r1
 80010a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80010a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80010aa:	fa05 f401 	lsl.w	r4, r5, r1
 80010ae:	fa20 f307 	lsr.w	r3, r0, r7
 80010b2:	40fd      	lsrs	r5, r7
 80010b4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010b8:	4323      	orrs	r3, r4
 80010ba:	fbb5 f8f9 	udiv	r8, r5, r9
 80010be:	fa1f fe8c 	uxth.w	lr, ip
 80010c2:	fb09 5518 	mls	r5, r9, r8, r5
 80010c6:	0c1c      	lsrs	r4, r3, #16
 80010c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80010cc:	fb08 f50e 	mul.w	r5, r8, lr
 80010d0:	42a5      	cmp	r5, r4
 80010d2:	fa02 f201 	lsl.w	r2, r2, r1
 80010d6:	fa00 f001 	lsl.w	r0, r0, r1
 80010da:	d90b      	bls.n	80010f4 <__udivmoddi4+0x1b0>
 80010dc:	eb1c 0404 	adds.w	r4, ip, r4
 80010e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80010e4:	f080 8088 	bcs.w	80011f8 <__udivmoddi4+0x2b4>
 80010e8:	42a5      	cmp	r5, r4
 80010ea:	f240 8085 	bls.w	80011f8 <__udivmoddi4+0x2b4>
 80010ee:	f1a8 0802 	sub.w	r8, r8, #2
 80010f2:	4464      	add	r4, ip
 80010f4:	1b64      	subs	r4, r4, r5
 80010f6:	b29d      	uxth	r5, r3
 80010f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80010fc:	fb09 4413 	mls	r4, r9, r3, r4
 8001100:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001104:	fb03 fe0e 	mul.w	lr, r3, lr
 8001108:	45a6      	cmp	lr, r4
 800110a:	d908      	bls.n	800111e <__udivmoddi4+0x1da>
 800110c:	eb1c 0404 	adds.w	r4, ip, r4
 8001110:	f103 35ff 	add.w	r5, r3, #4294967295
 8001114:	d26c      	bcs.n	80011f0 <__udivmoddi4+0x2ac>
 8001116:	45a6      	cmp	lr, r4
 8001118:	d96a      	bls.n	80011f0 <__udivmoddi4+0x2ac>
 800111a:	3b02      	subs	r3, #2
 800111c:	4464      	add	r4, ip
 800111e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001122:	fba3 9502 	umull	r9, r5, r3, r2
 8001126:	eba4 040e 	sub.w	r4, r4, lr
 800112a:	42ac      	cmp	r4, r5
 800112c:	46c8      	mov	r8, r9
 800112e:	46ae      	mov	lr, r5
 8001130:	d356      	bcc.n	80011e0 <__udivmoddi4+0x29c>
 8001132:	d053      	beq.n	80011dc <__udivmoddi4+0x298>
 8001134:	b156      	cbz	r6, 800114c <__udivmoddi4+0x208>
 8001136:	ebb0 0208 	subs.w	r2, r0, r8
 800113a:	eb64 040e 	sbc.w	r4, r4, lr
 800113e:	fa04 f707 	lsl.w	r7, r4, r7
 8001142:	40ca      	lsrs	r2, r1
 8001144:	40cc      	lsrs	r4, r1
 8001146:	4317      	orrs	r7, r2
 8001148:	e9c6 7400 	strd	r7, r4, [r6]
 800114c:	4618      	mov	r0, r3
 800114e:	2100      	movs	r1, #0
 8001150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001154:	f1c3 0120 	rsb	r1, r3, #32
 8001158:	fa02 fc03 	lsl.w	ip, r2, r3
 800115c:	fa20 f201 	lsr.w	r2, r0, r1
 8001160:	fa25 f101 	lsr.w	r1, r5, r1
 8001164:	409d      	lsls	r5, r3
 8001166:	432a      	orrs	r2, r5
 8001168:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800116c:	fa1f fe8c 	uxth.w	lr, ip
 8001170:	fbb1 f0f7 	udiv	r0, r1, r7
 8001174:	fb07 1510 	mls	r5, r7, r0, r1
 8001178:	0c11      	lsrs	r1, r2, #16
 800117a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800117e:	fb00 f50e 	mul.w	r5, r0, lr
 8001182:	428d      	cmp	r5, r1
 8001184:	fa04 f403 	lsl.w	r4, r4, r3
 8001188:	d908      	bls.n	800119c <__udivmoddi4+0x258>
 800118a:	eb1c 0101 	adds.w	r1, ip, r1
 800118e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001192:	d22f      	bcs.n	80011f4 <__udivmoddi4+0x2b0>
 8001194:	428d      	cmp	r5, r1
 8001196:	d92d      	bls.n	80011f4 <__udivmoddi4+0x2b0>
 8001198:	3802      	subs	r0, #2
 800119a:	4461      	add	r1, ip
 800119c:	1b49      	subs	r1, r1, r5
 800119e:	b292      	uxth	r2, r2
 80011a0:	fbb1 f5f7 	udiv	r5, r1, r7
 80011a4:	fb07 1115 	mls	r1, r7, r5, r1
 80011a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011ac:	fb05 f10e 	mul.w	r1, r5, lr
 80011b0:	4291      	cmp	r1, r2
 80011b2:	d908      	bls.n	80011c6 <__udivmoddi4+0x282>
 80011b4:	eb1c 0202 	adds.w	r2, ip, r2
 80011b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80011bc:	d216      	bcs.n	80011ec <__udivmoddi4+0x2a8>
 80011be:	4291      	cmp	r1, r2
 80011c0:	d914      	bls.n	80011ec <__udivmoddi4+0x2a8>
 80011c2:	3d02      	subs	r5, #2
 80011c4:	4462      	add	r2, ip
 80011c6:	1a52      	subs	r2, r2, r1
 80011c8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80011cc:	e738      	b.n	8001040 <__udivmoddi4+0xfc>
 80011ce:	4631      	mov	r1, r6
 80011d0:	4630      	mov	r0, r6
 80011d2:	e708      	b.n	8000fe6 <__udivmoddi4+0xa2>
 80011d4:	4639      	mov	r1, r7
 80011d6:	e6e6      	b.n	8000fa6 <__udivmoddi4+0x62>
 80011d8:	4610      	mov	r0, r2
 80011da:	e6fb      	b.n	8000fd4 <__udivmoddi4+0x90>
 80011dc:	4548      	cmp	r0, r9
 80011de:	d2a9      	bcs.n	8001134 <__udivmoddi4+0x1f0>
 80011e0:	ebb9 0802 	subs.w	r8, r9, r2
 80011e4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80011e8:	3b01      	subs	r3, #1
 80011ea:	e7a3      	b.n	8001134 <__udivmoddi4+0x1f0>
 80011ec:	4645      	mov	r5, r8
 80011ee:	e7ea      	b.n	80011c6 <__udivmoddi4+0x282>
 80011f0:	462b      	mov	r3, r5
 80011f2:	e794      	b.n	800111e <__udivmoddi4+0x1da>
 80011f4:	4640      	mov	r0, r8
 80011f6:	e7d1      	b.n	800119c <__udivmoddi4+0x258>
 80011f8:	46d0      	mov	r8, sl
 80011fa:	e77b      	b.n	80010f4 <__udivmoddi4+0x1b0>
 80011fc:	3d02      	subs	r5, #2
 80011fe:	4462      	add	r2, ip
 8001200:	e732      	b.n	8001068 <__udivmoddi4+0x124>
 8001202:	4608      	mov	r0, r1
 8001204:	e70a      	b.n	800101c <__udivmoddi4+0xd8>
 8001206:	4464      	add	r4, ip
 8001208:	3802      	subs	r0, #2
 800120a:	e742      	b.n	8001092 <__udivmoddi4+0x14e>

0800120c <__aeabi_idiv0>:
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop

08001210 <BMP280_ReadCalibrationData>:
extern I2C_HandleTypeDef hi2c2;
extern BMP280_CalibData calib_data;
extern float pressure, temperature, height, start_pressure, start_temperature, StartHeight, DeltaHeight;

void BMP280_ReadCalibrationData(I2C_HandleTypeDef *hi2c2, BMP280_CalibData *calib_data)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	; 0x30
 8001214:	af04      	add	r7, sp, #16
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
    uint8_t calib[24];

    if (HAL_I2C_Mem_Read(hi2c2, BMP280_ADDR, 0x88, I2C_MEMADD_SIZE_8BIT, calib, 24, 1000) == HAL_OK)
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	2318      	movs	r3, #24
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	f107 0308 	add.w	r3, r7, #8
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2301      	movs	r3, #1
 800122c:	2288      	movs	r2, #136	; 0x88
 800122e:	21ec      	movs	r1, #236	; 0xec
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f002 fb6f 	bl	8003914 <HAL_I2C_Mem_Read>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d16e      	bne.n	800131a <BMP280_ReadCalibrationData+0x10a>
    {
        calib_data->dig_T1 = (uint16_t)((calib[1] << 8 ) | calib[0]);
 800123c:	7a7b      	ldrb	r3, [r7, #9]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b21a      	sxth	r2, r3
 8001242:	7a3b      	ldrb	r3, [r7, #8]
 8001244:	b21b      	sxth	r3, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	b21b      	sxth	r3, r3
 800124a:	b29a      	uxth	r2, r3
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	801a      	strh	r2, [r3, #0]
        calib_data->dig_T2 = (int16_t)((calib[3] << 8 ) | calib[2]);
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	7abb      	ldrb	r3, [r7, #10]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21a      	sxth	r2, r3
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	805a      	strh	r2, [r3, #2]
        calib_data->dig_T3 = (int16_t)((calib[5] << 8 ) | calib[4]);
 8001262:	7b7b      	ldrb	r3, [r7, #13]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7b3b      	ldrb	r3, [r7, #12]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21a      	sxth	r2, r3
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	809a      	strh	r2, [r3, #4]
        calib_data->dig_P1 = (uint16_t)((calib[7] << 8 ) | calib[6]);
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21a      	sxth	r2, r3
 800127a:	7bbb      	ldrb	r3, [r7, #14]
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b21b      	sxth	r3, r3
 8001282:	b29a      	uxth	r2, r3
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	80da      	strh	r2, [r3, #6]
        calib_data->dig_P2 = (int16_t)((calib[9] << 8 ) | calib[8]);
 8001288:	7c7b      	ldrb	r3, [r7, #17]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	b21a      	sxth	r2, r3
 800128e:	7c3b      	ldrb	r3, [r7, #16]
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21a      	sxth	r2, r3
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	811a      	strh	r2, [r3, #8]
        calib_data->dig_P3 = (int16_t)((calib[11] << 8 ) | calib[10]);
 800129a:	7cfb      	ldrb	r3, [r7, #19]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b21a      	sxth	r2, r3
 80012a0:	7cbb      	ldrb	r3, [r7, #18]
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	815a      	strh	r2, [r3, #10]
        calib_data->dig_P4 = (int16_t)((calib[13] << 8 ) | calib[12]);
 80012ac:	7d7b      	ldrb	r3, [r7, #21]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	7d3b      	ldrb	r3, [r7, #20]
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	819a      	strh	r2, [r3, #12]
        calib_data->dig_P5 = (int16_t)((calib[15] << 8 ) | calib[14]);
 80012be:	7dfb      	ldrb	r3, [r7, #23]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	7dbb      	ldrb	r3, [r7, #22]
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b21a      	sxth	r2, r3
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	81da      	strh	r2, [r3, #14]
        calib_data->dig_P6 = (int16_t)((calib[17] << 8 ) | calib[16]);
 80012d0:	7e7b      	ldrb	r3, [r7, #25]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	7e3b      	ldrb	r3, [r7, #24]
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b21a      	sxth	r2, r3
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	821a      	strh	r2, [r3, #16]
        calib_data->dig_P7 = (int16_t)((calib[19] << 8 ) | calib[18]);
 80012e2:	7efb      	ldrb	r3, [r7, #27]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	7ebb      	ldrb	r3, [r7, #26]
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	825a      	strh	r2, [r3, #18]
        calib_data->dig_P8 = (int16_t)((calib[21] << 8 ) | calib[20]);
 80012f4:	7f7b      	ldrb	r3, [r7, #29]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	7f3b      	ldrb	r3, [r7, #28]
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b21a      	sxth	r2, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	829a      	strh	r2, [r3, #20]
        calib_data->dig_P9 = (int16_t)((calib[23] << 8 ) | calib[22]);
 8001306:	7ffb      	ldrb	r3, [r7, #31]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	b21a      	sxth	r2, r3
 800130c:	7fbb      	ldrb	r3, [r7, #30]
 800130e:	b21b      	sxth	r3, r3
 8001310:	4313      	orrs	r3, r2
 8001312:	b21a      	sxth	r2, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	82da      	strh	r2, [r3, #22]
    } else
    {
        printf ("Error");
    }
}
 8001318:	e002      	b.n	8001320 <BMP280_ReadCalibrationData+0x110>
        printf ("Error");
 800131a:	4803      	ldr	r0, [pc, #12]	; (8001328 <BMP280_ReadCalibrationData+0x118>)
 800131c:	f004 feee 	bl	80060fc <iprintf>
}
 8001320:	bf00      	nop
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	08008800 	.word	0x08008800

0800132c <BMP280_Init>:

void BMP280_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af02      	add	r7, sp, #8
    uint8_t config[2];

    // Set the control measurement register
    // Normal mode, Temperature oversampling x 1, Pressure oversampling x 1
    config[0] = BMP280_CTRL_MEAS_REG;
 8001332:	23f4      	movs	r3, #244	; 0xf4
 8001334:	713b      	strb	r3, [r7, #4]
    config[1] = 0x27;
 8001336:	2327      	movs	r3, #39	; 0x27
 8001338:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c2, BMP280_ADDR, config, 2, 10);
 800133a:	1d3a      	adds	r2, r7, #4
 800133c:	230a      	movs	r3, #10
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2302      	movs	r3, #2
 8001342:	21ec      	movs	r1, #236	; 0xec
 8001344:	4809      	ldr	r0, [pc, #36]	; (800136c <BMP280_Init+0x40>)
 8001346:	f002 f8ed 	bl	8003524 <HAL_I2C_Master_Transmit>

    // Set the configuration register
    // Standby time 1000 ms, filter off
    config[0] = BMP280_CONFIG_REG;
 800134a:	23f5      	movs	r3, #245	; 0xf5
 800134c:	713b      	strb	r3, [r7, #4]
    config[1] = 0xA0;
 800134e:	23a0      	movs	r3, #160	; 0xa0
 8001350:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c2, BMP280_ADDR, config, 2, 10);
 8001352:	1d3a      	adds	r2, r7, #4
 8001354:	230a      	movs	r3, #10
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2302      	movs	r3, #2
 800135a:	21ec      	movs	r1, #236	; 0xec
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <BMP280_Init+0x40>)
 800135e:	f002 f8e1 	bl	8003524 <HAL_I2C_Master_Transmit>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2000026c 	.word	0x2000026c

08001370 <BMP280_ReadTemperature>:

int32_t t_fine; // Global variable used in pressure calculation

float BMP280_ReadTemperature(I2C_HandleTypeDef *hi2c2, BMP280_CalibData *calib_data)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08c      	sub	sp, #48	; 0x30
 8001374:	af04      	add	r7, sp, #16
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
    uint8_t data[3];
    int32_t raw_temp;

    // Read the raw temperature data
    HAL_I2C_Mem_Read(hi2c2, BMP280_ADDR, BMP280_TEMP_MSB_REG, I2C_MEMADD_SIZE_8BIT, data, 3, 100);
 800137a:	2364      	movs	r3, #100	; 0x64
 800137c:	9302      	str	r3, [sp, #8]
 800137e:	2303      	movs	r3, #3
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2301      	movs	r3, #1
 800138a:	22fa      	movs	r2, #250	; 0xfa
 800138c:	21ec      	movs	r1, #236	; 0xec
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f002 fac0 	bl	8003914 <HAL_I2C_Mem_Read>
    raw_temp = (data[0] << 16) | (data[1] << 8) | data[2];
 8001394:	7b3b      	ldrb	r3, [r7, #12]
 8001396:	041a      	lsls	r2, r3, #16
 8001398:	7b7b      	ldrb	r3, [r7, #13]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	4313      	orrs	r3, r2
 800139e:	7bba      	ldrb	r2, [r7, #14]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61fb      	str	r3, [r7, #28]
    raw_temp >>= 4;
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	111b      	asrs	r3, r3, #4
 80013a8:	61fb      	str	r3, [r7, #28]

    // Compensate the temperature
    int32_t var1, var2;
    var1 = ((((raw_temp >> 3) - ((int32_t)calib_data->dig_T1 << 1))) * ((int32_t)calib_data->dig_T2)) >> 11;
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	10da      	asrs	r2, r3, #3
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80013bc:	fb02 f303 	mul.w	r3, r2, r3
 80013c0:	12db      	asrs	r3, r3, #11
 80013c2:	61bb      	str	r3, [r7, #24]
    var2 = (((((raw_temp >> 4) - ((int32_t)calib_data->dig_T1)) * ((raw_temp >> 4) - ((int32_t)calib_data->dig_T1))) >> 12) *
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	111b      	asrs	r3, r3, #4
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	8812      	ldrh	r2, [r2, #0]
 80013cc:	1a9b      	subs	r3, r3, r2
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	1112      	asrs	r2, r2, #4
 80013d2:	6839      	ldr	r1, [r7, #0]
 80013d4:	8809      	ldrh	r1, [r1, #0]
 80013d6:	1a52      	subs	r2, r2, r1
 80013d8:	fb02 f303 	mul.w	r3, r2, r3
 80013dc:	131b      	asrs	r3, r3, #12
            ((int32_t)calib_data->dig_T3)) >> 14;
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
    var2 = (((((raw_temp >> 4) - ((int32_t)calib_data->dig_T1)) * ((raw_temp >> 4) - ((int32_t)calib_data->dig_T1))) >> 12) *
 80013e4:	fb02 f303 	mul.w	r3, r2, r3
 80013e8:	139b      	asrs	r3, r3, #14
 80013ea:	617b      	str	r3, [r7, #20]
    t_fine = var1 + var2;
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <BMP280_ReadTemperature+0xbc>)
 80013f4:	6013      	str	r3, [r2, #0]
    float T = (t_fine * 5 + 128) >> 8;
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <BMP280_ReadTemperature+0xbc>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	3380      	adds	r3, #128	; 0x80
 8001402:	121b      	asrs	r3, r3, #8
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140c:	edc7 7a04 	vstr	s15, [r7, #16]
    return T / 100.0; // Convert to Celsius
 8001410:	edd7 7a04 	vldr	s15, [r7, #16]
 8001414:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001430 <BMP280_ReadTemperature+0xc0>
 8001418:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800141c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001420:	eeb0 0a67 	vmov.f32	s0, s15
 8001424:	3720      	adds	r7, #32
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200001f0 	.word	0x200001f0
 8001430:	42c80000 	.word	0x42c80000

08001434 <BMP280_ReadPressure>:

float BMP280_ReadPressure(I2C_HandleTypeDef *hi2c2, BMP280_CalibData *calib_data)
{
 8001434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001438:	b0d2      	sub	sp, #328	; 0x148
 800143a:	af04      	add	r7, sp, #16
 800143c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8001440:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
    uint8_t data[3];
    int32_t raw_pres;

    // Read the raw pressure data
    HAL_I2C_Mem_Read(hi2c2, BMP280_ADDR, BMP280_PRESS_MSB_REG, I2C_MEMADD_SIZE_8BIT, data, 3, 100);
 8001444:	2364      	movs	r3, #100	; 0x64
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	2303      	movs	r3, #3
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2301      	movs	r3, #1
 8001454:	22f7      	movs	r2, #247	; 0xf7
 8001456:	21ec      	movs	r1, #236	; 0xec
 8001458:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800145c:	f002 fa5a 	bl	8003914 <HAL_I2C_Mem_Read>
    raw_pres = (data[0] << 16) | (data[1] << 8) | data[2];
 8001460:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	431a      	orrs	r2, r3
 800146e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001472:	4313      	orrs	r3, r2
 8001474:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    raw_pres >>= 4;
 8001478:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800147c:	111b      	asrs	r3, r3, #4
 800147e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    // Compensate the pressure
    int64_t var1, var2, p;
    var1 = ((int64_t)t_fine) - 128000;
 8001482:	4bad      	ldr	r3, [pc, #692]	; (8001738 <BMP280_ReadPressure+0x304>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	17da      	asrs	r2, r3, #31
 8001488:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800148c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001490:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001494:	460b      	mov	r3, r1
 8001496:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 800149a:	64bb      	str	r3, [r7, #72]	; 0x48
 800149c:	4613      	mov	r3, r2
 800149e:	f143 33ff 	adc.w	r3, r3, #4294967295
 80014a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80014a8:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
    var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 80014ac:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80014b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014b4:	fb03 f102 	mul.w	r1, r3, r2
 80014b8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80014bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014c0:	fb02 f303 	mul.w	r3, r2, r3
 80014c4:	18ca      	adds	r2, r1, r3
 80014c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014ca:	fba3 4503 	umull	r4, r5, r3, r3
 80014ce:	1953      	adds	r3, r2, r5
 80014d0:	461d      	mov	r5, r3
 80014d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80014d6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80014da:	b21b      	sxth	r3, r3
 80014dc:	17da      	asrs	r2, r3, #31
 80014de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80014e2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80014e6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80014ea:	4603      	mov	r3, r0
 80014ec:	fb03 f205 	mul.w	r2, r3, r5
 80014f0:	460b      	mov	r3, r1
 80014f2:	fb04 f303 	mul.w	r3, r4, r3
 80014f6:	4413      	add	r3, r2
 80014f8:	4602      	mov	r2, r0
 80014fa:	fba4 8902 	umull	r8, r9, r4, r2
 80014fe:	444b      	add	r3, r9
 8001500:	4699      	mov	r9, r3
 8001502:	e9c7 8948 	strd	r8, r9, [r7, #288]	; 0x120
 8001506:	e9c7 8948 	strd	r8, r9, [r7, #288]	; 0x120
    var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) << 17);
 800150a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800150e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001512:	b21b      	sxth	r3, r3
 8001514:	17da      	asrs	r2, r3, #31
 8001516:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800151a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800151e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001522:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001526:	462a      	mov	r2, r5
 8001528:	fb02 f203 	mul.w	r2, r2, r3
 800152c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001530:	4621      	mov	r1, r4
 8001532:	fb01 f303 	mul.w	r3, r1, r3
 8001536:	441a      	add	r2, r3
 8001538:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800153c:	4621      	mov	r1, r4
 800153e:	fba3 ab01 	umull	sl, fp, r3, r1
 8001542:	eb02 030b 	add.w	r3, r2, fp
 8001546:	469b      	mov	fp, r3
 8001548:	f04f 0000 	mov.w	r0, #0
 800154c:	f04f 0100 	mov.w	r1, #0
 8001550:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001554:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001558:	ea4f 404a 	mov.w	r0, sl, lsl #17
 800155c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001560:	1814      	adds	r4, r2, r0
 8001562:	643c      	str	r4, [r7, #64]	; 0x40
 8001564:	414b      	adcs	r3, r1
 8001566:	647b      	str	r3, [r7, #68]	; 0x44
 8001568:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800156c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
    var2 = var2 + (((int64_t)calib_data->dig_P4) << 35);
 8001570:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001574:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001578:	b21b      	sxth	r3, r3
 800157a:	17da      	asrs	r2, r3, #31
 800157c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001580:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001584:	f04f 0000 	mov.w	r0, #0
 8001588:	f04f 0100 	mov.w	r1, #0
 800158c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001590:	00d9      	lsls	r1, r3, #3
 8001592:	2000      	movs	r0, #0
 8001594:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001598:	1814      	adds	r4, r2, r0
 800159a:	63bc      	str	r4, [r7, #56]	; 0x38
 800159c:	414b      	adcs	r3, r1
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015a0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80015a4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
    var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) >>  8)+ ((var1 * (int64_t)calib_data->dig_P2) << 12);
 80015a8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80015ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015b0:	fb03 f102 	mul.w	r1, r3, r2
 80015b4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80015b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015bc:	fb02 f303 	mul.w	r3, r2, r3
 80015c0:	18ca      	adds	r2, r1, r3
 80015c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015c6:	fba3 1303 	umull	r1, r3, r3, r3
 80015ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015ce:	460b      	mov	r3, r1
 80015d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80015d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80015d8:	18d3      	adds	r3, r2, r3
 80015da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015e2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	17da      	asrs	r2, r3, #31
 80015ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80015ee:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80015f2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80015f6:	462b      	mov	r3, r5
 80015f8:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80015fc:	4642      	mov	r2, r8
 80015fe:	fb02 f203 	mul.w	r2, r2, r3
 8001602:	464b      	mov	r3, r9
 8001604:	4621      	mov	r1, r4
 8001606:	fb01 f303 	mul.w	r3, r1, r3
 800160a:	4413      	add	r3, r2
 800160c:	4622      	mov	r2, r4
 800160e:	4641      	mov	r1, r8
 8001610:	fba2 1201 	umull	r1, r2, r2, r1
 8001614:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001618:	460a      	mov	r2, r1
 800161a:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800161e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001622:	4413      	add	r3, r2
 8001624:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001628:	f04f 0000 	mov.w	r0, #0
 800162c:	f04f 0100 	mov.w	r1, #0
 8001630:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001634:	4623      	mov	r3, r4
 8001636:	0a18      	lsrs	r0, r3, #8
 8001638:	462b      	mov	r3, r5
 800163a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800163e:	462b      	mov	r3, r5
 8001640:	1219      	asrs	r1, r3, #8
 8001642:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001646:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800164a:	b21b      	sxth	r3, r3
 800164c:	17da      	asrs	r2, r3, #31
 800164e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001652:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001656:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800165a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800165e:	464a      	mov	r2, r9
 8001660:	fb02 f203 	mul.w	r2, r2, r3
 8001664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001668:	4644      	mov	r4, r8
 800166a:	fb04 f303 	mul.w	r3, r4, r3
 800166e:	441a      	add	r2, r3
 8001670:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001674:	4644      	mov	r4, r8
 8001676:	fba3 4304 	umull	r4, r3, r3, r4
 800167a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800167e:	4623      	mov	r3, r4
 8001680:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001688:	18d3      	adds	r3, r2, r3
 800168a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800169a:	464c      	mov	r4, r9
 800169c:	0323      	lsls	r3, r4, #12
 800169e:	4644      	mov	r4, r8
 80016a0:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80016a4:	4644      	mov	r4, r8
 80016a6:	0322      	lsls	r2, r4, #12
 80016a8:	1884      	adds	r4, r0, r2
 80016aa:	633c      	str	r4, [r7, #48]	; 0x30
 80016ac:	eb41 0303 	adc.w	r3, r1, r3
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
 80016b2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80016b6:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)calib_data->dig_P1) >> 33;
 80016ba:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80016be:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80016c2:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 80016c6:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80016ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80016ce:	88db      	ldrh	r3, [r3, #6]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	2200      	movs	r2, #0
 80016d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80016d8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80016dc:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80016e0:	462b      	mov	r3, r5
 80016e2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80016e6:	4642      	mov	r2, r8
 80016e8:	fb02 f203 	mul.w	r2, r2, r3
 80016ec:	464b      	mov	r3, r9
 80016ee:	4621      	mov	r1, r4
 80016f0:	fb01 f303 	mul.w	r3, r1, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	4622      	mov	r2, r4
 80016f8:	4641      	mov	r1, r8
 80016fa:	fba2 1201 	umull	r1, r2, r2, r1
 80016fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001702:	460a      	mov	r2, r1
 8001704:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8001708:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800170c:	4413      	add	r3, r2
 800170e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800171e:	4629      	mov	r1, r5
 8001720:	104a      	asrs	r2, r1, #1
 8001722:	4629      	mov	r1, r5
 8001724:	17cb      	asrs	r3, r1, #31
 8001726:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

    if (var1 == 0) {
 800172a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800172e:	4313      	orrs	r3, r2
 8001730:	d108      	bne.n	8001744 <BMP280_ReadPressure+0x310>
        return 0; // avoid exception caused by division by zero
 8001732:	eddf 7a02 	vldr	s15, [pc, #8]	; 800173c <BMP280_ReadPressure+0x308>
 8001736:	e158      	b.n	80019ea <BMP280_ReadPressure+0x5b6>
 8001738:	200001f0 	.word	0x200001f0
 800173c:	00000000 	.word	0x00000000
 8001740:	46c80000 	.word	0x46c80000
    }
    p = 1048576 - raw_pres;
 8001744:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001748:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800174c:	17da      	asrs	r2, r3, #31
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001750:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001752:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001756:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
    p = (((p << 31) - var2) * 3125) / var1;
 800175a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800175e:	105b      	asrs	r3, r3, #1
 8001760:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001764:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001768:	07db      	lsls	r3, r3, #31
 800176a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800176e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001772:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001776:	4621      	mov	r1, r4
 8001778:	1a89      	subs	r1, r1, r2
 800177a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800177e:	4629      	mov	r1, r5
 8001780:	eb61 0303 	sbc.w	r3, r1, r3
 8001784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001788:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800178c:	4622      	mov	r2, r4
 800178e:	462b      	mov	r3, r5
 8001790:	1891      	adds	r1, r2, r2
 8001792:	6239      	str	r1, [r7, #32]
 8001794:	415b      	adcs	r3, r3
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
 8001798:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800179c:	4621      	mov	r1, r4
 800179e:	1851      	adds	r1, r2, r1
 80017a0:	61b9      	str	r1, [r7, #24]
 80017a2:	4629      	mov	r1, r5
 80017a4:	414b      	adcs	r3, r1
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80017b4:	4649      	mov	r1, r9
 80017b6:	018b      	lsls	r3, r1, #6
 80017b8:	4641      	mov	r1, r8
 80017ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017be:	4641      	mov	r1, r8
 80017c0:	018a      	lsls	r2, r1, #6
 80017c2:	4641      	mov	r1, r8
 80017c4:	1889      	adds	r1, r1, r2
 80017c6:	6139      	str	r1, [r7, #16]
 80017c8:	4649      	mov	r1, r9
 80017ca:	eb43 0101 	adc.w	r1, r3, r1
 80017ce:	6179      	str	r1, [r7, #20]
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017dc:	4649      	mov	r1, r9
 80017de:	008b      	lsls	r3, r1, #2
 80017e0:	4641      	mov	r1, r8
 80017e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017e6:	4641      	mov	r1, r8
 80017e8:	008a      	lsls	r2, r1, #2
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	4622      	mov	r2, r4
 80017f2:	189b      	adds	r3, r3, r2
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	460b      	mov	r3, r1
 80017f8:	462a      	mov	r2, r5
 80017fa:	eb42 0303 	adc.w	r3, r2, r3
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800180c:	4649      	mov	r1, r9
 800180e:	008b      	lsls	r3, r1, #2
 8001810:	4641      	mov	r1, r8
 8001812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001816:	4641      	mov	r1, r8
 8001818:	008a      	lsls	r2, r1, #2
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	4603      	mov	r3, r0
 8001820:	4622      	mov	r2, r4
 8001822:	189b      	adds	r3, r3, r2
 8001824:	67bb      	str	r3, [r7, #120]	; 0x78
 8001826:	462b      	mov	r3, r5
 8001828:	460a      	mov	r2, r1
 800182a:	eb42 0303 	adc.w	r3, r2, r3
 800182e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001830:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001834:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001838:	f7ff fb1c 	bl	8000e74 <__aeabi_ldivmod>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
    var1 = (((int64_t)calib_data->dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001844:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001848:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800184c:	b21b      	sxth	r3, r3
 800184e:	17da      	asrs	r2, r3, #31
 8001850:	673b      	str	r3, [r7, #112]	; 0x70
 8001852:	677a      	str	r2, [r7, #116]	; 0x74
 8001854:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001858:	f04f 0000 	mov.w	r0, #0
 800185c:	f04f 0100 	mov.w	r1, #0
 8001860:	0b50      	lsrs	r0, r2, #13
 8001862:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001866:	1359      	asrs	r1, r3, #13
 8001868:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800186c:	462b      	mov	r3, r5
 800186e:	fb00 f203 	mul.w	r2, r0, r3
 8001872:	4623      	mov	r3, r4
 8001874:	fb03 f301 	mul.w	r3, r3, r1
 8001878:	4413      	add	r3, r2
 800187a:	4622      	mov	r2, r4
 800187c:	fba2 1200 	umull	r1, r2, r2, r0
 8001880:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001884:	460a      	mov	r2, r1
 8001886:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800188a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800188e:	4413      	add	r3, r2
 8001890:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001894:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001898:	f04f 0000 	mov.w	r0, #0
 800189c:	f04f 0100 	mov.w	r1, #0
 80018a0:	0b50      	lsrs	r0, r2, #13
 80018a2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018a6:	1359      	asrs	r1, r3, #13
 80018a8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80018ac:	462b      	mov	r3, r5
 80018ae:	fb00 f203 	mul.w	r2, r0, r3
 80018b2:	4623      	mov	r3, r4
 80018b4:	fb03 f301 	mul.w	r3, r3, r1
 80018b8:	4413      	add	r3, r2
 80018ba:	4622      	mov	r2, r4
 80018bc:	fba2 1200 	umull	r1, r2, r2, r0
 80018c0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80018c4:	460a      	mov	r2, r1
 80018c6:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80018ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80018ce:	4413      	add	r3, r2
 80018d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80018e0:	4621      	mov	r1, r4
 80018e2:	0e4a      	lsrs	r2, r1, #25
 80018e4:	4629      	mov	r1, r5
 80018e6:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80018ea:	4629      	mov	r1, r5
 80018ec:	164b      	asrs	r3, r1, #25
 80018ee:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
    var2 = (((int64_t)calib_data->dig_P8) * p) >> 19;
 80018f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018f6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	17da      	asrs	r2, r3, #31
 80018fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8001900:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001902:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001906:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800190a:	462a      	mov	r2, r5
 800190c:	fb02 f203 	mul.w	r2, r2, r3
 8001910:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001914:	4621      	mov	r1, r4
 8001916:	fb01 f303 	mul.w	r3, r1, r3
 800191a:	4413      	add	r3, r2
 800191c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001920:	4621      	mov	r1, r4
 8001922:	fba2 1201 	umull	r1, r2, r2, r1
 8001926:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800192a:	460a      	mov	r2, r1
 800192c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001930:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001934:	4413      	add	r3, r2
 8001936:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001946:	4621      	mov	r1, r4
 8001948:	0cca      	lsrs	r2, r1, #19
 800194a:	4629      	mov	r1, r5
 800194c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001950:	4629      	mov	r1, r5
 8001952:	14cb      	asrs	r3, r1, #19
 8001954:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

    p = ((p + var1 + var2) >> 8) + (((int64_t)calib_data->dig_P7) << 4);
 8001958:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800195c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001960:	1884      	adds	r4, r0, r2
 8001962:	663c      	str	r4, [r7, #96]	; 0x60
 8001964:	eb41 0303 	adc.w	r3, r1, r3
 8001968:	667b      	str	r3, [r7, #100]	; 0x64
 800196a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800196e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001972:	4621      	mov	r1, r4
 8001974:	1889      	adds	r1, r1, r2
 8001976:	65b9      	str	r1, [r7, #88]	; 0x58
 8001978:	4629      	mov	r1, r5
 800197a:	eb43 0101 	adc.w	r1, r3, r1
 800197e:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001980:	f04f 0000 	mov.w	r0, #0
 8001984:	f04f 0100 	mov.w	r1, #0
 8001988:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800198c:	4623      	mov	r3, r4
 800198e:	0a18      	lsrs	r0, r3, #8
 8001990:	462b      	mov	r3, r5
 8001992:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001996:	462b      	mov	r3, r5
 8001998:	1219      	asrs	r1, r3, #8
 800199a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800199e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80019a2:	b21b      	sxth	r3, r3
 80019a4:	17da      	asrs	r2, r3, #31
 80019a6:	653b      	str	r3, [r7, #80]	; 0x50
 80019a8:	657a      	str	r2, [r7, #84]	; 0x54
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80019b6:	464c      	mov	r4, r9
 80019b8:	0123      	lsls	r3, r4, #4
 80019ba:	4644      	mov	r4, r8
 80019bc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80019c0:	4644      	mov	r4, r8
 80019c2:	0122      	lsls	r2, r4, #4
 80019c4:	1884      	adds	r4, r0, r2
 80019c6:	603c      	str	r4, [r7, #0]
 80019c8:	eb41 0303 	adc.w	r3, r1, r3
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019d2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
    return (float)p / 25600.0; // Convert to hPa
 80019d6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80019da:	f7ff fa0d 	bl	8000df8 <__aeabi_l2f>
 80019de:	ee06 0a90 	vmov	s13, r0
 80019e2:	ed1f 7aa9 	vldr	s14, [pc, #-676]	; 8001740 <BMP280_ReadPressure+0x30c>
 80019e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 80019ea:	eeb0 0a67 	vmov.f32	s0, s15
 80019ee:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80019f2:	46bd      	mov	sp, r7
 80019f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080019f8 <Setup>:

void Setup (float *start_temperature, float *start_pressure, float *StartHeight)
{
 80019f8:	b5b0      	push	{r4, r5, r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
	  *StartHeight = (-((k * (*start_temperature + 273)) / ((M * pow(10, -23)) * g)) * log (*start_pressure / P0));
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	edd3 7a00 	vldr	s15, [r3]
 8001a0a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001a98 <Setup+0xa0>
 8001a0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a12:	ee17 0a90 	vmov	r0, s15
 8001a16:	f7fe fd9f 	bl	8000558 <__aeabi_f2d>
 8001a1a:	a31b      	add	r3, pc, #108	; (adr r3, 8001a88 <Setup+0x90>)
 8001a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a20:	f7fe fdf2 	bl	8000608 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	a318      	add	r3, pc, #96	; (adr r3, 8001a90 <Setup+0x98>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	f7fe ff13 	bl	800085c <__aeabi_ddiv>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4614      	mov	r4, r2
 8001a3c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	edd3 7a00 	vldr	s15, [r3]
 8001a46:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001a9c <Setup+0xa4>
 8001a4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a4e:	ee16 0a90 	vmov	r0, s13
 8001a52:	f7fe fd81 	bl	8000558 <__aeabi_f2d>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	ec43 2b10 	vmov	d0, r2, r3
 8001a5e:	f006 fcbf 	bl	80083e0 <log>
 8001a62:	ec53 2b10 	vmov	r2, r3, d0
 8001a66:	4620      	mov	r0, r4
 8001a68:	4629      	mov	r1, r5
 8001a6a:	f7fe fdcd 	bl	8000608 <__aeabi_dmul>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7ff f89f 	bl	8000bb8 <__aeabi_d2f>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	601a      	str	r2, [r3, #0]
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bdb0      	pop	{r4, r5, r7, pc}
 8001a88:	e147ae14 	.word	0xe147ae14
 8001a8c:	3ff6147a 	.word	0x3ff6147a
 8001a90:	6199ec5a 	.word	0x6199ec5a
 8001a94:	3b819125 	.word	0x3b819125
 8001a98:	43888000 	.word	0x43888000
 8001a9c:	447d4000 	.word	0x447d4000

08001aa0 <Delta_Height>:

void Delta_Height (float *StartHeight, float *height, float *DeltaHeight, float *pressure, float *temperature)
{
 8001aa0:	b5b0      	push	{r4, r5, r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	603b      	str	r3, [r7, #0]

	*height = (-((k * (*temperature + 273)) / ((M * pow(10, -23)) * g)) * log (*pressure / P0));
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001b58 <Delta_Height+0xb8>
 8001ab8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001abc:	ee17 0a90 	vmov	r0, s15
 8001ac0:	f7fe fd4a 	bl	8000558 <__aeabi_f2d>
 8001ac4:	a320      	add	r3, pc, #128	; (adr r3, 8001b48 <Delta_Height+0xa8>)
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	f7fe fd9d 	bl	8000608 <__aeabi_dmul>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	a31e      	add	r3, pc, #120	; (adr r3, 8001b50 <Delta_Height+0xb0>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	f7fe febe 	bl	800085c <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4614      	mov	r4, r2
 8001ae6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001b5c <Delta_Height+0xbc>
 8001af4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001af8:	ee16 0a90 	vmov	r0, s13
 8001afc:	f7fe fd2c 	bl	8000558 <__aeabi_f2d>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	ec43 2b10 	vmov	d0, r2, r3
 8001b08:	f006 fc6a 	bl	80083e0 <log>
 8001b0c:	ec53 2b10 	vmov	r2, r3, d0
 8001b10:	4620      	mov	r0, r4
 8001b12:	4629      	mov	r1, r5
 8001b14:	f7fe fd78 	bl	8000608 <__aeabi_dmul>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f7ff f84a 	bl	8000bb8 <__aeabi_d2f>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	601a      	str	r2, [r3, #0]
	*DeltaHeight = *StartHeight - *height;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	ed93 7a00 	vldr	s14, [r3]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	edc3 7a00 	vstr	s15, [r3]
}
 8001b40:	bf00      	nop
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bdb0      	pop	{r4, r5, r7, pc}
 8001b48:	e147ae14 	.word	0xe147ae14
 8001b4c:	3ff6147a 	.word	0x3ff6147a
 8001b50:	6199ec5a 	.word	0x6199ec5a
 8001b54:	3b819125 	.word	0x3b819125
 8001b58:	43888000 	.word	0x43888000
 8001b5c:	447d4000 	.word	0x447d4000

08001b60 <USART_Transmit>:

extern UART_HandleTypeDef huart1;
extern float arr_accel_x, arr_accel_y, arr_accel_z, arr_gyro_x, arr_gyro_y, arr_gyro_z, Kalman_accel_x, Kalman_accel_y, Kalman_accel_z, Kalman_gyro_x, Kalman_gyro_y, Kalman_gyro_z, start_pressure, start_temperature, StartHeight, pressure, temperature, height, DeltaHeight;

void USART_Transmit (uint8_t *data, uint16_t length)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit (&huart1, data, length, HAL_MAX_DELAY);
 8001b6c:	887a      	ldrh	r2, [r7, #2]
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4803      	ldr	r0, [pc, #12]	; (8001b84 <USART_Transmit+0x24>)
 8001b76:	f003 f9dd 	bl	8004f34 <HAL_UART_Transmit>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200002c0 	.word	0x200002c0

08001b88 <Transmit_Data>:

void Transmit_Data(float *arr_accel_x, float *arr_accel_y, float *arr_accel_z, float *arr_gyro_x, float *arr_gyro_y, float *arr_gyro_z, float *Kalman_accel_x, float *Kalman_accel_y, float *Kalman_accel_z, float *Kalman_gyro_x, float *Kalman_gyro_y, float *Kalman_gyro_z, float *start_pressure, float *start_temperature, float *StartHeight, float *pressure, float *temperature, float *height, float *DeltaHeight)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b094      	sub	sp, #80	; 0x50
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
    char buffer[64];

    sprintf(buffer, "X%f", *arr_accel_x);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fcdc 	bl	8000558 <__aeabi_f2d>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	f107 0010 	add.w	r0, r7, #16
 8001ba8:	49d5      	ldr	r1, [pc, #852]	; (8001f00 <Transmit_Data+0x378>)
 8001baa:	f004 fab9 	bl	8006120 <siprintf>
    USART_Transmit((uint8_t *)buffer, strlen(buffer));
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fb64 	bl	8000280 <strlen>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	f107 0310 	add.w	r3, r7, #16
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ffcc 	bl	8001b60 <USART_Transmit>

    sprintf(buffer, "Y%f", *arr_accel_y);
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fcc3 	bl	8000558 <__aeabi_f2d>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	f107 0010 	add.w	r0, r7, #16
 8001bda:	49ca      	ldr	r1, [pc, #808]	; (8001f04 <Transmit_Data+0x37c>)
 8001bdc:	f004 faa0 	bl	8006120 <siprintf>
    USART_Transmit((uint8_t *)buffer, strlen(buffer));
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fb4b 	bl	8000280 <strlen>
 8001bea:	4603      	mov	r3, r0
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	f107 0310 	add.w	r3, r7, #16
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ffb3 	bl	8001b60 <USART_Transmit>

    sprintf(buffer, "Z%f", *arr_accel_z);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fcaa 	bl	8000558 <__aeabi_f2d>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	f107 0010 	add.w	r0, r7, #16
 8001c0c:	49be      	ldr	r1, [pc, #760]	; (8001f08 <Transmit_Data+0x380>)
 8001c0e:	f004 fa87 	bl	8006120 <siprintf>
    USART_Transmit((uint8_t *)buffer, strlen(buffer));
 8001c12:	f107 0310 	add.w	r3, r7, #16
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fb32 	bl	8000280 <strlen>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4611      	mov	r1, r2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ff9a 	bl	8001b60 <USART_Transmit>

    sprintf(buffer, "GX%f", *arr_gyro_x);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc91 	bl	8000558 <__aeabi_f2d>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	f107 0010 	add.w	r0, r7, #16
 8001c3e:	49b3      	ldr	r1, [pc, #716]	; (8001f0c <Transmit_Data+0x384>)
 8001c40:	f004 fa6e 	bl	8006120 <siprintf>
    USART_Transmit((uint8_t *)buffer, strlen(buffer));
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fb19 	bl	8000280 <strlen>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	f107 0310 	add.w	r3, r7, #16
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff81 	bl	8001b60 <USART_Transmit>

    sprintf(buffer, "GY%f", *arr_gyro_y);
 8001c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc78 	bl	8000558 <__aeabi_f2d>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	f107 0010 	add.w	r0, r7, #16
 8001c70:	49a7      	ldr	r1, [pc, #668]	; (8001f10 <Transmit_Data+0x388>)
 8001c72:	f004 fa55 	bl	8006120 <siprintf>
    USART_Transmit((uint8_t *)buffer, strlen(buffer));
 8001c76:	f107 0310 	add.w	r3, r7, #16
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fb00 	bl	8000280 <strlen>
 8001c80:	4603      	mov	r3, r0
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	4611      	mov	r1, r2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ff68 	bl	8001b60 <USART_Transmit>

    sprintf(buffer, "GZ%f", *arr_gyro_z);
 8001c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc5f 	bl	8000558 <__aeabi_f2d>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	f107 0010 	add.w	r0, r7, #16
 8001ca2:	499c      	ldr	r1, [pc, #624]	; (8001f14 <Transmit_Data+0x38c>)
 8001ca4:	f004 fa3c 	bl	8006120 <siprintf>
    USART_Transmit((uint8_t *)buffer, strlen(buffer));
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fae7 	bl	8000280 <strlen>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	f107 0310 	add.w	r3, r7, #16
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff4f 	bl	8001b60 <USART_Transmit>

    sprintf(buffer, "KAX%f", *Kalman_accel_x);
 8001cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fc46 	bl	8000558 <__aeabi_f2d>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	f107 0010 	add.w	r0, r7, #16
 8001cd4:	4990      	ldr	r1, [pc, #576]	; (8001f18 <Transmit_Data+0x390>)
 8001cd6:	f004 fa23 	bl	8006120 <siprintf>
    USART_Transmit((uint8_t *)buffer, strlen(buffer));
 8001cda:	f107 0310 	add.w	r3, r7, #16
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe face 	bl	8000280 <strlen>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff36 	bl	8001b60 <USART_Transmit>

    sprintf(buffer, "KAY%f", *Kalman_accel_y);
 8001cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fc2d 	bl	8000558 <__aeabi_f2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	f107 0010 	add.w	r0, r7, #16
 8001d06:	4985      	ldr	r1, [pc, #532]	; (8001f1c <Transmit_Data+0x394>)
 8001d08:	f004 fa0a 	bl	8006120 <siprintf>
    USART_Transmit((uint8_t *)buffer, strlen(buffer));
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fab5 	bl	8000280 <strlen>
 8001d16:	4603      	mov	r3, r0
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	f107 0310 	add.w	r3, r7, #16
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff1d 	bl	8001b60 <USART_Transmit>

    sprintf(buffer, "KAZ%f", *Kalman_accel_z);
 8001d26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fc14 	bl	8000558 <__aeabi_f2d>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	f107 0010 	add.w	r0, r7, #16
 8001d38:	4979      	ldr	r1, [pc, #484]	; (8001f20 <Transmit_Data+0x398>)
 8001d3a:	f004 f9f1 	bl	8006120 <siprintf>
    USART_Transmit((uint8_t *)buffer, strlen(buffer));
 8001d3e:	f107 0310 	add.w	r3, r7, #16
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fa9c 	bl	8000280 <strlen>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff04 	bl	8001b60 <USART_Transmit>

    sprintf(buffer, "KGX%f", *Kalman_gyro_x);
 8001d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fbfb 	bl	8000558 <__aeabi_f2d>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	f107 0010 	add.w	r0, r7, #16
 8001d6a:	496e      	ldr	r1, [pc, #440]	; (8001f24 <Transmit_Data+0x39c>)
 8001d6c:	f004 f9d8 	bl	8006120 <siprintf>
    USART_Transmit((uint8_t *)buffer, strlen(buffer));
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fa83 	bl	8000280 <strlen>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	f107 0310 	add.w	r3, r7, #16
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff feeb 	bl	8001b60 <USART_Transmit>

    sprintf(buffer, "KGY%f", *Kalman_gyro_y);
 8001d8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fbe2 	bl	8000558 <__aeabi_f2d>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	f107 0010 	add.w	r0, r7, #16
 8001d9c:	4962      	ldr	r1, [pc, #392]	; (8001f28 <Transmit_Data+0x3a0>)
 8001d9e:	f004 f9bf 	bl	8006120 <siprintf>
    USART_Transmit((uint8_t *)buffer, strlen(buffer));
 8001da2:	f107 0310 	add.w	r3, r7, #16
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fa6a 	bl	8000280 <strlen>
 8001dac:	4603      	mov	r3, r0
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	f107 0310 	add.w	r3, r7, #16
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fed2 	bl	8001b60 <USART_Transmit>

    sprintf(buffer, "KGZ%f", *Kalman_gyro_z);
 8001dbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbc9 	bl	8000558 <__aeabi_f2d>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	f107 0010 	add.w	r0, r7, #16
 8001dce:	4957      	ldr	r1, [pc, #348]	; (8001f2c <Transmit_Data+0x3a4>)
 8001dd0:	f004 f9a6 	bl	8006120 <siprintf>
    USART_Transmit((uint8_t *)buffer, strlen(buffer));
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fa51 	bl	8000280 <strlen>
 8001dde:	4603      	mov	r3, r0
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	f107 0310 	add.w	r3, r7, #16
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff feb9 	bl	8001b60 <USART_Transmit>

    sprintf(buffer, "SP%f", *start_pressure);
 8001dee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fbb0 	bl	8000558 <__aeabi_f2d>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	f107 0010 	add.w	r0, r7, #16
 8001e00:	494b      	ldr	r1, [pc, #300]	; (8001f30 <Transmit_Data+0x3a8>)
 8001e02:	f004 f98d 	bl	8006120 <siprintf>
    USART_Transmit((uint8_t *)buffer, strlen(buffer));
 8001e06:	f107 0310 	add.w	r3, r7, #16
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fa38 	bl	8000280 <strlen>
 8001e10:	4603      	mov	r3, r0
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	f107 0310 	add.w	r3, r7, #16
 8001e18:	4611      	mov	r1, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fea0 	bl	8001b60 <USART_Transmit>

    sprintf(buffer, "ST%f", *start_temperature);
 8001e20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fb97 	bl	8000558 <__aeabi_f2d>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	f107 0010 	add.w	r0, r7, #16
 8001e32:	4940      	ldr	r1, [pc, #256]	; (8001f34 <Transmit_Data+0x3ac>)
 8001e34:	f004 f974 	bl	8006120 <siprintf>
    USART_Transmit((uint8_t *)buffer, strlen(buffer));
 8001e38:	f107 0310 	add.w	r3, r7, #16
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fa1f 	bl	8000280 <strlen>
 8001e42:	4603      	mov	r3, r0
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	f107 0310 	add.w	r3, r7, #16
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fe87 	bl	8001b60 <USART_Transmit>

    sprintf(buffer, "SH%f", *StartHeight);
 8001e52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fb7d 	bl	8000558 <__aeabi_f2d>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	f107 0010 	add.w	r0, r7, #16
 8001e66:	4934      	ldr	r1, [pc, #208]	; (8001f38 <Transmit_Data+0x3b0>)
 8001e68:	f004 f95a 	bl	8006120 <siprintf>
    USART_Transmit((uint8_t *)buffer, strlen(buffer));
 8001e6c:	f107 0310 	add.w	r3, r7, #16
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fa05 	bl	8000280 <strlen>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	f107 0310 	add.w	r3, r7, #16
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fe6d 	bl	8001b60 <USART_Transmit>

    sprintf(buffer, "P%f", *pressure);
 8001e86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fb63 	bl	8000558 <__aeabi_f2d>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	f107 0010 	add.w	r0, r7, #16
 8001e9a:	4928      	ldr	r1, [pc, #160]	; (8001f3c <Transmit_Data+0x3b4>)
 8001e9c:	f004 f940 	bl	8006120 <siprintf>
    USART_Transmit((uint8_t *)buffer, strlen(buffer));
 8001ea0:	f107 0310 	add.w	r3, r7, #16
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe f9eb 	bl	8000280 <strlen>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	f107 0310 	add.w	r3, r7, #16
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fe53 	bl	8001b60 <USART_Transmit>

    sprintf(buffer, "T%f", *temperature);
 8001eba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fb49 	bl	8000558 <__aeabi_f2d>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	f107 0010 	add.w	r0, r7, #16
 8001ece:	491c      	ldr	r1, [pc, #112]	; (8001f40 <Transmit_Data+0x3b8>)
 8001ed0:	f004 f926 	bl	8006120 <siprintf>
    USART_Transmit((uint8_t *)buffer, strlen(buffer));
 8001ed4:	f107 0310 	add.w	r3, r7, #16
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe f9d1 	bl	8000280 <strlen>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	f107 0310 	add.w	r3, r7, #16
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fe39 	bl	8001b60 <USART_Transmit>

    sprintf(buffer, "H%f", *height);
 8001eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fb2f 	bl	8000558 <__aeabi_f2d>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	e021      	b.n	8001f44 <Transmit_Data+0x3bc>
 8001f00:	08008808 	.word	0x08008808
 8001f04:	0800880c 	.word	0x0800880c
 8001f08:	08008810 	.word	0x08008810
 8001f0c:	08008814 	.word	0x08008814
 8001f10:	0800881c 	.word	0x0800881c
 8001f14:	08008824 	.word	0x08008824
 8001f18:	0800882c 	.word	0x0800882c
 8001f1c:	08008834 	.word	0x08008834
 8001f20:	0800883c 	.word	0x0800883c
 8001f24:	08008844 	.word	0x08008844
 8001f28:	0800884c 	.word	0x0800884c
 8001f2c:	08008854 	.word	0x08008854
 8001f30:	0800885c 	.word	0x0800885c
 8001f34:	08008864 	.word	0x08008864
 8001f38:	0800886c 	.word	0x0800886c
 8001f3c:	08008874 	.word	0x08008874
 8001f40:	08008878 	.word	0x08008878
 8001f44:	f107 0010 	add.w	r0, r7, #16
 8001f48:	4916      	ldr	r1, [pc, #88]	; (8001fa4 <Transmit_Data+0x41c>)
 8001f4a:	f004 f8e9 	bl	8006120 <siprintf>
    USART_Transmit((uint8_t *)buffer, strlen(buffer));
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe f994 	bl	8000280 <strlen>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fdfc 	bl	8001b60 <USART_Transmit>

    sprintf(buffer, "DH%f", *DeltaHeight);
 8001f68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe faf2 	bl	8000558 <__aeabi_f2d>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	f107 0010 	add.w	r0, r7, #16
 8001f7c:	490a      	ldr	r1, [pc, #40]	; (8001fa8 <Transmit_Data+0x420>)
 8001f7e:	f004 f8cf 	bl	8006120 <siprintf>
    USART_Transmit((uint8_t *)buffer, strlen(buffer));
 8001f82:	f107 0310 	add.w	r3, r7, #16
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe f97a 	bl	8000280 <strlen>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fde2 	bl	8001b60 <USART_Transmit>
}
 8001f9c:	bf00      	nop
 8001f9e:	3750      	adds	r7, #80	; 0x50
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	0800887c 	.word	0x0800887c
 8001fa8:	08008880 	.word	0x08008880

08001fac <initKalmanFilterAccel>:

float x_gyro = 0;
float P_gyro = 1;

void initKalmanFilterAccel(KalmanFilterAccel *filter) // Function to initialize Kalman filter for accelerometer
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
    filter->x = 0;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
    filter->P = 1;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fc2:	605a      	str	r2, [r3, #4]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <initKalmanFilterGyro>:

void initKalmanFilterGyro(KalmanFilterGyro *filter) // Function to initialize Kalman filter for gyroscope
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
    filter->x = 0;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
    filter->P = 1;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fe6:	605a      	str	r2, [r3, #4]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <KalmanFilterUpdateAccel>:

void KalmanFilterUpdateAccel(KalmanFilterAccel *filter, float z, float R, float H) // Function to update Kalman filter for accelerometer
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	; 0x24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	ed87 0a02 	vstr	s0, [r7, #8]
 8002000:	edc7 0a01 	vstr	s1, [r7, #4]
 8002004:	ed87 1a00 	vstr	s2, [r7]
    float x_pred = filter->x;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	61fb      	str	r3, [r7, #28]
    float P_pred = filter->P;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61bb      	str	r3, [r7, #24]

    float K = P_pred * H / (H * P_pred * H + R);
 8002014:	ed97 7a06 	vldr	s14, [r7, #24]
 8002018:	edd7 7a00 	vldr	s15, [r7]
 800201c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002020:	ed97 7a00 	vldr	s14, [r7]
 8002024:	edd7 7a06 	vldr	s15, [r7, #24]
 8002028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800202c:	edd7 7a00 	vldr	s15, [r7]
 8002030:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002034:	edd7 7a01 	vldr	s15, [r7, #4]
 8002038:	ee37 7a27 	vadd.f32	s14, s14, s15
 800203c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002040:	edc7 7a05 	vstr	s15, [r7, #20]
    filter->x = x_pred + K * (z - H * x_pred);
 8002044:	ed97 7a00 	vldr	s14, [r7]
 8002048:	edd7 7a07 	vldr	s15, [r7, #28]
 800204c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002050:	ed97 7a02 	vldr	s14, [r7, #8]
 8002054:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002058:	edd7 7a05 	vldr	s15, [r7, #20]
 800205c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002060:	edd7 7a07 	vldr	s15, [r7, #28]
 8002064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	edc3 7a00 	vstr	s15, [r3]
    filter->P = (1 - K * H) * P_pred;
 800206e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002072:	edd7 7a00 	vldr	s15, [r7]
 8002076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800207e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002082:	edd7 7a06 	vldr	s15, [r7, #24]
 8002086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8002090:	bf00      	nop
 8002092:	3724      	adds	r7, #36	; 0x24
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <KalmanFilterUpdateGyro>:

void KalmanFilterUpdateGyro(KalmanFilterGyro *filter, float z, float R, float H) // Function to update Kalman filter for gyroscope
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80020a8:	edc7 0a01 	vstr	s1, [r7, #4]
 80020ac:	ed87 1a00 	vstr	s2, [r7]
    float x_pred = filter->x;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	61fb      	str	r3, [r7, #28]
    float P_pred = filter->P;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]

    float K = P_pred * H / (H * P_pred * H + R);
 80020bc:	ed97 7a06 	vldr	s14, [r7, #24]
 80020c0:	edd7 7a00 	vldr	s15, [r7]
 80020c4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80020c8:	ed97 7a00 	vldr	s14, [r7]
 80020cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80020d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d4:	edd7 7a00 	vldr	s15, [r7]
 80020d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80020e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020e8:	edc7 7a05 	vstr	s15, [r7, #20]
    filter->x = x_pred + K * (z - H * x_pred);
 80020ec:	ed97 7a00 	vldr	s14, [r7]
 80020f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80020f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80020fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002100:	edd7 7a05 	vldr	s15, [r7, #20]
 8002104:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002108:	edd7 7a07 	vldr	s15, [r7, #28]
 800210c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	edc3 7a00 	vstr	s15, [r3]
    filter->P = (1 - K * H) * P_pred;
 8002116:	ed97 7a05 	vldr	s14, [r7, #20]
 800211a:	edd7 7a00 	vldr	s15, [r7]
 800211e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002126:	ee37 7a67 	vsub.f32	s14, s14, s15
 800212a:	edd7 7a06 	vldr	s15, [r7, #24]
 800212e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8002138:	bf00      	nop
 800213a:	3724      	adds	r7, #36	; 0x24
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <MPU6050_Init>:
int16_t Gyro_X_RAW = 0; // Initialization variables for 3 coordinates X, Y, Z of gyroscope
int16_t Gyro_Y_RAW = 0;
int16_t Gyro_Z_RAW = 0;

void MPU6050_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af04      	add	r7, sp, #16
    uint8_t check, Data;
    HAL_Delay(1000);
 800214a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800214e:	f000 fe17 	bl	8002d80 <HAL_Delay>
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8002152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002156:	9302      	str	r3, [sp, #8]
 8002158:	2301      	movs	r3, #1
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	1dfb      	adds	r3, r7, #7
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2301      	movs	r3, #1
 8002162:	2275      	movs	r2, #117	; 0x75
 8002164:	21d0      	movs	r1, #208	; 0xd0
 8002166:	4814      	ldr	r0, [pc, #80]	; (80021b8 <MPU6050_Init+0x74>)
 8002168:	f001 fbd4 	bl	8003914 <HAL_I2C_Mem_Read>

    if (check == 0x68)
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	2b68      	cmp	r3, #104	; 0x68
 8002170:	d11d      	bne.n	80021ae <MPU6050_Init+0x6a>
    {
        Data = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8002176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800217a:	9302      	str	r3, [sp, #8]
 800217c:	2301      	movs	r3, #1
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	1dbb      	adds	r3, r7, #6
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	2301      	movs	r3, #1
 8002186:	226b      	movs	r2, #107	; 0x6b
 8002188:	21d0      	movs	r1, #208	; 0xd0
 800218a:	480b      	ldr	r0, [pc, #44]	; (80021b8 <MPU6050_Init+0x74>)
 800218c:	f001 fac8 	bl	8003720 <HAL_I2C_Mem_Write>
        Data = 0x07;
 8002190:	2307      	movs	r3, #7
 8002192:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8002194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002198:	9302      	str	r3, [sp, #8]
 800219a:	2301      	movs	r3, #1
 800219c:	9301      	str	r3, [sp, #4]
 800219e:	1dbb      	adds	r3, r7, #6
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2301      	movs	r3, #1
 80021a4:	2219      	movs	r2, #25
 80021a6:	21d0      	movs	r1, #208	; 0xd0
 80021a8:	4803      	ldr	r0, [pc, #12]	; (80021b8 <MPU6050_Init+0x74>)
 80021aa:	f001 fab9 	bl	8003720 <HAL_I2C_Mem_Write>
    }
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000218 	.word	0x20000218

080021bc <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(float *arr_accel_x, float *arr_accel_y, float *arr_accel_z, float *Kalman_accel_x, float *Kalman_accel_y, float *Kalman_accel_z)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08e      	sub	sp, #56	; 0x38
 80021c0:	af04      	add	r7, sp, #16
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
    KalmanFilterAccel accelFilter;
    initKalmanFilterAccel(&accelFilter);
 80021ca:	f107 031c 	add.w	r3, r7, #28
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff feec 	bl	8001fac <initKalmanFilterAccel>

    for (int i = 0; i < 100; i++)
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
 80021d8:	e08b      	b.n	80022f2 <MPU6050_Read_Accel+0x136>
    {
        uint8_t Rec_Data[6];
        HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80021da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021de:	9302      	str	r3, [sp, #8]
 80021e0:	2306      	movs	r3, #6
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2301      	movs	r3, #1
 80021ec:	223b      	movs	r2, #59	; 0x3b
 80021ee:	21d0      	movs	r1, #208	; 0xd0
 80021f0:	4844      	ldr	r0, [pc, #272]	; (8002304 <MPU6050_Read_Accel+0x148>)
 80021f2:	f001 fb8f 	bl	8003914 <HAL_I2C_Mem_Read>

        Accel_X_RAW = (int16_t)(Rec_Data [0] << 8 | Rec_Data [1]);
 80021f6:	7d3b      	ldrb	r3, [r7, #20]
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	b21a      	sxth	r2, r3
 80021fc:	7d7b      	ldrb	r3, [r7, #21]
 80021fe:	b21b      	sxth	r3, r3
 8002200:	4313      	orrs	r3, r2
 8002202:	b21a      	sxth	r2, r3
 8002204:	4b40      	ldr	r3, [pc, #256]	; (8002308 <MPU6050_Read_Accel+0x14c>)
 8002206:	801a      	strh	r2, [r3, #0]
        Accel_Y_RAW = (int16_t)(Rec_Data [2] << 8 | Rec_Data [3]);
 8002208:	7dbb      	ldrb	r3, [r7, #22]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	b21a      	sxth	r2, r3
 800220e:	7dfb      	ldrb	r3, [r7, #23]
 8002210:	b21b      	sxth	r3, r3
 8002212:	4313      	orrs	r3, r2
 8002214:	b21a      	sxth	r2, r3
 8002216:	4b3d      	ldr	r3, [pc, #244]	; (800230c <MPU6050_Read_Accel+0x150>)
 8002218:	801a      	strh	r2, [r3, #0]
        Accel_Z_RAW = (int16_t)(Rec_Data [4] << 8 | Rec_Data [5]);
 800221a:	7e3b      	ldrb	r3, [r7, #24]
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	b21a      	sxth	r2, r3
 8002220:	7e7b      	ldrb	r3, [r7, #25]
 8002222:	b21b      	sxth	r3, r3
 8002224:	4313      	orrs	r3, r2
 8002226:	b21a      	sxth	r2, r3
 8002228:	4b39      	ldr	r3, [pc, #228]	; (8002310 <MPU6050_Read_Accel+0x154>)
 800222a:	801a      	strh	r2, [r3, #0]
        Ax = Accel_X_RAW / 16384.0;
 800222c:	4b36      	ldr	r3, [pc, #216]	; (8002308 <MPU6050_Read_Accel+0x14c>)
 800222e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f97e 	bl	8000534 <__aeabi_i2d>
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	4b35      	ldr	r3, [pc, #212]	; (8002314 <MPU6050_Read_Accel+0x158>)
 800223e:	f7fe fb0d 	bl	800085c <__aeabi_ddiv>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	f7fe fcb5 	bl	8000bb8 <__aeabi_d2f>
 800224e:	4603      	mov	r3, r0
 8002250:	4a31      	ldr	r2, [pc, #196]	; (8002318 <MPU6050_Read_Accel+0x15c>)
 8002252:	6013      	str	r3, [r2, #0]
        Ay = Accel_Y_RAW / 16384.0;
 8002254:	4b2d      	ldr	r3, [pc, #180]	; (800230c <MPU6050_Read_Accel+0x150>)
 8002256:	f9b3 3000 	ldrsh.w	r3, [r3]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe f96a 	bl	8000534 <__aeabi_i2d>
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <MPU6050_Read_Accel+0x158>)
 8002266:	f7fe faf9 	bl	800085c <__aeabi_ddiv>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4610      	mov	r0, r2
 8002270:	4619      	mov	r1, r3
 8002272:	f7fe fca1 	bl	8000bb8 <__aeabi_d2f>
 8002276:	4603      	mov	r3, r0
 8002278:	4a28      	ldr	r2, [pc, #160]	; (800231c <MPU6050_Read_Accel+0x160>)
 800227a:	6013      	str	r3, [r2, #0]
        Az = Accel_Z_RAW / 16384.0;
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <MPU6050_Read_Accel+0x154>)
 800227e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f956 	bl	8000534 <__aeabi_i2d>
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	4b21      	ldr	r3, [pc, #132]	; (8002314 <MPU6050_Read_Accel+0x158>)
 800228e:	f7fe fae5 	bl	800085c <__aeabi_ddiv>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	f7fe fc8d 	bl	8000bb8 <__aeabi_d2f>
 800229e:	4603      	mov	r3, r0
 80022a0:	4a1f      	ldr	r2, [pc, #124]	; (8002320 <MPU6050_Read_Accel+0x164>)
 80022a2:	6013      	str	r3, [r2, #0]

        *arr_accel_x = Ax;
 80022a4:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <MPU6050_Read_Accel+0x15c>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	601a      	str	r2, [r3, #0]
        *arr_accel_y = Ay;
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <MPU6050_Read_Accel+0x160>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	601a      	str	r2, [r3, #0]
        *arr_accel_z = Az;
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <MPU6050_Read_Accel+0x164>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	601a      	str	r2, [r3, #0]

        KalmanFilterUpdateAccel(&accelFilter, Ax, R_ACCEL, 1); // Apply Kalman filter to accelerometer data
 80022bc:	4b16      	ldr	r3, [pc, #88]	; (8002318 <MPU6050_Read_Accel+0x15c>)
 80022be:	edd3 7a00 	vldr	s15, [r3]
 80022c2:	f107 031c 	add.w	r3, r7, #28
 80022c6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80022ca:	eddf 0a16 	vldr	s1, [pc, #88]	; 8002324 <MPU6050_Read_Accel+0x168>
 80022ce:	eeb0 0a67 	vmov.f32	s0, s15
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fe8e 	bl	8001ff4 <KalmanFilterUpdateAccel>

        *Kalman_accel_x = accelFilter.x;
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	601a      	str	r2, [r3, #0]
        *Kalman_accel_y = accelFilter.P;
 80022de:	6a3a      	ldr	r2, [r7, #32]
 80022e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e2:	601a      	str	r2, [r3, #0]
        *Kalman_accel_z = Az;
 80022e4:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <MPU6050_Read_Accel+0x164>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ea:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 100; i++)
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	3301      	adds	r3, #1
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	2b63      	cmp	r3, #99	; 0x63
 80022f6:	f77f af70 	ble.w	80021da <MPU6050_Read_Accel+0x1e>
    }
}
 80022fa:	bf00      	nop
 80022fc:	bf00      	nop
 80022fe:	3728      	adds	r7, #40	; 0x28
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000218 	.word	0x20000218
 8002308:	2000020c 	.word	0x2000020c
 800230c:	2000020e 	.word	0x2000020e
 8002310:	20000210 	.word	0x20000210
 8002314:	40d00000 	.word	0x40d00000
 8002318:	200001f4 	.word	0x200001f4
 800231c:	200001f8 	.word	0x200001f8
 8002320:	200001fc 	.word	0x200001fc
 8002324:	3c23d70a 	.word	0x3c23d70a

08002328 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(float *arr_gyro_x, float *arr_gyro_y, float *arr_gyro_z, float *Kalman_gyro_x, float *Kalman_gyro_y, float *Kalman_gyro_z)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08e      	sub	sp, #56	; 0x38
 800232c:	af04      	add	r7, sp, #16
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
    KalmanFilterGyro gyroFilter;
    initKalmanFilterGyro(&gyroFilter);
 8002336:	f107 031c 	add.w	r3, r7, #28
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fe48 	bl	8001fd0 <initKalmanFilterGyro>

    for (int i = 0; i < 100; i++)
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
 8002344:	e08b      	b.n	800245e <MPU6050_Read_Gyro+0x136>
    {
        uint8_t Rec_Data[6];
        HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8002346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800234a:	9302      	str	r3, [sp, #8]
 800234c:	2306      	movs	r3, #6
 800234e:	9301      	str	r3, [sp, #4]
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2301      	movs	r3, #1
 8002358:	2243      	movs	r2, #67	; 0x43
 800235a:	21d0      	movs	r1, #208	; 0xd0
 800235c:	4846      	ldr	r0, [pc, #280]	; (8002478 <MPU6050_Read_Gyro+0x150>)
 800235e:	f001 fad9 	bl	8003914 <HAL_I2C_Mem_Read>
        Gyro_X_RAW = (int16_t)(Rec_Data [0] << 8 | Rec_Data [1]);
 8002362:	7d3b      	ldrb	r3, [r7, #20]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	b21a      	sxth	r2, r3
 8002368:	7d7b      	ldrb	r3, [r7, #21]
 800236a:	b21b      	sxth	r3, r3
 800236c:	4313      	orrs	r3, r2
 800236e:	b21a      	sxth	r2, r3
 8002370:	4b42      	ldr	r3, [pc, #264]	; (800247c <MPU6050_Read_Gyro+0x154>)
 8002372:	801a      	strh	r2, [r3, #0]
        Gyro_Y_RAW = (int16_t)(Rec_Data [2] << 8 | Rec_Data [3]);
 8002374:	7dbb      	ldrb	r3, [r7, #22]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	b21a      	sxth	r2, r3
 800237a:	7dfb      	ldrb	r3, [r7, #23]
 800237c:	b21b      	sxth	r3, r3
 800237e:	4313      	orrs	r3, r2
 8002380:	b21a      	sxth	r2, r3
 8002382:	4b3f      	ldr	r3, [pc, #252]	; (8002480 <MPU6050_Read_Gyro+0x158>)
 8002384:	801a      	strh	r2, [r3, #0]
        Gyro_Z_RAW = (int16_t)(Rec_Data [4] << 8 | Rec_Data [5]);
 8002386:	7e3b      	ldrb	r3, [r7, #24]
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	b21a      	sxth	r2, r3
 800238c:	7e7b      	ldrb	r3, [r7, #25]
 800238e:	b21b      	sxth	r3, r3
 8002390:	4313      	orrs	r3, r2
 8002392:	b21a      	sxth	r2, r3
 8002394:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <MPU6050_Read_Gyro+0x15c>)
 8002396:	801a      	strh	r2, [r3, #0]
        Gx = Gyro_X_RAW / 131.0;
 8002398:	4b38      	ldr	r3, [pc, #224]	; (800247c <MPU6050_Read_Gyro+0x154>)
 800239a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe f8c8 	bl	8000534 <__aeabi_i2d>
 80023a4:	a332      	add	r3, pc, #200	; (adr r3, 8002470 <MPU6050_Read_Gyro+0x148>)
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	f7fe fa57 	bl	800085c <__aeabi_ddiv>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4610      	mov	r0, r2
 80023b4:	4619      	mov	r1, r3
 80023b6:	f7fe fbff 	bl	8000bb8 <__aeabi_d2f>
 80023ba:	4603      	mov	r3, r0
 80023bc:	4a32      	ldr	r2, [pc, #200]	; (8002488 <MPU6050_Read_Gyro+0x160>)
 80023be:	6013      	str	r3, [r2, #0]
        Gy = Gyro_Y_RAW / 131.0;
 80023c0:	4b2f      	ldr	r3, [pc, #188]	; (8002480 <MPU6050_Read_Gyro+0x158>)
 80023c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe f8b4 	bl	8000534 <__aeabi_i2d>
 80023cc:	a328      	add	r3, pc, #160	; (adr r3, 8002470 <MPU6050_Read_Gyro+0x148>)
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	f7fe fa43 	bl	800085c <__aeabi_ddiv>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	f7fe fbeb 	bl	8000bb8 <__aeabi_d2f>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4a29      	ldr	r2, [pc, #164]	; (800248c <MPU6050_Read_Gyro+0x164>)
 80023e6:	6013      	str	r3, [r2, #0]
        Gz = Gyro_Z_RAW / 131.0;
 80023e8:	4b26      	ldr	r3, [pc, #152]	; (8002484 <MPU6050_Read_Gyro+0x15c>)
 80023ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f8a0 	bl	8000534 <__aeabi_i2d>
 80023f4:	a31e      	add	r3, pc, #120	; (adr r3, 8002470 <MPU6050_Read_Gyro+0x148>)
 80023f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fa:	f7fe fa2f 	bl	800085c <__aeabi_ddiv>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	f7fe fbd7 	bl	8000bb8 <__aeabi_d2f>
 800240a:	4603      	mov	r3, r0
 800240c:	4a20      	ldr	r2, [pc, #128]	; (8002490 <MPU6050_Read_Gyro+0x168>)
 800240e:	6013      	str	r3, [r2, #0]

        *arr_gyro_x = Gx;
 8002410:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <MPU6050_Read_Gyro+0x160>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	601a      	str	r2, [r3, #0]
        *arr_gyro_y = Gy;
 8002418:	4b1c      	ldr	r3, [pc, #112]	; (800248c <MPU6050_Read_Gyro+0x164>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	601a      	str	r2, [r3, #0]
        *arr_gyro_z = Gz;
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <MPU6050_Read_Gyro+0x168>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	601a      	str	r2, [r3, #0]

        KalmanFilterUpdateGyro(&gyroFilter, Gz, R_GYRO, 1); // Apply Kalman filter to gyroscope data
 8002428:	4b19      	ldr	r3, [pc, #100]	; (8002490 <MPU6050_Read_Gyro+0x168>)
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002436:	eddf 0a17 	vldr	s1, [pc, #92]	; 8002494 <MPU6050_Read_Gyro+0x16c>
 800243a:	eeb0 0a67 	vmov.f32	s0, s15
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fe2c 	bl	800209c <KalmanFilterUpdateGyro>

        *Kalman_gyro_x = gyroFilter.x;
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	601a      	str	r2, [r3, #0]
        *Kalman_gyro_y = gyroFilter.P;
 800244a:	6a3a      	ldr	r2, [r7, #32]
 800244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244e:	601a      	str	r2, [r3, #0]
        *Kalman_gyro_z = Gz;
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <MPU6050_Read_Gyro+0x168>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002456:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 100; i++)
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	3301      	adds	r3, #1
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	2b63      	cmp	r3, #99	; 0x63
 8002462:	f77f af70 	ble.w	8002346 <MPU6050_Read_Gyro+0x1e>
    }
}
 8002466:	bf00      	nop
 8002468:	bf00      	nop
 800246a:	3728      	adds	r7, #40	; 0x28
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	00000000 	.word	0x00000000
 8002474:	40606000 	.word	0x40606000
 8002478:	20000218 	.word	0x20000218
 800247c:	20000212 	.word	0x20000212
 8002480:	20000214 	.word	0x20000214
 8002484:	20000216 	.word	0x20000216
 8002488:	20000200 	.word	0x20000200
 800248c:	20000204 	.word	0x20000204
 8002490:	20000208 	.word	0x20000208
 8002494:	3c23d70a 	.word	0x3c23d70a

08002498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b0ab      	sub	sp, #172	; 0xac
 800249c:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE BEGIN 1 */
	float arr_accel_x, arr_accel_y, arr_accel_z, arr_gyro_x, arr_gyro_y, arr_gyro_z;
	float Kalman_accel_x, Kalman_accel_y, Kalman_accel_z, Kalman_gyro_x, Kalman_gyro_y, Kalman_gyro_z;
	float start_pressure = 0;
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	637b      	str	r3, [r7, #52]	; 0x34
	float start_temperature = 0;
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	633b      	str	r3, [r7, #48]	; 0x30
	float StartHeight = 0;
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	float pressure = 0;
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
	float temperature = 0;
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
	float height = 0;
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
	float DeltaHeight = 0;
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024c8:	f000 fbe8 	bl	8002c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024cc:	f000 f8aa 	bl	8002624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024d0:	f000 f98e 	bl	80027f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80024d4:	f000 f906 	bl	80026e4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80024d8:	f000 f932 	bl	8002740 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80024dc:	f000 f95e 	bl	800279c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 80024e0:	f7ff fe30 	bl	8002144 <MPU6050_Init>
  BMP280_Init();
 80024e4:	f7fe ff22 	bl	800132c <BMP280_Init>
  BMP280_ReadCalibrationData(&hi2c2, &calib_data);
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	4619      	mov	r1, r3
 80024ec:	484c      	ldr	r0, [pc, #304]	; (8002620 <main+0x188>)
 80024ee:	f7fe fe8f 	bl	8001210 <BMP280_ReadCalibrationData>

  start_temperature = BMP280_ReadTemperature(&hi2c2, &calib_data);
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	484a      	ldr	r0, [pc, #296]	; (8002620 <main+0x188>)
 80024f8:	f7fe ff3a 	bl	8001370 <BMP280_ReadTemperature>
 80024fc:	eef0 7a40 	vmov.f32	s15, s0
 8002500:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  start_pressure = BMP280_ReadPressure(&hi2c2, &calib_data);
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	4619      	mov	r1, r3
 8002508:	4845      	ldr	r0, [pc, #276]	; (8002620 <main+0x188>)
 800250a:	f7fe ff93 	bl	8001434 <BMP280_ReadPressure>
 800250e:	eef0 7a40 	vmov.f32	s15, s0
 8002512:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

  Setup (&start_pressure, &start_temperature, &StartHeight);
 8002516:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800251a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800251e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fa68 	bl	80019f8 <Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MPU6050_Read_Accel(&arr_accel_x, &arr_accel_y, &arr_accel_z, &Kalman_accel_x, &Kalman_accel_y, &Kalman_accel_z);
 8002528:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800252c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002530:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002534:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002538:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	4623      	mov	r3, r4
 8002546:	f7ff fe39 	bl	80021bc <MPU6050_Read_Accel>
	MPU6050_Read_Gyro(&arr_gyro_x, &arr_gyro_y, &arr_gyro_z, &Kalman_gyro_x, &Kalman_gyro_y, &Kalman_gyro_z);
 800254a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800254e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002552:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002556:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800255a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	4623      	mov	r3, r4
 8002568:	f7ff fede 	bl	8002328 <MPU6050_Read_Gyro>

	pressure = BMP280_ReadPressure(&hi2c2, &calib_data);
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	4619      	mov	r1, r3
 8002570:	482b      	ldr	r0, [pc, #172]	; (8002620 <main+0x188>)
 8002572:	f7fe ff5f 	bl	8001434 <BMP280_ReadPressure>
 8002576:	eef0 7a40 	vmov.f32	s15, s0
 800257a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	temperature = BMP280_ReadTemperature (&hi2c2, &calib_data);
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	4619      	mov	r1, r3
 8002582:	4827      	ldr	r0, [pc, #156]	; (8002620 <main+0x188>)
 8002584:	f7fe fef4 	bl	8001370 <BMP280_ReadTemperature>
 8002588:	eef0 7a40 	vmov.f32	s15, s0
 800258c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	Delta_Height (&StartHeight, &height, &DeltaHeight, &pressure, &temperature);
 8002590:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002594:	f107 021c 	add.w	r2, r7, #28
 8002598:	f107 0120 	add.w	r1, r7, #32
 800259c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80025a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	4623      	mov	r3, r4
 80025a8:	f7ff fa7a 	bl	8001aa0 <Delta_Height>

	Transmit_Data (&arr_accel_x, &arr_accel_y, &arr_accel_z, &arr_gyro_x, &arr_gyro_y, &arr_gyro_z, &Kalman_accel_x, &Kalman_accel_y, &Kalman_accel_z, &Kalman_gyro_x, &Kalman_gyro_y, &Kalman_gyro_z, &start_pressure, &start_temperature, &StartHeight, &pressure, &temperature, &height, &DeltaHeight);
 80025ac:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80025b0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80025b4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80025b8:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80025bc:	f107 031c 	add.w	r3, r7, #28
 80025c0:	930e      	str	r3, [sp, #56]	; 0x38
 80025c2:	f107 0320 	add.w	r3, r7, #32
 80025c6:	930d      	str	r3, [sp, #52]	; 0x34
 80025c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025cc:	930c      	str	r3, [sp, #48]	; 0x30
 80025ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80025d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025d8:	930a      	str	r3, [sp, #40]	; 0x28
 80025da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025de:	9309      	str	r3, [sp, #36]	; 0x24
 80025e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025e4:	9308      	str	r3, [sp, #32]
 80025e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025ea:	9307      	str	r3, [sp, #28]
 80025ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025f0:	9306      	str	r3, [sp, #24]
 80025f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025f6:	9305      	str	r3, [sp, #20]
 80025f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025fc:	9304      	str	r3, [sp, #16]
 80025fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002602:	9303      	str	r3, [sp, #12]
 8002604:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002608:	9302      	str	r3, [sp, #8]
 800260a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	4623      	mov	r3, r4
 8002618:	f7ff fab6 	bl	8001b88 <Transmit_Data>
	MPU6050_Read_Accel(&arr_accel_x, &arr_accel_y, &arr_accel_z, &Kalman_accel_x, &Kalman_accel_y, &Kalman_accel_z);
 800261c:	e784      	b.n	8002528 <main+0x90>
 800261e:	bf00      	nop
 8002620:	2000026c 	.word	0x2000026c

08002624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b094      	sub	sp, #80	; 0x50
 8002628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800262a:	f107 0320 	add.w	r3, r7, #32
 800262e:	2230      	movs	r2, #48	; 0x30
 8002630:	2100      	movs	r1, #0
 8002632:	4618      	mov	r0, r3
 8002634:	f003 fdd7 	bl	80061e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002638:	f107 030c 	add.w	r3, r7, #12
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	4b23      	ldr	r3, [pc, #140]	; (80026dc <SystemClock_Config+0xb8>)
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	4a22      	ldr	r2, [pc, #136]	; (80026dc <SystemClock_Config+0xb8>)
 8002652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002656:	6413      	str	r3, [r2, #64]	; 0x40
 8002658:	4b20      	ldr	r3, [pc, #128]	; (80026dc <SystemClock_Config+0xb8>)
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002664:	2300      	movs	r3, #0
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <SystemClock_Config+0xbc>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002670:	4a1b      	ldr	r2, [pc, #108]	; (80026e0 <SystemClock_Config+0xbc>)
 8002672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <SystemClock_Config+0xbc>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002684:	2302      	movs	r3, #2
 8002686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002688:	2301      	movs	r3, #1
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800268c:	2310      	movs	r3, #16
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002690:	2300      	movs	r3, #0
 8002692:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002694:	f107 0320 	add.w	r3, r7, #32
 8002698:	4618      	mov	r0, r3
 800269a:	f001 ffa3 	bl	80045e4 <HAL_RCC_OscConfig>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80026a4:	f000 f8cc 	bl	8002840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026a8:	230f      	movs	r3, #15
 80026aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026bc:	f107 030c 	add.w	r3, r7, #12
 80026c0:	2100      	movs	r1, #0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 fa06 	bl	8004ad4 <HAL_RCC_ClockConfig>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80026ce:	f000 f8b7 	bl	8002840 <Error_Handler>
  }
}
 80026d2:	bf00      	nop
 80026d4:	3750      	adds	r7, #80	; 0x50
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40007000 	.word	0x40007000

080026e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <MX_I2C1_Init+0x50>)
 80026ea:	4a13      	ldr	r2, [pc, #76]	; (8002738 <MX_I2C1_Init+0x54>)
 80026ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80026ee:	4b11      	ldr	r3, [pc, #68]	; (8002734 <MX_I2C1_Init+0x50>)
 80026f0:	4a12      	ldr	r2, [pc, #72]	; (800273c <MX_I2C1_Init+0x58>)
 80026f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026f4:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <MX_I2C1_Init+0x50>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <MX_I2C1_Init+0x50>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <MX_I2C1_Init+0x50>)
 8002702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002708:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <MX_I2C1_Init+0x50>)
 800270a:	2200      	movs	r2, #0
 800270c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <MX_I2C1_Init+0x50>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002714:	4b07      	ldr	r3, [pc, #28]	; (8002734 <MX_I2C1_Init+0x50>)
 8002716:	2200      	movs	r2, #0
 8002718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <MX_I2C1_Init+0x50>)
 800271c:	2200      	movs	r2, #0
 800271e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002720:	4804      	ldr	r0, [pc, #16]	; (8002734 <MX_I2C1_Init+0x50>)
 8002722:	f000 fdbb 	bl	800329c <HAL_I2C_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800272c:	f000 f888 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000218 	.word	0x20000218
 8002738:	40005400 	.word	0x40005400
 800273c:	000186a0 	.word	0x000186a0

08002740 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <MX_I2C2_Init+0x50>)
 8002746:	4a13      	ldr	r2, [pc, #76]	; (8002794 <MX_I2C2_Init+0x54>)
 8002748:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <MX_I2C2_Init+0x50>)
 800274c:	4a12      	ldr	r2, [pc, #72]	; (8002798 <MX_I2C2_Init+0x58>)
 800274e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <MX_I2C2_Init+0x50>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <MX_I2C2_Init+0x50>)
 8002758:	2200      	movs	r2, #0
 800275a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <MX_I2C2_Init+0x50>)
 800275e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002762:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <MX_I2C2_Init+0x50>)
 8002766:	2200      	movs	r2, #0
 8002768:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <MX_I2C2_Init+0x50>)
 800276c:	2200      	movs	r2, #0
 800276e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002770:	4b07      	ldr	r3, [pc, #28]	; (8002790 <MX_I2C2_Init+0x50>)
 8002772:	2200      	movs	r2, #0
 8002774:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <MX_I2C2_Init+0x50>)
 8002778:	2200      	movs	r2, #0
 800277a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800277c:	4804      	ldr	r0, [pc, #16]	; (8002790 <MX_I2C2_Init+0x50>)
 800277e:	f000 fd8d 	bl	800329c <HAL_I2C_Init>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002788:	f000 f85a 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}
 8002790:	2000026c 	.word	0x2000026c
 8002794:	40005800 	.word	0x40005800
 8002798:	000186a0 	.word	0x000186a0

0800279c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027a2:	4a12      	ldr	r2, [pc, #72]	; (80027ec <MX_USART1_UART_Init+0x50>)
 80027a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027c2:	220c      	movs	r2, #12
 80027c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027d2:	4805      	ldr	r0, [pc, #20]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027d4:	f002 fb5e 	bl	8004e94 <HAL_UART_Init>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027de:	f000 f82f 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	200002c0 	.word	0x200002c0
 80027ec:	40011000 	.word	0x40011000

080027f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <MX_GPIO_Init+0x4c>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	4a0f      	ldr	r2, [pc, #60]	; (800283c <MX_GPIO_Init+0x4c>)
 8002800:	f043 0302 	orr.w	r3, r3, #2
 8002804:	6313      	str	r3, [r2, #48]	; 0x30
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <MX_GPIO_Init+0x4c>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	603b      	str	r3, [r7, #0]
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <MX_GPIO_Init+0x4c>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a08      	ldr	r2, [pc, #32]	; (800283c <MX_GPIO_Init+0x4c>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <MX_GPIO_Init+0x4c>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800

08002840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002844:	b672      	cpsid	i
}
 8002846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002848:	e7fe      	b.n	8002848 <Error_Handler+0x8>
	...

0800284c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <HAL_MspInit+0x4c>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	4a0f      	ldr	r2, [pc, #60]	; (8002898 <HAL_MspInit+0x4c>)
 800285c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002860:	6453      	str	r3, [r2, #68]	; 0x44
 8002862:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <HAL_MspInit+0x4c>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286a:	607b      	str	r3, [r7, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	603b      	str	r3, [r7, #0]
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_MspInit+0x4c>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a08      	ldr	r2, [pc, #32]	; (8002898 <HAL_MspInit+0x4c>)
 8002878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_MspInit+0x4c>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800

0800289c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08c      	sub	sp, #48	; 0x30
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 031c 	add.w	r3, r7, #28
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a3a      	ldr	r2, [pc, #232]	; (80029a4 <HAL_I2C_MspInit+0x108>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d12c      	bne.n	8002918 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <HAL_I2C_MspInit+0x10c>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4a38      	ldr	r2, [pc, #224]	; (80029a8 <HAL_I2C_MspInit+0x10c>)
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
 80028ce:	4b36      	ldr	r3, [pc, #216]	; (80029a8 <HAL_I2C_MspInit+0x10c>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	61bb      	str	r3, [r7, #24]
 80028d8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028da:	23c0      	movs	r3, #192	; 0xc0
 80028dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028de:	2312      	movs	r3, #18
 80028e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e6:	2303      	movs	r3, #3
 80028e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028ea:	2304      	movs	r3, #4
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ee:	f107 031c 	add.w	r3, r7, #28
 80028f2:	4619      	mov	r1, r3
 80028f4:	482d      	ldr	r0, [pc, #180]	; (80029ac <HAL_I2C_MspInit+0x110>)
 80028f6:	f000 fb4d 	bl	8002f94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	4b2a      	ldr	r3, [pc, #168]	; (80029a8 <HAL_I2C_MspInit+0x10c>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a29      	ldr	r2, [pc, #164]	; (80029a8 <HAL_I2C_MspInit+0x10c>)
 8002904:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <HAL_I2C_MspInit+0x10c>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002916:	e041      	b.n	800299c <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a24      	ldr	r2, [pc, #144]	; (80029b0 <HAL_I2C_MspInit+0x114>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d13c      	bne.n	800299c <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_I2C_MspInit+0x10c>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <HAL_I2C_MspInit+0x10c>)
 800292c:	f043 0302 	orr.w	r3, r3, #2
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <HAL_I2C_MspInit+0x10c>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800293e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002944:	2312      	movs	r3, #18
 8002946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294c:	2303      	movs	r3, #3
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002950:	2304      	movs	r3, #4
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002954:	f107 031c 	add.w	r3, r7, #28
 8002958:	4619      	mov	r1, r3
 800295a:	4814      	ldr	r0, [pc, #80]	; (80029ac <HAL_I2C_MspInit+0x110>)
 800295c:	f000 fb1a 	bl	8002f94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002960:	2308      	movs	r3, #8
 8002962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002964:	2312      	movs	r3, #18
 8002966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296c:	2303      	movs	r3, #3
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002970:	2309      	movs	r3, #9
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002974:	f107 031c 	add.w	r3, r7, #28
 8002978:	4619      	mov	r1, r3
 800297a:	480c      	ldr	r0, [pc, #48]	; (80029ac <HAL_I2C_MspInit+0x110>)
 800297c:	f000 fb0a 	bl	8002f94 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_I2C_MspInit+0x10c>)
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <HAL_I2C_MspInit+0x10c>)
 800298a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800298e:	6413      	str	r3, [r2, #64]	; 0x40
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_I2C_MspInit+0x10c>)
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]
}
 800299c:	bf00      	nop
 800299e:	3730      	adds	r7, #48	; 0x30
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40005400 	.word	0x40005400
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40020400 	.word	0x40020400
 80029b0:	40005800 	.word	0x40005800

080029b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	; 0x28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a19      	ldr	r2, [pc, #100]	; (8002a38 <HAL_UART_MspInit+0x84>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d12c      	bne.n	8002a30 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <HAL_UART_MspInit+0x88>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	4a17      	ldr	r2, [pc, #92]	; (8002a3c <HAL_UART_MspInit+0x88>)
 80029e0:	f043 0310 	orr.w	r3, r3, #16
 80029e4:	6453      	str	r3, [r2, #68]	; 0x44
 80029e6:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <HAL_UART_MspInit+0x88>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <HAL_UART_MspInit+0x88>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	4a10      	ldr	r2, [pc, #64]	; (8002a3c <HAL_UART_MspInit+0x88>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <HAL_UART_MspInit+0x88>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a20:	2307      	movs	r3, #7
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4805      	ldr	r0, [pc, #20]	; (8002a40 <HAL_UART_MspInit+0x8c>)
 8002a2c:	f000 fab2 	bl	8002f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a30:	bf00      	nop
 8002a32:	3728      	adds	r7, #40	; 0x28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40011000 	.word	0x40011000
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40020000 	.word	0x40020000

08002a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a48:	e7fe      	b.n	8002a48 <NMI_Handler+0x4>

08002a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a4e:	e7fe      	b.n	8002a4e <HardFault_Handler+0x4>

08002a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a54:	e7fe      	b.n	8002a54 <MemManage_Handler+0x4>

08002a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a5a:	e7fe      	b.n	8002a5a <BusFault_Handler+0x4>

08002a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a60:	e7fe      	b.n	8002a60 <UsageFault_Handler+0x4>

08002a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a90:	f000 f956 	bl	8002d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return 1;
 8002a9c:	2301      	movs	r3, #1
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <_kill>:

int _kill(int pid, int sig)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ab2:	f003 fbeb 	bl	800628c <__errno>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2216      	movs	r2, #22
 8002aba:	601a      	str	r2, [r3, #0]
  return -1;
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <_exit>:

void _exit (int status)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ffe7 	bl	8002aa8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ada:	e7fe      	b.n	8002ada <_exit+0x12>

08002adc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	e00a      	b.n	8002b04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002aee:	f3af 8000 	nop.w
 8002af2:	4601      	mov	r1, r0
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	60ba      	str	r2, [r7, #8]
 8002afa:	b2ca      	uxtb	r2, r1
 8002afc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	3301      	adds	r3, #1
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	dbf0      	blt.n	8002aee <_read+0x12>
  }

  return len;
 8002b0c:	687b      	ldr	r3, [r7, #4]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b086      	sub	sp, #24
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	e009      	b.n	8002b3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	60ba      	str	r2, [r7, #8]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	dbf1      	blt.n	8002b28 <_write+0x12>
  }
  return len;
 8002b44:	687b      	ldr	r3, [r7, #4]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <_close>:

int _close(int file)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b76:	605a      	str	r2, [r3, #4]
  return 0;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <_isatty>:

int _isatty(int file)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b8e:	2301      	movs	r3, #1
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bc0:	4a14      	ldr	r2, [pc, #80]	; (8002c14 <_sbrk+0x5c>)
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <_sbrk+0x60>)
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <_sbrk+0x64>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd4:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <_sbrk+0x64>)
 8002bd6:	4a12      	ldr	r2, [pc, #72]	; (8002c20 <_sbrk+0x68>)
 8002bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <_sbrk+0x64>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d207      	bcs.n	8002bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be8:	f003 fb50 	bl	800628c <__errno>
 8002bec:	4603      	mov	r3, r0
 8002bee:	220c      	movs	r2, #12
 8002bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf6:	e009      	b.n	8002c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <_sbrk+0x64>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bfe:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <_sbrk+0x64>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4413      	add	r3, r2
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <_sbrk+0x64>)
 8002c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20018000 	.word	0x20018000
 8002c18:	00000400 	.word	0x00000400
 8002c1c:	20000308 	.word	0x20000308
 8002c20:	20000460 	.word	0x20000460

08002c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <SystemInit+0x20>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <SystemInit+0x20>)
 8002c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8002c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c4c:	f7ff ffea 	bl	8002c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c50:	480c      	ldr	r0, [pc, #48]	; (8002c84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c52:	490d      	ldr	r1, [pc, #52]	; (8002c88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c54:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c58:	e002      	b.n	8002c60 <LoopCopyDataInit>

08002c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5e:	3304      	adds	r3, #4

08002c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c64:	d3f9      	bcc.n	8002c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c68:	4c0a      	ldr	r4, [pc, #40]	; (8002c94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c6c:	e001      	b.n	8002c72 <LoopFillZerobss>

08002c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c70:	3204      	adds	r2, #4

08002c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c74:	d3fb      	bcc.n	8002c6e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002c76:	f003 fb0f 	bl	8006298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c7a:	f7ff fc0d 	bl	8002498 <main>
  bx  lr    
 8002c7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c88:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002c8c:	08008c24 	.word	0x08008c24
  ldr r2, =_sbss
 8002c90:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002c94:	2000045c 	.word	0x2000045c

08002c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c98:	e7fe      	b.n	8002c98 <ADC_IRQHandler>
	...

08002c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ca0:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <HAL_Init+0x40>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	; (8002cdc <HAL_Init+0x40>)
 8002ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cac:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <HAL_Init+0x40>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <HAL_Init+0x40>)
 8002cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <HAL_Init+0x40>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a07      	ldr	r2, [pc, #28]	; (8002cdc <HAL_Init+0x40>)
 8002cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc4:	2003      	movs	r0, #3
 8002cc6:	f000 f931 	bl	8002f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cca:	200f      	movs	r0, #15
 8002ccc:	f000 f808 	bl	8002ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cd0:	f7ff fdbc 	bl	800284c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023c00 	.word	0x40023c00

08002ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ce8:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <HAL_InitTick+0x54>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <HAL_InitTick+0x58>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 f93b 	bl	8002f7a <HAL_SYSTICK_Config>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e00e      	b.n	8002d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b0f      	cmp	r3, #15
 8002d12:	d80a      	bhi.n	8002d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d14:	2200      	movs	r2, #0
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1c:	f000 f911 	bl	8002f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d20:	4a06      	ldr	r2, [pc, #24]	; (8002d3c <HAL_InitTick+0x5c>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e000      	b.n	8002d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20000000 	.word	0x20000000
 8002d38:	20000008 	.word	0x20000008
 8002d3c:	20000004 	.word	0x20000004

08002d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <HAL_IncTick+0x20>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <HAL_IncTick+0x24>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <HAL_IncTick+0x24>)
 8002d52:	6013      	str	r3, [r2, #0]
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000008 	.word	0x20000008
 8002d64:	2000030c 	.word	0x2000030c

08002d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <HAL_GetTick+0x14>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	2000030c 	.word	0x2000030c

08002d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d88:	f7ff ffee 	bl	8002d68 <HAL_GetTick>
 8002d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d005      	beq.n	8002da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <HAL_Delay+0x44>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4413      	add	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002da6:	bf00      	nop
 8002da8:	f7ff ffde 	bl	8002d68 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d8f7      	bhi.n	8002da8 <HAL_Delay+0x28>
  {
  }
}
 8002db8:	bf00      	nop
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000008 	.word	0x20000008

08002dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <__NVIC_SetPriorityGrouping+0x44>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002de4:	4013      	ands	r3, r2
 8002de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dfa:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <__NVIC_SetPriorityGrouping+0x44>)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	60d3      	str	r3, [r2, #12]
}
 8002e00:	bf00      	nop
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e14:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <__NVIC_GetPriorityGrouping+0x18>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	0a1b      	lsrs	r3, r3, #8
 8002e1a:	f003 0307 	and.w	r3, r3, #7
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	6039      	str	r1, [r7, #0]
 8002e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	db0a      	blt.n	8002e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	490c      	ldr	r1, [pc, #48]	; (8002e78 <__NVIC_SetPriority+0x4c>)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	0112      	lsls	r2, r2, #4
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	440b      	add	r3, r1
 8002e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e54:	e00a      	b.n	8002e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4908      	ldr	r1, [pc, #32]	; (8002e7c <__NVIC_SetPriority+0x50>)
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	3b04      	subs	r3, #4
 8002e64:	0112      	lsls	r2, r2, #4
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	440b      	add	r3, r1
 8002e6a:	761a      	strb	r2, [r3, #24]
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000e100 	.word	0xe000e100
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b089      	sub	sp, #36	; 0x24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f1c3 0307 	rsb	r3, r3, #7
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	bf28      	it	cs
 8002e9e:	2304      	movcs	r3, #4
 8002ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	2b06      	cmp	r3, #6
 8002ea8:	d902      	bls.n	8002eb0 <NVIC_EncodePriority+0x30>
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3b03      	subs	r3, #3
 8002eae:	e000      	b.n	8002eb2 <NVIC_EncodePriority+0x32>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	43d9      	mvns	r1, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed8:	4313      	orrs	r3, r2
         );
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3724      	adds	r7, #36	; 0x24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef8:	d301      	bcc.n	8002efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002efa:	2301      	movs	r3, #1
 8002efc:	e00f      	b.n	8002f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002efe:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <SysTick_Config+0x40>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f06:	210f      	movs	r1, #15
 8002f08:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0c:	f7ff ff8e 	bl	8002e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <SysTick_Config+0x40>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f16:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <SysTick_Config+0x40>)
 8002f18:	2207      	movs	r2, #7
 8002f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	e000e010 	.word	0xe000e010

08002f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ff47 	bl	8002dc8 <__NVIC_SetPriorityGrouping>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b086      	sub	sp, #24
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	4603      	mov	r3, r0
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f54:	f7ff ff5c 	bl	8002e10 <__NVIC_GetPriorityGrouping>
 8002f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	6978      	ldr	r0, [r7, #20]
 8002f60:	f7ff ff8e 	bl	8002e80 <NVIC_EncodePriority>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff5d 	bl	8002e2c <__NVIC_SetPriority>
}
 8002f72:	bf00      	nop
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff ffb0 	bl	8002ee8 <SysTick_Config>
 8002f88:	4603      	mov	r3, r0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b089      	sub	sp, #36	; 0x24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	e159      	b.n	8003264 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	f040 8148 	bne.w	800325e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d005      	beq.n	8002fe6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d130      	bne.n	8003048 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800301c:	2201      	movs	r2, #1
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 0201 	and.w	r2, r3, #1
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	2b03      	cmp	r3, #3
 8003052:	d017      	beq.n	8003084 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	2203      	movs	r2, #3
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d123      	bne.n	80030d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	08da      	lsrs	r2, r3, #3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3208      	adds	r2, #8
 8003098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	220f      	movs	r2, #15
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	08da      	lsrs	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3208      	adds	r2, #8
 80030d2:	69b9      	ldr	r1, [r7, #24]
 80030d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	2203      	movs	r2, #3
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 0203 	and.w	r2, r3, #3
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80a2 	beq.w	800325e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	4b57      	ldr	r3, [pc, #348]	; (800327c <HAL_GPIO_Init+0x2e8>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	4a56      	ldr	r2, [pc, #344]	; (800327c <HAL_GPIO_Init+0x2e8>)
 8003124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003128:	6453      	str	r3, [r2, #68]	; 0x44
 800312a:	4b54      	ldr	r3, [pc, #336]	; (800327c <HAL_GPIO_Init+0x2e8>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003136:	4a52      	ldr	r2, [pc, #328]	; (8003280 <HAL_GPIO_Init+0x2ec>)
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	089b      	lsrs	r3, r3, #2
 800313c:	3302      	adds	r3, #2
 800313e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	220f      	movs	r2, #15
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4013      	ands	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a49      	ldr	r2, [pc, #292]	; (8003284 <HAL_GPIO_Init+0x2f0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d019      	beq.n	8003196 <HAL_GPIO_Init+0x202>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a48      	ldr	r2, [pc, #288]	; (8003288 <HAL_GPIO_Init+0x2f4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d013      	beq.n	8003192 <HAL_GPIO_Init+0x1fe>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a47      	ldr	r2, [pc, #284]	; (800328c <HAL_GPIO_Init+0x2f8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00d      	beq.n	800318e <HAL_GPIO_Init+0x1fa>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a46      	ldr	r2, [pc, #280]	; (8003290 <HAL_GPIO_Init+0x2fc>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d007      	beq.n	800318a <HAL_GPIO_Init+0x1f6>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a45      	ldr	r2, [pc, #276]	; (8003294 <HAL_GPIO_Init+0x300>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d101      	bne.n	8003186 <HAL_GPIO_Init+0x1f2>
 8003182:	2304      	movs	r3, #4
 8003184:	e008      	b.n	8003198 <HAL_GPIO_Init+0x204>
 8003186:	2307      	movs	r3, #7
 8003188:	e006      	b.n	8003198 <HAL_GPIO_Init+0x204>
 800318a:	2303      	movs	r3, #3
 800318c:	e004      	b.n	8003198 <HAL_GPIO_Init+0x204>
 800318e:	2302      	movs	r3, #2
 8003190:	e002      	b.n	8003198 <HAL_GPIO_Init+0x204>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_GPIO_Init+0x204>
 8003196:	2300      	movs	r3, #0
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	f002 0203 	and.w	r2, r2, #3
 800319e:	0092      	lsls	r2, r2, #2
 80031a0:	4093      	lsls	r3, r2
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a8:	4935      	ldr	r1, [pc, #212]	; (8003280 <HAL_GPIO_Init+0x2ec>)
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	089b      	lsrs	r3, r3, #2
 80031ae:	3302      	adds	r3, #2
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031b6:	4b38      	ldr	r3, [pc, #224]	; (8003298 <HAL_GPIO_Init+0x304>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031da:	4a2f      	ldr	r2, [pc, #188]	; (8003298 <HAL_GPIO_Init+0x304>)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031e0:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <HAL_GPIO_Init+0x304>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003204:	4a24      	ldr	r2, [pc, #144]	; (8003298 <HAL_GPIO_Init+0x304>)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800320a:	4b23      	ldr	r3, [pc, #140]	; (8003298 <HAL_GPIO_Init+0x304>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800322e:	4a1a      	ldr	r2, [pc, #104]	; (8003298 <HAL_GPIO_Init+0x304>)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003234:	4b18      	ldr	r3, [pc, #96]	; (8003298 <HAL_GPIO_Init+0x304>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003258:	4a0f      	ldr	r2, [pc, #60]	; (8003298 <HAL_GPIO_Init+0x304>)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3301      	adds	r3, #1
 8003262:	61fb      	str	r3, [r7, #28]
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	2b0f      	cmp	r3, #15
 8003268:	f67f aea2 	bls.w	8002fb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800326c:	bf00      	nop
 800326e:	bf00      	nop
 8003270:	3724      	adds	r7, #36	; 0x24
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800
 8003280:	40013800 	.word	0x40013800
 8003284:	40020000 	.word	0x40020000
 8003288:	40020400 	.word	0x40020400
 800328c:	40020800 	.word	0x40020800
 8003290:	40020c00 	.word	0x40020c00
 8003294:	40021000 	.word	0x40021000
 8003298:	40013c00 	.word	0x40013c00

0800329c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e12b      	b.n	8003506 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff faea 	bl	800289c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	; 0x24
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003300:	f001 fda0 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 8003304:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4a81      	ldr	r2, [pc, #516]	; (8003510 <HAL_I2C_Init+0x274>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d807      	bhi.n	8003320 <HAL_I2C_Init+0x84>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a80      	ldr	r2, [pc, #512]	; (8003514 <HAL_I2C_Init+0x278>)
 8003314:	4293      	cmp	r3, r2
 8003316:	bf94      	ite	ls
 8003318:	2301      	movls	r3, #1
 800331a:	2300      	movhi	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	e006      	b.n	800332e <HAL_I2C_Init+0x92>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4a7d      	ldr	r2, [pc, #500]	; (8003518 <HAL_I2C_Init+0x27c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	bf94      	ite	ls
 8003328:	2301      	movls	r3, #1
 800332a:	2300      	movhi	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e0e7      	b.n	8003506 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4a78      	ldr	r2, [pc, #480]	; (800351c <HAL_I2C_Init+0x280>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0c9b      	lsrs	r3, r3, #18
 8003340:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a6a      	ldr	r2, [pc, #424]	; (8003510 <HAL_I2C_Init+0x274>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d802      	bhi.n	8003370 <HAL_I2C_Init+0xd4>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	3301      	adds	r3, #1
 800336e:	e009      	b.n	8003384 <HAL_I2C_Init+0xe8>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003376:	fb02 f303 	mul.w	r3, r2, r3
 800337a:	4a69      	ldr	r2, [pc, #420]	; (8003520 <HAL_I2C_Init+0x284>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	099b      	lsrs	r3, r3, #6
 8003382:	3301      	adds	r3, #1
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	430b      	orrs	r3, r1
 800338a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003396:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	495c      	ldr	r1, [pc, #368]	; (8003510 <HAL_I2C_Init+0x274>)
 80033a0:	428b      	cmp	r3, r1
 80033a2:	d819      	bhi.n	80033d8 <HAL_I2C_Init+0x13c>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1e59      	subs	r1, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80033b2:	1c59      	adds	r1, r3, #1
 80033b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033b8:	400b      	ands	r3, r1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_I2C_Init+0x138>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1e59      	subs	r1, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033cc:	3301      	adds	r3, #1
 80033ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d2:	e051      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 80033d4:	2304      	movs	r3, #4
 80033d6:	e04f      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d111      	bne.n	8003404 <HAL_I2C_Init+0x168>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1e58      	subs	r0, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	440b      	add	r3, r1
 80033ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f2:	3301      	adds	r3, #1
 80033f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e012      	b.n	800342a <HAL_I2C_Init+0x18e>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1e58      	subs	r0, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	0099      	lsls	r1, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	fbb0 f3f3 	udiv	r3, r0, r3
 800341a:	3301      	adds	r3, #1
 800341c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_I2C_Init+0x196>
 800342e:	2301      	movs	r3, #1
 8003430:	e022      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10e      	bne.n	8003458 <HAL_I2C_Init+0x1bc>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1e58      	subs	r0, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6859      	ldr	r1, [r3, #4]
 8003442:	460b      	mov	r3, r1
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	440b      	add	r3, r1
 8003448:	fbb0 f3f3 	udiv	r3, r0, r3
 800344c:	3301      	adds	r3, #1
 800344e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003456:	e00f      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1e58      	subs	r0, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	0099      	lsls	r1, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	fbb0 f3f3 	udiv	r3, r0, r3
 800346e:	3301      	adds	r3, #1
 8003470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003474:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	6809      	ldr	r1, [r1, #0]
 800347c:	4313      	orrs	r3, r2
 800347e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69da      	ldr	r2, [r3, #28]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6911      	ldr	r1, [r2, #16]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68d2      	ldr	r2, [r2, #12]
 80034b2:	4311      	orrs	r1, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	430b      	orrs	r3, r1
 80034ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	000186a0 	.word	0x000186a0
 8003514:	001e847f 	.word	0x001e847f
 8003518:	003d08ff 	.word	0x003d08ff
 800351c:	431bde83 	.word	0x431bde83
 8003520:	10624dd3 	.word	0x10624dd3

08003524 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	461a      	mov	r2, r3
 8003530:	460b      	mov	r3, r1
 8003532:	817b      	strh	r3, [r7, #10]
 8003534:	4613      	mov	r3, r2
 8003536:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003538:	f7ff fc16 	bl	8002d68 <HAL_GetTick>
 800353c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b20      	cmp	r3, #32
 8003548:	f040 80e0 	bne.w	800370c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	2319      	movs	r3, #25
 8003552:	2201      	movs	r2, #1
 8003554:	4970      	ldr	r1, [pc, #448]	; (8003718 <HAL_I2C_Master_Transmit+0x1f4>)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fe0e 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003562:	2302      	movs	r3, #2
 8003564:	e0d3      	b.n	800370e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_I2C_Master_Transmit+0x50>
 8003570:	2302      	movs	r3, #2
 8003572:	e0cc      	b.n	800370e <HAL_I2C_Master_Transmit+0x1ea>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d007      	beq.n	800359a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0201 	orr.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2221      	movs	r2, #33	; 0x21
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2210      	movs	r2, #16
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	893a      	ldrh	r2, [r7, #8]
 80035ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4a50      	ldr	r2, [pc, #320]	; (800371c <HAL_I2C_Master_Transmit+0x1f8>)
 80035da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035dc:	8979      	ldrh	r1, [r7, #10]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	6a3a      	ldr	r2, [r7, #32]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 fbc8 	bl	8003d78 <I2C_MasterRequestWrite>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e08d      	b.n	800370e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f2:	2300      	movs	r3, #0
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003608:	e066      	b.n	80036d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	6a39      	ldr	r1, [r7, #32]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fecc 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00d      	beq.n	8003636 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	2b04      	cmp	r3, #4
 8003620:	d107      	bne.n	8003632 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003630:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e06b      	b.n	800370e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	781a      	ldrb	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365e:	3b01      	subs	r3, #1
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b04      	cmp	r3, #4
 8003672:	d11b      	bne.n	80036ac <HAL_I2C_Master_Transmit+0x188>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	2b00      	cmp	r3, #0
 800367a:	d017      	beq.n	80036ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	781a      	ldrb	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	6a39      	ldr	r1, [r7, #32]
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 fec3 	bl	800443c <I2C_WaitOnBTFFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00d      	beq.n	80036d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d107      	bne.n	80036d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e01a      	b.n	800370e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d194      	bne.n	800360a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	e000      	b.n	800370e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800370c:	2302      	movs	r3, #2
  }
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	00100002 	.word	0x00100002
 800371c:	ffff0000 	.word	0xffff0000

08003720 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af02      	add	r7, sp, #8
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	4608      	mov	r0, r1
 800372a:	4611      	mov	r1, r2
 800372c:	461a      	mov	r2, r3
 800372e:	4603      	mov	r3, r0
 8003730:	817b      	strh	r3, [r7, #10]
 8003732:	460b      	mov	r3, r1
 8003734:	813b      	strh	r3, [r7, #8]
 8003736:	4613      	mov	r3, r2
 8003738:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800373a:	f7ff fb15 	bl	8002d68 <HAL_GetTick>
 800373e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b20      	cmp	r3, #32
 800374a:	f040 80d9 	bne.w	8003900 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2319      	movs	r3, #25
 8003754:	2201      	movs	r2, #1
 8003756:	496d      	ldr	r1, [pc, #436]	; (800390c <HAL_I2C_Mem_Write+0x1ec>)
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fd0d 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003764:	2302      	movs	r3, #2
 8003766:	e0cc      	b.n	8003902 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_I2C_Mem_Write+0x56>
 8003772:	2302      	movs	r3, #2
 8003774:	e0c5      	b.n	8003902 <HAL_I2C_Mem_Write+0x1e2>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	d007      	beq.n	800379c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2221      	movs	r2, #33	; 0x21
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2240      	movs	r2, #64	; 0x40
 80037b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a3a      	ldr	r2, [r7, #32]
 80037c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4a4d      	ldr	r2, [pc, #308]	; (8003910 <HAL_I2C_Mem_Write+0x1f0>)
 80037dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037de:	88f8      	ldrh	r0, [r7, #6]
 80037e0:	893a      	ldrh	r2, [r7, #8]
 80037e2:	8979      	ldrh	r1, [r7, #10]
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	4603      	mov	r3, r0
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 fb44 	bl	8003e7c <I2C_RequestMemoryWrite>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d052      	beq.n	80038a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e081      	b.n	8003902 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fdd2 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00d      	beq.n	800382a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	2b04      	cmp	r3, #4
 8003814:	d107      	bne.n	8003826 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003824:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e06b      	b.n	8003902 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	781a      	ldrb	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b04      	cmp	r3, #4
 8003866:	d11b      	bne.n	80038a0 <HAL_I2C_Mem_Write+0x180>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386c:	2b00      	cmp	r3, #0
 800386e:	d017      	beq.n	80038a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	781a      	ldrb	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1aa      	bne.n	80037fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 fdc5 	bl	800443c <I2C_WaitOnBTFFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00d      	beq.n	80038d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d107      	bne.n	80038d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e016      	b.n	8003902 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	e000      	b.n	8003902 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003900:	2302      	movs	r3, #2
  }
}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	00100002 	.word	0x00100002
 8003910:	ffff0000 	.word	0xffff0000

08003914 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08c      	sub	sp, #48	; 0x30
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	4608      	mov	r0, r1
 800391e:	4611      	mov	r1, r2
 8003920:	461a      	mov	r2, r3
 8003922:	4603      	mov	r3, r0
 8003924:	817b      	strh	r3, [r7, #10]
 8003926:	460b      	mov	r3, r1
 8003928:	813b      	strh	r3, [r7, #8]
 800392a:	4613      	mov	r3, r2
 800392c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800392e:	f7ff fa1b 	bl	8002d68 <HAL_GetTick>
 8003932:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b20      	cmp	r3, #32
 800393e:	f040 8214 	bne.w	8003d6a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	2319      	movs	r3, #25
 8003948:	2201      	movs	r2, #1
 800394a:	497b      	ldr	r1, [pc, #492]	; (8003b38 <HAL_I2C_Mem_Read+0x224>)
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fc13 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003958:	2302      	movs	r3, #2
 800395a:	e207      	b.n	8003d6c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HAL_I2C_Mem_Read+0x56>
 8003966:	2302      	movs	r3, #2
 8003968:	e200      	b.n	8003d6c <HAL_I2C_Mem_Read+0x458>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d007      	beq.n	8003990 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800399e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2222      	movs	r2, #34	; 0x22
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2240      	movs	r2, #64	; 0x40
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80039c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4a5b      	ldr	r2, [pc, #364]	; (8003b3c <HAL_I2C_Mem_Read+0x228>)
 80039d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039d2:	88f8      	ldrh	r0, [r7, #6]
 80039d4:	893a      	ldrh	r2, [r7, #8]
 80039d6:	8979      	ldrh	r1, [r7, #10]
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	9301      	str	r3, [sp, #4]
 80039dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	4603      	mov	r3, r0
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 fae0 	bl	8003fa8 <I2C_RequestMemoryRead>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e1bc      	b.n	8003d6c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d113      	bne.n	8003a22 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039fa:	2300      	movs	r3, #0
 80039fc:	623b      	str	r3, [r7, #32]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	623b      	str	r3, [r7, #32]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	623b      	str	r3, [r7, #32]
 8003a0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	e190      	b.n	8003d44 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d11b      	bne.n	8003a62 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	61fb      	str	r3, [r7, #28]
 8003a4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	e170      	b.n	8003d44 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d11b      	bne.n	8003aa2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	e150      	b.n	8003d44 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ab8:	e144      	b.n	8003d44 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	f200 80f1 	bhi.w	8003ca6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d123      	bne.n	8003b14 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ace:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 fcfb 	bl	80044cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e145      	b.n	8003d6c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b12:	e117      	b.n	8003d44 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d14e      	bne.n	8003bba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b22:	2200      	movs	r2, #0
 8003b24:	4906      	ldr	r1, [pc, #24]	; (8003b40 <HAL_I2C_Mem_Read+0x22c>)
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 fb26 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d008      	beq.n	8003b44 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e11a      	b.n	8003d6c <HAL_I2C_Mem_Read+0x458>
 8003b36:	bf00      	nop
 8003b38:	00100002 	.word	0x00100002
 8003b3c:	ffff0000 	.word	0xffff0000
 8003b40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bb8:	e0c4      	b.n	8003d44 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	496c      	ldr	r1, [pc, #432]	; (8003d74 <HAL_I2C_Mem_Read+0x460>)
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 fad7 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0cb      	b.n	8003d6c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691a      	ldr	r2, [r3, #16]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	4955      	ldr	r1, [pc, #340]	; (8003d74 <HAL_I2C_Mem_Read+0x460>)
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 faa9 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e09d      	b.n	8003d6c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ca4:	e04e      	b.n	8003d44 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fc0e 	bl	80044cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e058      	b.n	8003d6c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d124      	bne.n	8003d44 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d107      	bne.n	8003d12 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d10:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f47f aeb6 	bne.w	8003aba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	e000      	b.n	8003d6c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003d6a:	2302      	movs	r3, #2
  }
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3728      	adds	r7, #40	; 0x28
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	00010004 	.word	0x00010004

08003d78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	607a      	str	r2, [r7, #4]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	460b      	mov	r3, r1
 8003d86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d006      	beq.n	8003da2 <I2C_MasterRequestWrite+0x2a>
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d003      	beq.n	8003da2 <I2C_MasterRequestWrite+0x2a>
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003da0:	d108      	bne.n	8003db4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	e00b      	b.n	8003dcc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	2b12      	cmp	r3, #18
 8003dba:	d107      	bne.n	8003dcc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f9cd 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00d      	beq.n	8003e00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df2:	d103      	bne.n	8003dfc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e035      	b.n	8003e6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e08:	d108      	bne.n	8003e1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e0a:	897b      	ldrh	r3, [r7, #10]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	461a      	mov	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e18:	611a      	str	r2, [r3, #16]
 8003e1a:	e01b      	b.n	8003e54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e1c:	897b      	ldrh	r3, [r7, #10]
 8003e1e:	11db      	asrs	r3, r3, #7
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	f003 0306 	and.w	r3, r3, #6
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f063 030f 	orn	r3, r3, #15
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	490e      	ldr	r1, [pc, #56]	; (8003e74 <I2C_MasterRequestWrite+0xfc>)
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 fa16 	bl	800426c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e010      	b.n	8003e6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e4a:	897b      	ldrh	r3, [r7, #10]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	4907      	ldr	r1, [pc, #28]	; (8003e78 <I2C_MasterRequestWrite+0x100>)
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 fa06 	bl	800426c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	00010008 	.word	0x00010008
 8003e78:	00010002 	.word	0x00010002

08003e7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	4608      	mov	r0, r1
 8003e86:	4611      	mov	r1, r2
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	817b      	strh	r3, [r7, #10]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	813b      	strh	r3, [r7, #8]
 8003e92:	4613      	mov	r3, r2
 8003e94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ea4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f960 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00d      	beq.n	8003eda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ecc:	d103      	bne.n	8003ed6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e05f      	b.n	8003f9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eda:	897b      	ldrh	r3, [r7, #10]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ee8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	6a3a      	ldr	r2, [r7, #32]
 8003eee:	492d      	ldr	r1, [pc, #180]	; (8003fa4 <I2C_RequestMemoryWrite+0x128>)
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f9bb 	bl	800426c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e04c      	b.n	8003f9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f18:	6a39      	ldr	r1, [r7, #32]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fa46 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00d      	beq.n	8003f42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d107      	bne.n	8003f3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e02b      	b.n	8003f9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d105      	bne.n	8003f54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f48:	893b      	ldrh	r3, [r7, #8]
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	611a      	str	r2, [r3, #16]
 8003f52:	e021      	b.n	8003f98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f54:	893b      	ldrh	r3, [r7, #8]
 8003f56:	0a1b      	lsrs	r3, r3, #8
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f64:	6a39      	ldr	r1, [r7, #32]
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 fa20 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00d      	beq.n	8003f8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d107      	bne.n	8003f8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e005      	b.n	8003f9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f8e:	893b      	ldrh	r3, [r7, #8]
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	00010002 	.word	0x00010002

08003fa8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	817b      	strh	r3, [r7, #10]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	813b      	strh	r3, [r7, #8]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fd0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fe0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f8c2 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00d      	beq.n	8004016 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004008:	d103      	bne.n	8004012 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004010:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e0aa      	b.n	800416c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004016:	897b      	ldrh	r3, [r7, #10]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004024:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	6a3a      	ldr	r2, [r7, #32]
 800402a:	4952      	ldr	r1, [pc, #328]	; (8004174 <I2C_RequestMemoryRead+0x1cc>)
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f91d 	bl	800426c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e097      	b.n	800416c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004054:	6a39      	ldr	r1, [r7, #32]
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 f9a8 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00d      	beq.n	800407e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	2b04      	cmp	r3, #4
 8004068:	d107      	bne.n	800407a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004078:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e076      	b.n	800416c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d105      	bne.n	8004090 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004084:	893b      	ldrh	r3, [r7, #8]
 8004086:	b2da      	uxtb	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	611a      	str	r2, [r3, #16]
 800408e:	e021      	b.n	80040d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004090:	893b      	ldrh	r3, [r7, #8]
 8004092:	0a1b      	lsrs	r3, r3, #8
 8004094:	b29b      	uxth	r3, r3
 8004096:	b2da      	uxtb	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800409e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a0:	6a39      	ldr	r1, [r7, #32]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f982 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00d      	beq.n	80040ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d107      	bne.n	80040c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e050      	b.n	800416c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040ca:	893b      	ldrh	r3, [r7, #8]
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d6:	6a39      	ldr	r1, [r7, #32]
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f967 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00d      	beq.n	8004100 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d107      	bne.n	80040fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e035      	b.n	800416c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800410e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	2200      	movs	r2, #0
 8004118:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 f82b 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00d      	beq.n	8004144 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004136:	d103      	bne.n	8004140 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800413e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e013      	b.n	800416c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004144:	897b      	ldrh	r3, [r7, #10]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f043 0301 	orr.w	r3, r3, #1
 800414c:	b2da      	uxtb	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	6a3a      	ldr	r2, [r7, #32]
 8004158:	4906      	ldr	r1, [pc, #24]	; (8004174 <I2C_RequestMemoryRead+0x1cc>)
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 f886 	bl	800426c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	00010002 	.word	0x00010002

08004178 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	4613      	mov	r3, r2
 8004186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004188:	e048      	b.n	800421c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004190:	d044      	beq.n	800421c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004192:	f7fe fde9 	bl	8002d68 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d302      	bcc.n	80041a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d139      	bne.n	800421c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	0c1b      	lsrs	r3, r3, #16
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d10d      	bne.n	80041ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	43da      	mvns	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4013      	ands	r3, r2
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	e00c      	b.n	80041e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	43da      	mvns	r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	4013      	ands	r3, r2
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	bf0c      	ite	eq
 80041e0:	2301      	moveq	r3, #1
 80041e2:	2300      	movne	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	461a      	mov	r2, r3
 80041e8:	79fb      	ldrb	r3, [r7, #7]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d116      	bne.n	800421c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	f043 0220 	orr.w	r2, r3, #32
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e023      	b.n	8004264 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	0c1b      	lsrs	r3, r3, #16
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b01      	cmp	r3, #1
 8004224:	d10d      	bne.n	8004242 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	43da      	mvns	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	4013      	ands	r3, r2
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	e00c      	b.n	800425c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	43da      	mvns	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4013      	ands	r3, r2
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	bf0c      	ite	eq
 8004254:	2301      	moveq	r3, #1
 8004256:	2300      	movne	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	429a      	cmp	r2, r3
 8004260:	d093      	beq.n	800418a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800427a:	e071      	b.n	8004360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428a:	d123      	bne.n	80042d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	f043 0204 	orr.w	r2, r3, #4
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e067      	b.n	80043a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042da:	d041      	beq.n	8004360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042dc:	f7fe fd44 	bl	8002d68 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d302      	bcc.n	80042f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d136      	bne.n	8004360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	0c1b      	lsrs	r3, r3, #16
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d10c      	bne.n	8004316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	43da      	mvns	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4013      	ands	r3, r2
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf14      	ite	ne
 800430e:	2301      	movne	r3, #1
 8004310:	2300      	moveq	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	e00b      	b.n	800432e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	43da      	mvns	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	4013      	ands	r3, r2
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	bf14      	ite	ne
 8004328:	2301      	movne	r3, #1
 800432a:	2300      	moveq	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d016      	beq.n	8004360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	f043 0220 	orr.w	r2, r3, #32
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e021      	b.n	80043a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	0c1b      	lsrs	r3, r3, #16
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b01      	cmp	r3, #1
 8004368:	d10c      	bne.n	8004384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	43da      	mvns	r2, r3
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	4013      	ands	r3, r2
 8004376:	b29b      	uxth	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	bf14      	ite	ne
 800437c:	2301      	movne	r3, #1
 800437e:	2300      	moveq	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	e00b      	b.n	800439c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	43da      	mvns	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4013      	ands	r3, r2
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	bf14      	ite	ne
 8004396:	2301      	movne	r3, #1
 8004398:	2300      	moveq	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	f47f af6d 	bne.w	800427c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043b8:	e034      	b.n	8004424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f8e3 	bl	8004586 <I2C_IsAcknowledgeFailed>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e034      	b.n	8004434 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d028      	beq.n	8004424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d2:	f7fe fcc9 	bl	8002d68 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d302      	bcc.n	80043e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d11d      	bne.n	8004424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f2:	2b80      	cmp	r3, #128	; 0x80
 80043f4:	d016      	beq.n	8004424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	f043 0220 	orr.w	r2, r3, #32
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e007      	b.n	8004434 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442e:	2b80      	cmp	r3, #128	; 0x80
 8004430:	d1c3      	bne.n	80043ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004448:	e034      	b.n	80044b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 f89b 	bl	8004586 <I2C_IsAcknowledgeFailed>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e034      	b.n	80044c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d028      	beq.n	80044b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004462:	f7fe fc81 	bl	8002d68 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	d302      	bcc.n	8004478 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d11d      	bne.n	80044b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b04      	cmp	r3, #4
 8004484:	d016      	beq.n	80044b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	f043 0220 	orr.w	r2, r3, #32
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e007      	b.n	80044c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d1c3      	bne.n	800444a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044d8:	e049      	b.n	800456e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	f003 0310 	and.w	r3, r3, #16
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d119      	bne.n	800451c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0210 	mvn.w	r2, #16
 80044f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e030      	b.n	800457e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451c:	f7fe fc24 	bl	8002d68 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	429a      	cmp	r2, r3
 800452a:	d302      	bcc.n	8004532 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d11d      	bne.n	800456e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453c:	2b40      	cmp	r3, #64	; 0x40
 800453e:	d016      	beq.n	800456e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f043 0220 	orr.w	r2, r3, #32
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e007      	b.n	800457e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004578:	2b40      	cmp	r3, #64	; 0x40
 800457a:	d1ae      	bne.n	80044da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800459c:	d11b      	bne.n	80045d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f043 0204 	orr.w	r2, r3, #4
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e267      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d075      	beq.n	80046ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004602:	4b88      	ldr	r3, [pc, #544]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 030c 	and.w	r3, r3, #12
 800460a:	2b04      	cmp	r3, #4
 800460c:	d00c      	beq.n	8004628 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800460e:	4b85      	ldr	r3, [pc, #532]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004616:	2b08      	cmp	r3, #8
 8004618:	d112      	bne.n	8004640 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800461a:	4b82      	ldr	r3, [pc, #520]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004626:	d10b      	bne.n	8004640 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004628:	4b7e      	ldr	r3, [pc, #504]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d05b      	beq.n	80046ec <HAL_RCC_OscConfig+0x108>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d157      	bne.n	80046ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e242      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004648:	d106      	bne.n	8004658 <HAL_RCC_OscConfig+0x74>
 800464a:	4b76      	ldr	r3, [pc, #472]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a75      	ldr	r2, [pc, #468]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	e01d      	b.n	8004694 <HAL_RCC_OscConfig+0xb0>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004660:	d10c      	bne.n	800467c <HAL_RCC_OscConfig+0x98>
 8004662:	4b70      	ldr	r3, [pc, #448]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a6f      	ldr	r2, [pc, #444]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	4b6d      	ldr	r3, [pc, #436]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a6c      	ldr	r2, [pc, #432]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	e00b      	b.n	8004694 <HAL_RCC_OscConfig+0xb0>
 800467c:	4b69      	ldr	r3, [pc, #420]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a68      	ldr	r2, [pc, #416]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004686:	6013      	str	r3, [r2, #0]
 8004688:	4b66      	ldr	r3, [pc, #408]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a65      	ldr	r2, [pc, #404]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 800468e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d013      	beq.n	80046c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469c:	f7fe fb64 	bl	8002d68 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046a4:	f7fe fb60 	bl	8002d68 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b64      	cmp	r3, #100	; 0x64
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e207      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b6:	4b5b      	ldr	r3, [pc, #364]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCC_OscConfig+0xc0>
 80046c2:	e014      	b.n	80046ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c4:	f7fe fb50 	bl	8002d68 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046cc:	f7fe fb4c 	bl	8002d68 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b64      	cmp	r3, #100	; 0x64
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e1f3      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046de:	4b51      	ldr	r3, [pc, #324]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f0      	bne.n	80046cc <HAL_RCC_OscConfig+0xe8>
 80046ea:	e000      	b.n	80046ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d063      	beq.n	80047c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046fa:	4b4a      	ldr	r3, [pc, #296]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00b      	beq.n	800471e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004706:	4b47      	ldr	r3, [pc, #284]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800470e:	2b08      	cmp	r3, #8
 8004710:	d11c      	bne.n	800474c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004712:	4b44      	ldr	r3, [pc, #272]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d116      	bne.n	800474c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800471e:	4b41      	ldr	r3, [pc, #260]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <HAL_RCC_OscConfig+0x152>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d001      	beq.n	8004736 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e1c7      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004736:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	4937      	ldr	r1, [pc, #220]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004746:	4313      	orrs	r3, r2
 8004748:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800474a:	e03a      	b.n	80047c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d020      	beq.n	8004796 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004754:	4b34      	ldr	r3, [pc, #208]	; (8004828 <HAL_RCC_OscConfig+0x244>)
 8004756:	2201      	movs	r2, #1
 8004758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475a:	f7fe fb05 	bl	8002d68 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004762:	f7fe fb01 	bl	8002d68 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e1a8      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004774:	4b2b      	ldr	r3, [pc, #172]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0f0      	beq.n	8004762 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004780:	4b28      	ldr	r3, [pc, #160]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	4925      	ldr	r1, [pc, #148]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004790:	4313      	orrs	r3, r2
 8004792:	600b      	str	r3, [r1, #0]
 8004794:	e015      	b.n	80047c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004796:	4b24      	ldr	r3, [pc, #144]	; (8004828 <HAL_RCC_OscConfig+0x244>)
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479c:	f7fe fae4 	bl	8002d68 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047a4:	f7fe fae0 	bl	8002d68 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e187      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047b6:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d036      	beq.n	800483c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d016      	beq.n	8004804 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047d6:	4b15      	ldr	r3, [pc, #84]	; (800482c <HAL_RCC_OscConfig+0x248>)
 80047d8:	2201      	movs	r2, #1
 80047da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047dc:	f7fe fac4 	bl	8002d68 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047e4:	f7fe fac0 	bl	8002d68 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e167      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f6:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 80047f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0f0      	beq.n	80047e4 <HAL_RCC_OscConfig+0x200>
 8004802:	e01b      	b.n	800483c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004804:	4b09      	ldr	r3, [pc, #36]	; (800482c <HAL_RCC_OscConfig+0x248>)
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480a:	f7fe faad 	bl	8002d68 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004810:	e00e      	b.n	8004830 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004812:	f7fe faa9 	bl	8002d68 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d907      	bls.n	8004830 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e150      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
 8004824:	40023800 	.word	0x40023800
 8004828:	42470000 	.word	0x42470000
 800482c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004830:	4b88      	ldr	r3, [pc, #544]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1ea      	bne.n	8004812 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 8097 	beq.w	8004978 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800484a:	2300      	movs	r3, #0
 800484c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800484e:	4b81      	ldr	r3, [pc, #516]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10f      	bne.n	800487a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800485a:	2300      	movs	r3, #0
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	4b7d      	ldr	r3, [pc, #500]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	4a7c      	ldr	r2, [pc, #496]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004868:	6413      	str	r3, [r2, #64]	; 0x40
 800486a:	4b7a      	ldr	r3, [pc, #488]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004872:	60bb      	str	r3, [r7, #8]
 8004874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004876:	2301      	movs	r3, #1
 8004878:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487a:	4b77      	ldr	r3, [pc, #476]	; (8004a58 <HAL_RCC_OscConfig+0x474>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d118      	bne.n	80048b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004886:	4b74      	ldr	r3, [pc, #464]	; (8004a58 <HAL_RCC_OscConfig+0x474>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a73      	ldr	r2, [pc, #460]	; (8004a58 <HAL_RCC_OscConfig+0x474>)
 800488c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004892:	f7fe fa69 	bl	8002d68 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800489a:	f7fe fa65 	bl	8002d68 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e10c      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ac:	4b6a      	ldr	r3, [pc, #424]	; (8004a58 <HAL_RCC_OscConfig+0x474>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d106      	bne.n	80048ce <HAL_RCC_OscConfig+0x2ea>
 80048c0:	4b64      	ldr	r3, [pc, #400]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c4:	4a63      	ldr	r2, [pc, #396]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	6713      	str	r3, [r2, #112]	; 0x70
 80048cc:	e01c      	b.n	8004908 <HAL_RCC_OscConfig+0x324>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	2b05      	cmp	r3, #5
 80048d4:	d10c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x30c>
 80048d6:	4b5f      	ldr	r3, [pc, #380]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048da:	4a5e      	ldr	r2, [pc, #376]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048dc:	f043 0304 	orr.w	r3, r3, #4
 80048e0:	6713      	str	r3, [r2, #112]	; 0x70
 80048e2:	4b5c      	ldr	r3, [pc, #368]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e6:	4a5b      	ldr	r2, [pc, #364]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	6713      	str	r3, [r2, #112]	; 0x70
 80048ee:	e00b      	b.n	8004908 <HAL_RCC_OscConfig+0x324>
 80048f0:	4b58      	ldr	r3, [pc, #352]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f4:	4a57      	ldr	r2, [pc, #348]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048f6:	f023 0301 	bic.w	r3, r3, #1
 80048fa:	6713      	str	r3, [r2, #112]	; 0x70
 80048fc:	4b55      	ldr	r3, [pc, #340]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004900:	4a54      	ldr	r2, [pc, #336]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004902:	f023 0304 	bic.w	r3, r3, #4
 8004906:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d015      	beq.n	800493c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004910:	f7fe fa2a 	bl	8002d68 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004916:	e00a      	b.n	800492e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004918:	f7fe fa26 	bl	8002d68 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	f241 3288 	movw	r2, #5000	; 0x1388
 8004926:	4293      	cmp	r3, r2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e0cb      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492e:	4b49      	ldr	r3, [pc, #292]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0ee      	beq.n	8004918 <HAL_RCC_OscConfig+0x334>
 800493a:	e014      	b.n	8004966 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800493c:	f7fe fa14 	bl	8002d68 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004942:	e00a      	b.n	800495a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004944:	f7fe fa10 	bl	8002d68 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e0b5      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800495a:	4b3e      	ldr	r3, [pc, #248]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 800495c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1ee      	bne.n	8004944 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004966:	7dfb      	ldrb	r3, [r7, #23]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d105      	bne.n	8004978 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800496c:	4b39      	ldr	r3, [pc, #228]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	4a38      	ldr	r2, [pc, #224]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004976:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80a1 	beq.w	8004ac4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004982:	4b34      	ldr	r3, [pc, #208]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
 800498a:	2b08      	cmp	r3, #8
 800498c:	d05c      	beq.n	8004a48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d141      	bne.n	8004a1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004996:	4b31      	ldr	r3, [pc, #196]	; (8004a5c <HAL_RCC_OscConfig+0x478>)
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499c:	f7fe f9e4 	bl	8002d68 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a4:	f7fe f9e0 	bl	8002d68 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e087      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b6:	4b27      	ldr	r3, [pc, #156]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69da      	ldr	r2, [r3, #28]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	019b      	lsls	r3, r3, #6
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	085b      	lsrs	r3, r3, #1
 80049da:	3b01      	subs	r3, #1
 80049dc:	041b      	lsls	r3, r3, #16
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	061b      	lsls	r3, r3, #24
 80049e6:	491b      	ldr	r1, [pc, #108]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ec:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <HAL_RCC_OscConfig+0x478>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f2:	f7fe f9b9 	bl	8002d68 <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049fa:	f7fe f9b5 	bl	8002d68 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e05c      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0c:	4b11      	ldr	r3, [pc, #68]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0f0      	beq.n	80049fa <HAL_RCC_OscConfig+0x416>
 8004a18:	e054      	b.n	8004ac4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1a:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <HAL_RCC_OscConfig+0x478>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a20:	f7fe f9a2 	bl	8002d68 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a28:	f7fe f99e 	bl	8002d68 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e045      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3a:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f0      	bne.n	8004a28 <HAL_RCC_OscConfig+0x444>
 8004a46:	e03d      	b.n	8004ac4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d107      	bne.n	8004a60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e038      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
 8004a54:	40023800 	.word	0x40023800
 8004a58:	40007000 	.word	0x40007000
 8004a5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a60:	4b1b      	ldr	r3, [pc, #108]	; (8004ad0 <HAL_RCC_OscConfig+0x4ec>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d028      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d121      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d11a      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a90:	4013      	ands	r3, r2
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d111      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d107      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d001      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	40023800 	.word	0x40023800

08004ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e0cc      	b.n	8004c82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ae8:	4b68      	ldr	r3, [pc, #416]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d90c      	bls.n	8004b10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af6:	4b65      	ldr	r3, [pc, #404]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afe:	4b63      	ldr	r3, [pc, #396]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0b8      	b.n	8004c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d020      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b28:	4b59      	ldr	r3, [pc, #356]	; (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	4a58      	ldr	r2, [pc, #352]	; (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d005      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b40:	4b53      	ldr	r3, [pc, #332]	; (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	4a52      	ldr	r2, [pc, #328]	; (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b4c:	4b50      	ldr	r3, [pc, #320]	; (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	494d      	ldr	r1, [pc, #308]	; (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d044      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d107      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b72:	4b47      	ldr	r3, [pc, #284]	; (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d119      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e07f      	b.n	8004c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d003      	beq.n	8004b92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d107      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b92:	4b3f      	ldr	r3, [pc, #252]	; (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e06f      	b.n	8004c82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba2:	4b3b      	ldr	r3, [pc, #236]	; (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e067      	b.n	8004c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bb2:	4b37      	ldr	r3, [pc, #220]	; (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f023 0203 	bic.w	r2, r3, #3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4934      	ldr	r1, [pc, #208]	; (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bc4:	f7fe f8d0 	bl	8002d68 <HAL_GetTick>
 8004bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bca:	e00a      	b.n	8004be2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bcc:	f7fe f8cc 	bl	8002d68 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e04f      	b.n	8004c82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be2:	4b2b      	ldr	r3, [pc, #172]	; (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 020c 	and.w	r2, r3, #12
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d1eb      	bne.n	8004bcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bf4:	4b25      	ldr	r3, [pc, #148]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d20c      	bcs.n	8004c1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c02:	4b22      	ldr	r3, [pc, #136]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0a:	4b20      	ldr	r3, [pc, #128]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d001      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e032      	b.n	8004c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c28:	4b19      	ldr	r3, [pc, #100]	; (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4916      	ldr	r1, [pc, #88]	; (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d009      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c46:	4b12      	ldr	r3, [pc, #72]	; (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	490e      	ldr	r1, [pc, #56]	; (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c5a:	f000 f821 	bl	8004ca0 <HAL_RCC_GetSysClockFreq>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	091b      	lsrs	r3, r3, #4
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	490a      	ldr	r1, [pc, #40]	; (8004c94 <HAL_RCC_ClockConfig+0x1c0>)
 8004c6c:	5ccb      	ldrb	r3, [r1, r3]
 8004c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c72:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c76:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <HAL_RCC_ClockConfig+0x1c8>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fe f830 	bl	8002ce0 <HAL_InitTick>

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40023c00 	.word	0x40023c00
 8004c90:	40023800 	.word	0x40023800
 8004c94:	08008888 	.word	0x08008888
 8004c98:	20000000 	.word	0x20000000
 8004c9c:	20000004 	.word	0x20000004

08004ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca4:	b090      	sub	sp, #64	; 0x40
 8004ca6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	637b      	str	r3, [r7, #52]	; 0x34
 8004cac:	2300      	movs	r3, #0
 8004cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cb8:	4b59      	ldr	r3, [pc, #356]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 030c 	and.w	r3, r3, #12
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d00d      	beq.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x40>
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	f200 80a1 	bhi.w	8004e0c <HAL_RCC_GetSysClockFreq+0x16c>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d003      	beq.n	8004cda <HAL_RCC_GetSysClockFreq+0x3a>
 8004cd2:	e09b      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cd4:	4b53      	ldr	r3, [pc, #332]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cd6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004cd8:	e09b      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cda:	4b53      	ldr	r3, [pc, #332]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cdc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004cde:	e098      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ce0:	4b4f      	ldr	r3, [pc, #316]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ce8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cea:	4b4d      	ldr	r3, [pc, #308]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d028      	beq.n	8004d48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cf6:	4b4a      	ldr	r3, [pc, #296]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	099b      	lsrs	r3, r3, #6
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	623b      	str	r3, [r7, #32]
 8004d00:	627a      	str	r2, [r7, #36]	; 0x24
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d08:	2100      	movs	r1, #0
 8004d0a:	4b47      	ldr	r3, [pc, #284]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d0c:	fb03 f201 	mul.w	r2, r3, r1
 8004d10:	2300      	movs	r3, #0
 8004d12:	fb00 f303 	mul.w	r3, r0, r3
 8004d16:	4413      	add	r3, r2
 8004d18:	4a43      	ldr	r2, [pc, #268]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d1a:	fba0 1202 	umull	r1, r2, r0, r2
 8004d1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d20:	460a      	mov	r2, r1
 8004d22:	62ba      	str	r2, [r7, #40]	; 0x28
 8004d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d26:	4413      	add	r3, r2
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	61bb      	str	r3, [r7, #24]
 8004d30:	61fa      	str	r2, [r7, #28]
 8004d32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004d3a:	f7fc f8eb 	bl	8000f14 <__aeabi_uldivmod>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4613      	mov	r3, r2
 8004d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d46:	e053      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d48:	4b35      	ldr	r3, [pc, #212]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	099b      	lsrs	r3, r3, #6
 8004d4e:	2200      	movs	r2, #0
 8004d50:	613b      	str	r3, [r7, #16]
 8004d52:	617a      	str	r2, [r7, #20]
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d5a:	f04f 0b00 	mov.w	fp, #0
 8004d5e:	4652      	mov	r2, sl
 8004d60:	465b      	mov	r3, fp
 8004d62:	f04f 0000 	mov.w	r0, #0
 8004d66:	f04f 0100 	mov.w	r1, #0
 8004d6a:	0159      	lsls	r1, r3, #5
 8004d6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d70:	0150      	lsls	r0, r2, #5
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	ebb2 080a 	subs.w	r8, r2, sl
 8004d7a:	eb63 090b 	sbc.w	r9, r3, fp
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d92:	ebb2 0408 	subs.w	r4, r2, r8
 8004d96:	eb63 0509 	sbc.w	r5, r3, r9
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	00eb      	lsls	r3, r5, #3
 8004da4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004da8:	00e2      	lsls	r2, r4, #3
 8004daa:	4614      	mov	r4, r2
 8004dac:	461d      	mov	r5, r3
 8004dae:	eb14 030a 	adds.w	r3, r4, sl
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	eb45 030b 	adc.w	r3, r5, fp
 8004db8:	607b      	str	r3, [r7, #4]
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	028b      	lsls	r3, r1, #10
 8004dca:	4621      	mov	r1, r4
 8004dcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	028a      	lsls	r2, r1, #10
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dda:	2200      	movs	r2, #0
 8004ddc:	60bb      	str	r3, [r7, #8]
 8004dde:	60fa      	str	r2, [r7, #12]
 8004de0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004de4:	f7fc f896 	bl	8000f14 <__aeabi_uldivmod>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4613      	mov	r3, r2
 8004dee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004df0:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	0c1b      	lsrs	r3, r3, #16
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004e00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e0a:	e002      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e0c:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3740      	adds	r7, #64	; 0x40
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e1e:	bf00      	nop
 8004e20:	40023800 	.word	0x40023800
 8004e24:	00f42400 	.word	0x00f42400
 8004e28:	017d7840 	.word	0x017d7840

08004e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e30:	4b03      	ldr	r3, [pc, #12]	; (8004e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e32:	681b      	ldr	r3, [r3, #0]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20000000 	.word	0x20000000

08004e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e48:	f7ff fff0 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	0a9b      	lsrs	r3, r3, #10
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	4903      	ldr	r1, [pc, #12]	; (8004e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e5a:	5ccb      	ldrb	r3, [r1, r3]
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40023800 	.word	0x40023800
 8004e68:	08008898 	.word	0x08008898

08004e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e70:	f7ff ffdc 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e74:	4602      	mov	r2, r0
 8004e76:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	0b5b      	lsrs	r3, r3, #13
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	4903      	ldr	r1, [pc, #12]	; (8004e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e82:	5ccb      	ldrb	r3, [r1, r3]
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	08008898 	.word	0x08008898

08004e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e042      	b.n	8004f2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fd fd7a 	bl	80029b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2224      	movs	r2, #36	; 0x24
 8004ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f973 	bl	80051c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08a      	sub	sp, #40	; 0x28
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d175      	bne.n	8005040 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_UART_Transmit+0x2c>
 8004f5a:	88fb      	ldrh	r3, [r7, #6]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e06e      	b.n	8005042 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2221      	movs	r2, #33	; 0x21
 8004f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f72:	f7fd fef9 	bl	8002d68 <HAL_GetTick>
 8004f76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	88fa      	ldrh	r2, [r7, #6]
 8004f7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	88fa      	ldrh	r2, [r7, #6]
 8004f82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f8c:	d108      	bne.n	8004fa0 <HAL_UART_Transmit+0x6c>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d104      	bne.n	8004fa0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	61bb      	str	r3, [r7, #24]
 8004f9e:	e003      	b.n	8004fa8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fa8:	e02e      	b.n	8005008 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2180      	movs	r1, #128	; 0x80
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 f848 	bl	800504a <UART_WaitOnFlagUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e03a      	b.n	8005042 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10b      	bne.n	8004fea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fe0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	61bb      	str	r3, [r7, #24]
 8004fe8:	e007      	b.n	8004ffa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	781a      	ldrb	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800500c:	b29b      	uxth	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1cb      	bne.n	8004faa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2200      	movs	r2, #0
 800501a:	2140      	movs	r1, #64	; 0x40
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f814 	bl	800504a <UART_WaitOnFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e006      	b.n	8005042 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	e000      	b.n	8005042 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005040:	2302      	movs	r3, #2
  }
}
 8005042:	4618      	mov	r0, r3
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b086      	sub	sp, #24
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	603b      	str	r3, [r7, #0]
 8005056:	4613      	mov	r3, r2
 8005058:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800505a:	e03b      	b.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005062:	d037      	beq.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005064:	f7fd fe80 	bl	8002d68 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	6a3a      	ldr	r2, [r7, #32]
 8005070:	429a      	cmp	r2, r3
 8005072:	d302      	bcc.n	800507a <UART_WaitOnFlagUntilTimeout+0x30>
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e03a      	b.n	80050f4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d023      	beq.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b80      	cmp	r3, #128	; 0x80
 8005090:	d020      	beq.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2b40      	cmp	r3, #64	; 0x40
 8005096:	d01d      	beq.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d116      	bne.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f81d 	bl	80050fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2208      	movs	r2, #8
 80050c6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e00f      	b.n	80050f4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4013      	ands	r3, r2
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	bf0c      	ite	eq
 80050e4:	2301      	moveq	r3, #1
 80050e6:	2300      	movne	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	461a      	mov	r2, r3
 80050ec:	79fb      	ldrb	r3, [r7, #7]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d0b4      	beq.n	800505c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b095      	sub	sp, #84	; 0x54
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510e:	e853 3f00 	ldrex	r3, [r3]
 8005112:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800511a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	330c      	adds	r3, #12
 8005122:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005124:	643a      	str	r2, [r7, #64]	; 0x40
 8005126:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800512a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800512c:	e841 2300 	strex	r3, r2, [r1]
 8005130:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e5      	bne.n	8005104 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3314      	adds	r3, #20
 800513e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	e853 3f00 	ldrex	r3, [r3]
 8005146:	61fb      	str	r3, [r7, #28]
   return(result);
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	f023 0301 	bic.w	r3, r3, #1
 800514e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3314      	adds	r3, #20
 8005156:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005158:	62fa      	str	r2, [r7, #44]	; 0x2c
 800515a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800515e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005160:	e841 2300 	strex	r3, r2, [r1]
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1e5      	bne.n	8005138 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005170:	2b01      	cmp	r3, #1
 8005172:	d119      	bne.n	80051a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	330c      	adds	r3, #12
 800517a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	e853 3f00 	ldrex	r3, [r3]
 8005182:	60bb      	str	r3, [r7, #8]
   return(result);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f023 0310 	bic.w	r3, r3, #16
 800518a:	647b      	str	r3, [r7, #68]	; 0x44
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	330c      	adds	r3, #12
 8005192:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005194:	61ba      	str	r2, [r7, #24]
 8005196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	6979      	ldr	r1, [r7, #20]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	613b      	str	r3, [r7, #16]
   return(result);
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e5      	bne.n	8005174 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051b6:	bf00      	nop
 80051b8:	3754      	adds	r7, #84	; 0x54
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
	...

080051c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c8:	b0c0      	sub	sp, #256	; 0x100
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e0:	68d9      	ldr	r1, [r3, #12]
 80051e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	ea40 0301 	orr.w	r3, r0, r1
 80051ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	431a      	orrs	r2, r3
 8005204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800521c:	f021 010c 	bic.w	r1, r1, #12
 8005220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800522a:	430b      	orrs	r3, r1
 800522c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800522e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800523a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523e:	6999      	ldr	r1, [r3, #24]
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	ea40 0301 	orr.w	r3, r0, r1
 800524a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4b8f      	ldr	r3, [pc, #572]	; (8005490 <UART_SetConfig+0x2cc>)
 8005254:	429a      	cmp	r2, r3
 8005256:	d005      	beq.n	8005264 <UART_SetConfig+0xa0>
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	4b8d      	ldr	r3, [pc, #564]	; (8005494 <UART_SetConfig+0x2d0>)
 8005260:	429a      	cmp	r2, r3
 8005262:	d104      	bne.n	800526e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005264:	f7ff fe02 	bl	8004e6c <HAL_RCC_GetPCLK2Freq>
 8005268:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800526c:	e003      	b.n	8005276 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800526e:	f7ff fde9 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 8005272:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005280:	f040 810c 	bne.w	800549c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005288:	2200      	movs	r2, #0
 800528a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800528e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005292:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005296:	4622      	mov	r2, r4
 8005298:	462b      	mov	r3, r5
 800529a:	1891      	adds	r1, r2, r2
 800529c:	65b9      	str	r1, [r7, #88]	; 0x58
 800529e:	415b      	adcs	r3, r3
 80052a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052a6:	4621      	mov	r1, r4
 80052a8:	eb12 0801 	adds.w	r8, r2, r1
 80052ac:	4629      	mov	r1, r5
 80052ae:	eb43 0901 	adc.w	r9, r3, r1
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052c6:	4690      	mov	r8, r2
 80052c8:	4699      	mov	r9, r3
 80052ca:	4623      	mov	r3, r4
 80052cc:	eb18 0303 	adds.w	r3, r8, r3
 80052d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052d4:	462b      	mov	r3, r5
 80052d6:	eb49 0303 	adc.w	r3, r9, r3
 80052da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80052f2:	460b      	mov	r3, r1
 80052f4:	18db      	adds	r3, r3, r3
 80052f6:	653b      	str	r3, [r7, #80]	; 0x50
 80052f8:	4613      	mov	r3, r2
 80052fa:	eb42 0303 	adc.w	r3, r2, r3
 80052fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005300:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005304:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005308:	f7fb fe04 	bl	8000f14 <__aeabi_uldivmod>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4b61      	ldr	r3, [pc, #388]	; (8005498 <UART_SetConfig+0x2d4>)
 8005312:	fba3 2302 	umull	r2, r3, r3, r2
 8005316:	095b      	lsrs	r3, r3, #5
 8005318:	011c      	lsls	r4, r3, #4
 800531a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800531e:	2200      	movs	r2, #0
 8005320:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005324:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005328:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800532c:	4642      	mov	r2, r8
 800532e:	464b      	mov	r3, r9
 8005330:	1891      	adds	r1, r2, r2
 8005332:	64b9      	str	r1, [r7, #72]	; 0x48
 8005334:	415b      	adcs	r3, r3
 8005336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005338:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800533c:	4641      	mov	r1, r8
 800533e:	eb12 0a01 	adds.w	sl, r2, r1
 8005342:	4649      	mov	r1, r9
 8005344:	eb43 0b01 	adc.w	fp, r3, r1
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005354:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005358:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800535c:	4692      	mov	sl, r2
 800535e:	469b      	mov	fp, r3
 8005360:	4643      	mov	r3, r8
 8005362:	eb1a 0303 	adds.w	r3, sl, r3
 8005366:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800536a:	464b      	mov	r3, r9
 800536c:	eb4b 0303 	adc.w	r3, fp, r3
 8005370:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005380:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005384:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005388:	460b      	mov	r3, r1
 800538a:	18db      	adds	r3, r3, r3
 800538c:	643b      	str	r3, [r7, #64]	; 0x40
 800538e:	4613      	mov	r3, r2
 8005390:	eb42 0303 	adc.w	r3, r2, r3
 8005394:	647b      	str	r3, [r7, #68]	; 0x44
 8005396:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800539a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800539e:	f7fb fdb9 	bl	8000f14 <__aeabi_uldivmod>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4611      	mov	r1, r2
 80053a8:	4b3b      	ldr	r3, [pc, #236]	; (8005498 <UART_SetConfig+0x2d4>)
 80053aa:	fba3 2301 	umull	r2, r3, r3, r1
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	2264      	movs	r2, #100	; 0x64
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	1acb      	subs	r3, r1, r3
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053be:	4b36      	ldr	r3, [pc, #216]	; (8005498 <UART_SetConfig+0x2d4>)
 80053c0:	fba3 2302 	umull	r2, r3, r3, r2
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053cc:	441c      	add	r4, r3
 80053ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80053dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80053e0:	4642      	mov	r2, r8
 80053e2:	464b      	mov	r3, r9
 80053e4:	1891      	adds	r1, r2, r2
 80053e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80053e8:	415b      	adcs	r3, r3
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053f0:	4641      	mov	r1, r8
 80053f2:	1851      	adds	r1, r2, r1
 80053f4:	6339      	str	r1, [r7, #48]	; 0x30
 80053f6:	4649      	mov	r1, r9
 80053f8:	414b      	adcs	r3, r1
 80053fa:	637b      	str	r3, [r7, #52]	; 0x34
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005408:	4659      	mov	r1, fp
 800540a:	00cb      	lsls	r3, r1, #3
 800540c:	4651      	mov	r1, sl
 800540e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005412:	4651      	mov	r1, sl
 8005414:	00ca      	lsls	r2, r1, #3
 8005416:	4610      	mov	r0, r2
 8005418:	4619      	mov	r1, r3
 800541a:	4603      	mov	r3, r0
 800541c:	4642      	mov	r2, r8
 800541e:	189b      	adds	r3, r3, r2
 8005420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005424:	464b      	mov	r3, r9
 8005426:	460a      	mov	r2, r1
 8005428:	eb42 0303 	adc.w	r3, r2, r3
 800542c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800543c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005440:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005444:	460b      	mov	r3, r1
 8005446:	18db      	adds	r3, r3, r3
 8005448:	62bb      	str	r3, [r7, #40]	; 0x28
 800544a:	4613      	mov	r3, r2
 800544c:	eb42 0303 	adc.w	r3, r2, r3
 8005450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005456:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800545a:	f7fb fd5b 	bl	8000f14 <__aeabi_uldivmod>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <UART_SetConfig+0x2d4>)
 8005464:	fba3 1302 	umull	r1, r3, r3, r2
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	2164      	movs	r1, #100	; 0x64
 800546c:	fb01 f303 	mul.w	r3, r1, r3
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	3332      	adds	r3, #50	; 0x32
 8005476:	4a08      	ldr	r2, [pc, #32]	; (8005498 <UART_SetConfig+0x2d4>)
 8005478:	fba2 2303 	umull	r2, r3, r2, r3
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	f003 0207 	and.w	r2, r3, #7
 8005482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4422      	add	r2, r4
 800548a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800548c:	e106      	b.n	800569c <UART_SetConfig+0x4d8>
 800548e:	bf00      	nop
 8005490:	40011000 	.word	0x40011000
 8005494:	40011400 	.word	0x40011400
 8005498:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800549c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054a0:	2200      	movs	r2, #0
 80054a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054ae:	4642      	mov	r2, r8
 80054b0:	464b      	mov	r3, r9
 80054b2:	1891      	adds	r1, r2, r2
 80054b4:	6239      	str	r1, [r7, #32]
 80054b6:	415b      	adcs	r3, r3
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054be:	4641      	mov	r1, r8
 80054c0:	1854      	adds	r4, r2, r1
 80054c2:	4649      	mov	r1, r9
 80054c4:	eb43 0501 	adc.w	r5, r3, r1
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	00eb      	lsls	r3, r5, #3
 80054d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054d6:	00e2      	lsls	r2, r4, #3
 80054d8:	4614      	mov	r4, r2
 80054da:	461d      	mov	r5, r3
 80054dc:	4643      	mov	r3, r8
 80054de:	18e3      	adds	r3, r4, r3
 80054e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054e4:	464b      	mov	r3, r9
 80054e6:	eb45 0303 	adc.w	r3, r5, r3
 80054ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	f04f 0300 	mov.w	r3, #0
 8005506:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800550a:	4629      	mov	r1, r5
 800550c:	008b      	lsls	r3, r1, #2
 800550e:	4621      	mov	r1, r4
 8005510:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005514:	4621      	mov	r1, r4
 8005516:	008a      	lsls	r2, r1, #2
 8005518:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800551c:	f7fb fcfa 	bl	8000f14 <__aeabi_uldivmod>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	4b60      	ldr	r3, [pc, #384]	; (80056a8 <UART_SetConfig+0x4e4>)
 8005526:	fba3 2302 	umull	r2, r3, r3, r2
 800552a:	095b      	lsrs	r3, r3, #5
 800552c:	011c      	lsls	r4, r3, #4
 800552e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005532:	2200      	movs	r2, #0
 8005534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005538:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800553c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005540:	4642      	mov	r2, r8
 8005542:	464b      	mov	r3, r9
 8005544:	1891      	adds	r1, r2, r2
 8005546:	61b9      	str	r1, [r7, #24]
 8005548:	415b      	adcs	r3, r3
 800554a:	61fb      	str	r3, [r7, #28]
 800554c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005550:	4641      	mov	r1, r8
 8005552:	1851      	adds	r1, r2, r1
 8005554:	6139      	str	r1, [r7, #16]
 8005556:	4649      	mov	r1, r9
 8005558:	414b      	adcs	r3, r1
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005568:	4659      	mov	r1, fp
 800556a:	00cb      	lsls	r3, r1, #3
 800556c:	4651      	mov	r1, sl
 800556e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005572:	4651      	mov	r1, sl
 8005574:	00ca      	lsls	r2, r1, #3
 8005576:	4610      	mov	r0, r2
 8005578:	4619      	mov	r1, r3
 800557a:	4603      	mov	r3, r0
 800557c:	4642      	mov	r2, r8
 800557e:	189b      	adds	r3, r3, r2
 8005580:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005584:	464b      	mov	r3, r9
 8005586:	460a      	mov	r2, r1
 8005588:	eb42 0303 	adc.w	r3, r2, r3
 800558c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	67bb      	str	r3, [r7, #120]	; 0x78
 800559a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055a8:	4649      	mov	r1, r9
 80055aa:	008b      	lsls	r3, r1, #2
 80055ac:	4641      	mov	r1, r8
 80055ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055b2:	4641      	mov	r1, r8
 80055b4:	008a      	lsls	r2, r1, #2
 80055b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055ba:	f7fb fcab 	bl	8000f14 <__aeabi_uldivmod>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	4611      	mov	r1, r2
 80055c4:	4b38      	ldr	r3, [pc, #224]	; (80056a8 <UART_SetConfig+0x4e4>)
 80055c6:	fba3 2301 	umull	r2, r3, r3, r1
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	2264      	movs	r2, #100	; 0x64
 80055ce:	fb02 f303 	mul.w	r3, r2, r3
 80055d2:	1acb      	subs	r3, r1, r3
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	3332      	adds	r3, #50	; 0x32
 80055d8:	4a33      	ldr	r2, [pc, #204]	; (80056a8 <UART_SetConfig+0x4e4>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055e4:	441c      	add	r4, r3
 80055e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ea:	2200      	movs	r2, #0
 80055ec:	673b      	str	r3, [r7, #112]	; 0x70
 80055ee:	677a      	str	r2, [r7, #116]	; 0x74
 80055f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80055f4:	4642      	mov	r2, r8
 80055f6:	464b      	mov	r3, r9
 80055f8:	1891      	adds	r1, r2, r2
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	415b      	adcs	r3, r3
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005604:	4641      	mov	r1, r8
 8005606:	1851      	adds	r1, r2, r1
 8005608:	6039      	str	r1, [r7, #0]
 800560a:	4649      	mov	r1, r9
 800560c:	414b      	adcs	r3, r1
 800560e:	607b      	str	r3, [r7, #4]
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800561c:	4659      	mov	r1, fp
 800561e:	00cb      	lsls	r3, r1, #3
 8005620:	4651      	mov	r1, sl
 8005622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005626:	4651      	mov	r1, sl
 8005628:	00ca      	lsls	r2, r1, #3
 800562a:	4610      	mov	r0, r2
 800562c:	4619      	mov	r1, r3
 800562e:	4603      	mov	r3, r0
 8005630:	4642      	mov	r2, r8
 8005632:	189b      	adds	r3, r3, r2
 8005634:	66bb      	str	r3, [r7, #104]	; 0x68
 8005636:	464b      	mov	r3, r9
 8005638:	460a      	mov	r2, r1
 800563a:	eb42 0303 	adc.w	r3, r2, r3
 800563e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	663b      	str	r3, [r7, #96]	; 0x60
 800564a:	667a      	str	r2, [r7, #100]	; 0x64
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	f04f 0300 	mov.w	r3, #0
 8005654:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005658:	4649      	mov	r1, r9
 800565a:	008b      	lsls	r3, r1, #2
 800565c:	4641      	mov	r1, r8
 800565e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005662:	4641      	mov	r1, r8
 8005664:	008a      	lsls	r2, r1, #2
 8005666:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800566a:	f7fb fc53 	bl	8000f14 <__aeabi_uldivmod>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <UART_SetConfig+0x4e4>)
 8005674:	fba3 1302 	umull	r1, r3, r3, r2
 8005678:	095b      	lsrs	r3, r3, #5
 800567a:	2164      	movs	r1, #100	; 0x64
 800567c:	fb01 f303 	mul.w	r3, r1, r3
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	3332      	adds	r3, #50	; 0x32
 8005686:	4a08      	ldr	r2, [pc, #32]	; (80056a8 <UART_SetConfig+0x4e4>)
 8005688:	fba2 2303 	umull	r2, r3, r2, r3
 800568c:	095b      	lsrs	r3, r3, #5
 800568e:	f003 020f 	and.w	r2, r3, #15
 8005692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4422      	add	r2, r4
 800569a:	609a      	str	r2, [r3, #8]
}
 800569c:	bf00      	nop
 800569e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056a2:	46bd      	mov	sp, r7
 80056a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056a8:	51eb851f 	.word	0x51eb851f

080056ac <__cvt>:
 80056ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056b0:	ec55 4b10 	vmov	r4, r5, d0
 80056b4:	2d00      	cmp	r5, #0
 80056b6:	460e      	mov	r6, r1
 80056b8:	4619      	mov	r1, r3
 80056ba:	462b      	mov	r3, r5
 80056bc:	bfbb      	ittet	lt
 80056be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80056c2:	461d      	movlt	r5, r3
 80056c4:	2300      	movge	r3, #0
 80056c6:	232d      	movlt	r3, #45	; 0x2d
 80056c8:	700b      	strb	r3, [r1, #0]
 80056ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056d0:	4691      	mov	r9, r2
 80056d2:	f023 0820 	bic.w	r8, r3, #32
 80056d6:	bfbc      	itt	lt
 80056d8:	4622      	movlt	r2, r4
 80056da:	4614      	movlt	r4, r2
 80056dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056e0:	d005      	beq.n	80056ee <__cvt+0x42>
 80056e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80056e6:	d100      	bne.n	80056ea <__cvt+0x3e>
 80056e8:	3601      	adds	r6, #1
 80056ea:	2102      	movs	r1, #2
 80056ec:	e000      	b.n	80056f0 <__cvt+0x44>
 80056ee:	2103      	movs	r1, #3
 80056f0:	ab03      	add	r3, sp, #12
 80056f2:	9301      	str	r3, [sp, #4]
 80056f4:	ab02      	add	r3, sp, #8
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	ec45 4b10 	vmov	d0, r4, r5
 80056fc:	4653      	mov	r3, sl
 80056fe:	4632      	mov	r2, r6
 8005700:	f000 fe7a 	bl	80063f8 <_dtoa_r>
 8005704:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005708:	4607      	mov	r7, r0
 800570a:	d102      	bne.n	8005712 <__cvt+0x66>
 800570c:	f019 0f01 	tst.w	r9, #1
 8005710:	d022      	beq.n	8005758 <__cvt+0xac>
 8005712:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005716:	eb07 0906 	add.w	r9, r7, r6
 800571a:	d110      	bne.n	800573e <__cvt+0x92>
 800571c:	783b      	ldrb	r3, [r7, #0]
 800571e:	2b30      	cmp	r3, #48	; 0x30
 8005720:	d10a      	bne.n	8005738 <__cvt+0x8c>
 8005722:	2200      	movs	r2, #0
 8005724:	2300      	movs	r3, #0
 8005726:	4620      	mov	r0, r4
 8005728:	4629      	mov	r1, r5
 800572a:	f7fb f9d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800572e:	b918      	cbnz	r0, 8005738 <__cvt+0x8c>
 8005730:	f1c6 0601 	rsb	r6, r6, #1
 8005734:	f8ca 6000 	str.w	r6, [sl]
 8005738:	f8da 3000 	ldr.w	r3, [sl]
 800573c:	4499      	add	r9, r3
 800573e:	2200      	movs	r2, #0
 8005740:	2300      	movs	r3, #0
 8005742:	4620      	mov	r0, r4
 8005744:	4629      	mov	r1, r5
 8005746:	f7fb f9c7 	bl	8000ad8 <__aeabi_dcmpeq>
 800574a:	b108      	cbz	r0, 8005750 <__cvt+0xa4>
 800574c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005750:	2230      	movs	r2, #48	; 0x30
 8005752:	9b03      	ldr	r3, [sp, #12]
 8005754:	454b      	cmp	r3, r9
 8005756:	d307      	bcc.n	8005768 <__cvt+0xbc>
 8005758:	9b03      	ldr	r3, [sp, #12]
 800575a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800575c:	1bdb      	subs	r3, r3, r7
 800575e:	4638      	mov	r0, r7
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	b004      	add	sp, #16
 8005764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005768:	1c59      	adds	r1, r3, #1
 800576a:	9103      	str	r1, [sp, #12]
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	e7f0      	b.n	8005752 <__cvt+0xa6>

08005770 <__exponent>:
 8005770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005772:	4603      	mov	r3, r0
 8005774:	2900      	cmp	r1, #0
 8005776:	bfb8      	it	lt
 8005778:	4249      	neglt	r1, r1
 800577a:	f803 2b02 	strb.w	r2, [r3], #2
 800577e:	bfb4      	ite	lt
 8005780:	222d      	movlt	r2, #45	; 0x2d
 8005782:	222b      	movge	r2, #43	; 0x2b
 8005784:	2909      	cmp	r1, #9
 8005786:	7042      	strb	r2, [r0, #1]
 8005788:	dd2a      	ble.n	80057e0 <__exponent+0x70>
 800578a:	f10d 0207 	add.w	r2, sp, #7
 800578e:	4617      	mov	r7, r2
 8005790:	260a      	movs	r6, #10
 8005792:	4694      	mov	ip, r2
 8005794:	fb91 f5f6 	sdiv	r5, r1, r6
 8005798:	fb06 1415 	mls	r4, r6, r5, r1
 800579c:	3430      	adds	r4, #48	; 0x30
 800579e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80057a2:	460c      	mov	r4, r1
 80057a4:	2c63      	cmp	r4, #99	; 0x63
 80057a6:	f102 32ff 	add.w	r2, r2, #4294967295
 80057aa:	4629      	mov	r1, r5
 80057ac:	dcf1      	bgt.n	8005792 <__exponent+0x22>
 80057ae:	3130      	adds	r1, #48	; 0x30
 80057b0:	f1ac 0402 	sub.w	r4, ip, #2
 80057b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80057b8:	1c41      	adds	r1, r0, #1
 80057ba:	4622      	mov	r2, r4
 80057bc:	42ba      	cmp	r2, r7
 80057be:	d30a      	bcc.n	80057d6 <__exponent+0x66>
 80057c0:	f10d 0209 	add.w	r2, sp, #9
 80057c4:	eba2 020c 	sub.w	r2, r2, ip
 80057c8:	42bc      	cmp	r4, r7
 80057ca:	bf88      	it	hi
 80057cc:	2200      	movhi	r2, #0
 80057ce:	4413      	add	r3, r2
 80057d0:	1a18      	subs	r0, r3, r0
 80057d2:	b003      	add	sp, #12
 80057d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80057da:	f801 5f01 	strb.w	r5, [r1, #1]!
 80057de:	e7ed      	b.n	80057bc <__exponent+0x4c>
 80057e0:	2330      	movs	r3, #48	; 0x30
 80057e2:	3130      	adds	r1, #48	; 0x30
 80057e4:	7083      	strb	r3, [r0, #2]
 80057e6:	70c1      	strb	r1, [r0, #3]
 80057e8:	1d03      	adds	r3, r0, #4
 80057ea:	e7f1      	b.n	80057d0 <__exponent+0x60>

080057ec <_printf_float>:
 80057ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f0:	ed2d 8b02 	vpush	{d8}
 80057f4:	b08d      	sub	sp, #52	; 0x34
 80057f6:	460c      	mov	r4, r1
 80057f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80057fc:	4616      	mov	r6, r2
 80057fe:	461f      	mov	r7, r3
 8005800:	4605      	mov	r5, r0
 8005802:	f000 fcf9 	bl	80061f8 <_localeconv_r>
 8005806:	f8d0 a000 	ldr.w	sl, [r0]
 800580a:	4650      	mov	r0, sl
 800580c:	f7fa fd38 	bl	8000280 <strlen>
 8005810:	2300      	movs	r3, #0
 8005812:	930a      	str	r3, [sp, #40]	; 0x28
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	9305      	str	r3, [sp, #20]
 8005818:	f8d8 3000 	ldr.w	r3, [r8]
 800581c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005820:	3307      	adds	r3, #7
 8005822:	f023 0307 	bic.w	r3, r3, #7
 8005826:	f103 0208 	add.w	r2, r3, #8
 800582a:	f8c8 2000 	str.w	r2, [r8]
 800582e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005832:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005836:	9307      	str	r3, [sp, #28]
 8005838:	f8cd 8018 	str.w	r8, [sp, #24]
 800583c:	ee08 0a10 	vmov	s16, r0
 8005840:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005844:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005848:	4b9e      	ldr	r3, [pc, #632]	; (8005ac4 <_printf_float+0x2d8>)
 800584a:	f04f 32ff 	mov.w	r2, #4294967295
 800584e:	f7fb f975 	bl	8000b3c <__aeabi_dcmpun>
 8005852:	bb88      	cbnz	r0, 80058b8 <_printf_float+0xcc>
 8005854:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005858:	4b9a      	ldr	r3, [pc, #616]	; (8005ac4 <_printf_float+0x2d8>)
 800585a:	f04f 32ff 	mov.w	r2, #4294967295
 800585e:	f7fb f94f 	bl	8000b00 <__aeabi_dcmple>
 8005862:	bb48      	cbnz	r0, 80058b8 <_printf_float+0xcc>
 8005864:	2200      	movs	r2, #0
 8005866:	2300      	movs	r3, #0
 8005868:	4640      	mov	r0, r8
 800586a:	4649      	mov	r1, r9
 800586c:	f7fb f93e 	bl	8000aec <__aeabi_dcmplt>
 8005870:	b110      	cbz	r0, 8005878 <_printf_float+0x8c>
 8005872:	232d      	movs	r3, #45	; 0x2d
 8005874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005878:	4a93      	ldr	r2, [pc, #588]	; (8005ac8 <_printf_float+0x2dc>)
 800587a:	4b94      	ldr	r3, [pc, #592]	; (8005acc <_printf_float+0x2e0>)
 800587c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005880:	bf94      	ite	ls
 8005882:	4690      	movls	r8, r2
 8005884:	4698      	movhi	r8, r3
 8005886:	2303      	movs	r3, #3
 8005888:	6123      	str	r3, [r4, #16]
 800588a:	9b05      	ldr	r3, [sp, #20]
 800588c:	f023 0304 	bic.w	r3, r3, #4
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	f04f 0900 	mov.w	r9, #0
 8005896:	9700      	str	r7, [sp, #0]
 8005898:	4633      	mov	r3, r6
 800589a:	aa0b      	add	r2, sp, #44	; 0x2c
 800589c:	4621      	mov	r1, r4
 800589e:	4628      	mov	r0, r5
 80058a0:	f000 f9da 	bl	8005c58 <_printf_common>
 80058a4:	3001      	adds	r0, #1
 80058a6:	f040 8090 	bne.w	80059ca <_printf_float+0x1de>
 80058aa:	f04f 30ff 	mov.w	r0, #4294967295
 80058ae:	b00d      	add	sp, #52	; 0x34
 80058b0:	ecbd 8b02 	vpop	{d8}
 80058b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b8:	4642      	mov	r2, r8
 80058ba:	464b      	mov	r3, r9
 80058bc:	4640      	mov	r0, r8
 80058be:	4649      	mov	r1, r9
 80058c0:	f7fb f93c 	bl	8000b3c <__aeabi_dcmpun>
 80058c4:	b140      	cbz	r0, 80058d8 <_printf_float+0xec>
 80058c6:	464b      	mov	r3, r9
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	bfbc      	itt	lt
 80058cc:	232d      	movlt	r3, #45	; 0x2d
 80058ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058d2:	4a7f      	ldr	r2, [pc, #508]	; (8005ad0 <_printf_float+0x2e4>)
 80058d4:	4b7f      	ldr	r3, [pc, #508]	; (8005ad4 <_printf_float+0x2e8>)
 80058d6:	e7d1      	b.n	800587c <_printf_float+0x90>
 80058d8:	6863      	ldr	r3, [r4, #4]
 80058da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80058de:	9206      	str	r2, [sp, #24]
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	d13f      	bne.n	8005964 <_printf_float+0x178>
 80058e4:	2306      	movs	r3, #6
 80058e6:	6063      	str	r3, [r4, #4]
 80058e8:	9b05      	ldr	r3, [sp, #20]
 80058ea:	6861      	ldr	r1, [r4, #4]
 80058ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80058f0:	2300      	movs	r3, #0
 80058f2:	9303      	str	r3, [sp, #12]
 80058f4:	ab0a      	add	r3, sp, #40	; 0x28
 80058f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80058fa:	ab09      	add	r3, sp, #36	; 0x24
 80058fc:	ec49 8b10 	vmov	d0, r8, r9
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	6022      	str	r2, [r4, #0]
 8005904:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005908:	4628      	mov	r0, r5
 800590a:	f7ff fecf 	bl	80056ac <__cvt>
 800590e:	9b06      	ldr	r3, [sp, #24]
 8005910:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005912:	2b47      	cmp	r3, #71	; 0x47
 8005914:	4680      	mov	r8, r0
 8005916:	d108      	bne.n	800592a <_printf_float+0x13e>
 8005918:	1cc8      	adds	r0, r1, #3
 800591a:	db02      	blt.n	8005922 <_printf_float+0x136>
 800591c:	6863      	ldr	r3, [r4, #4]
 800591e:	4299      	cmp	r1, r3
 8005920:	dd41      	ble.n	80059a6 <_printf_float+0x1ba>
 8005922:	f1ab 0302 	sub.w	r3, fp, #2
 8005926:	fa5f fb83 	uxtb.w	fp, r3
 800592a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800592e:	d820      	bhi.n	8005972 <_printf_float+0x186>
 8005930:	3901      	subs	r1, #1
 8005932:	465a      	mov	r2, fp
 8005934:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005938:	9109      	str	r1, [sp, #36]	; 0x24
 800593a:	f7ff ff19 	bl	8005770 <__exponent>
 800593e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005940:	1813      	adds	r3, r2, r0
 8005942:	2a01      	cmp	r2, #1
 8005944:	4681      	mov	r9, r0
 8005946:	6123      	str	r3, [r4, #16]
 8005948:	dc02      	bgt.n	8005950 <_printf_float+0x164>
 800594a:	6822      	ldr	r2, [r4, #0]
 800594c:	07d2      	lsls	r2, r2, #31
 800594e:	d501      	bpl.n	8005954 <_printf_float+0x168>
 8005950:	3301      	adds	r3, #1
 8005952:	6123      	str	r3, [r4, #16]
 8005954:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005958:	2b00      	cmp	r3, #0
 800595a:	d09c      	beq.n	8005896 <_printf_float+0xaa>
 800595c:	232d      	movs	r3, #45	; 0x2d
 800595e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005962:	e798      	b.n	8005896 <_printf_float+0xaa>
 8005964:	9a06      	ldr	r2, [sp, #24]
 8005966:	2a47      	cmp	r2, #71	; 0x47
 8005968:	d1be      	bne.n	80058e8 <_printf_float+0xfc>
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1bc      	bne.n	80058e8 <_printf_float+0xfc>
 800596e:	2301      	movs	r3, #1
 8005970:	e7b9      	b.n	80058e6 <_printf_float+0xfa>
 8005972:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005976:	d118      	bne.n	80059aa <_printf_float+0x1be>
 8005978:	2900      	cmp	r1, #0
 800597a:	6863      	ldr	r3, [r4, #4]
 800597c:	dd0b      	ble.n	8005996 <_printf_float+0x1aa>
 800597e:	6121      	str	r1, [r4, #16]
 8005980:	b913      	cbnz	r3, 8005988 <_printf_float+0x19c>
 8005982:	6822      	ldr	r2, [r4, #0]
 8005984:	07d0      	lsls	r0, r2, #31
 8005986:	d502      	bpl.n	800598e <_printf_float+0x1a2>
 8005988:	3301      	adds	r3, #1
 800598a:	440b      	add	r3, r1
 800598c:	6123      	str	r3, [r4, #16]
 800598e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005990:	f04f 0900 	mov.w	r9, #0
 8005994:	e7de      	b.n	8005954 <_printf_float+0x168>
 8005996:	b913      	cbnz	r3, 800599e <_printf_float+0x1b2>
 8005998:	6822      	ldr	r2, [r4, #0]
 800599a:	07d2      	lsls	r2, r2, #31
 800599c:	d501      	bpl.n	80059a2 <_printf_float+0x1b6>
 800599e:	3302      	adds	r3, #2
 80059a0:	e7f4      	b.n	800598c <_printf_float+0x1a0>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e7f2      	b.n	800598c <_printf_float+0x1a0>
 80059a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80059aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ac:	4299      	cmp	r1, r3
 80059ae:	db05      	blt.n	80059bc <_printf_float+0x1d0>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	6121      	str	r1, [r4, #16]
 80059b4:	07d8      	lsls	r0, r3, #31
 80059b6:	d5ea      	bpl.n	800598e <_printf_float+0x1a2>
 80059b8:	1c4b      	adds	r3, r1, #1
 80059ba:	e7e7      	b.n	800598c <_printf_float+0x1a0>
 80059bc:	2900      	cmp	r1, #0
 80059be:	bfd4      	ite	le
 80059c0:	f1c1 0202 	rsble	r2, r1, #2
 80059c4:	2201      	movgt	r2, #1
 80059c6:	4413      	add	r3, r2
 80059c8:	e7e0      	b.n	800598c <_printf_float+0x1a0>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	055a      	lsls	r2, r3, #21
 80059ce:	d407      	bmi.n	80059e0 <_printf_float+0x1f4>
 80059d0:	6923      	ldr	r3, [r4, #16]
 80059d2:	4642      	mov	r2, r8
 80059d4:	4631      	mov	r1, r6
 80059d6:	4628      	mov	r0, r5
 80059d8:	47b8      	blx	r7
 80059da:	3001      	adds	r0, #1
 80059dc:	d12c      	bne.n	8005a38 <_printf_float+0x24c>
 80059de:	e764      	b.n	80058aa <_printf_float+0xbe>
 80059e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059e4:	f240 80e0 	bls.w	8005ba8 <_printf_float+0x3bc>
 80059e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059ec:	2200      	movs	r2, #0
 80059ee:	2300      	movs	r3, #0
 80059f0:	f7fb f872 	bl	8000ad8 <__aeabi_dcmpeq>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d034      	beq.n	8005a62 <_printf_float+0x276>
 80059f8:	4a37      	ldr	r2, [pc, #220]	; (8005ad8 <_printf_float+0x2ec>)
 80059fa:	2301      	movs	r3, #1
 80059fc:	4631      	mov	r1, r6
 80059fe:	4628      	mov	r0, r5
 8005a00:	47b8      	blx	r7
 8005a02:	3001      	adds	r0, #1
 8005a04:	f43f af51 	beq.w	80058aa <_printf_float+0xbe>
 8005a08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	db02      	blt.n	8005a16 <_printf_float+0x22a>
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	07d8      	lsls	r0, r3, #31
 8005a14:	d510      	bpl.n	8005a38 <_printf_float+0x24c>
 8005a16:	ee18 3a10 	vmov	r3, s16
 8005a1a:	4652      	mov	r2, sl
 8005a1c:	4631      	mov	r1, r6
 8005a1e:	4628      	mov	r0, r5
 8005a20:	47b8      	blx	r7
 8005a22:	3001      	adds	r0, #1
 8005a24:	f43f af41 	beq.w	80058aa <_printf_float+0xbe>
 8005a28:	f04f 0800 	mov.w	r8, #0
 8005a2c:	f104 091a 	add.w	r9, r4, #26
 8005a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a32:	3b01      	subs	r3, #1
 8005a34:	4543      	cmp	r3, r8
 8005a36:	dc09      	bgt.n	8005a4c <_printf_float+0x260>
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	079b      	lsls	r3, r3, #30
 8005a3c:	f100 8107 	bmi.w	8005c4e <_printf_float+0x462>
 8005a40:	68e0      	ldr	r0, [r4, #12]
 8005a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a44:	4298      	cmp	r0, r3
 8005a46:	bfb8      	it	lt
 8005a48:	4618      	movlt	r0, r3
 8005a4a:	e730      	b.n	80058ae <_printf_float+0xc2>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	464a      	mov	r2, r9
 8005a50:	4631      	mov	r1, r6
 8005a52:	4628      	mov	r0, r5
 8005a54:	47b8      	blx	r7
 8005a56:	3001      	adds	r0, #1
 8005a58:	f43f af27 	beq.w	80058aa <_printf_float+0xbe>
 8005a5c:	f108 0801 	add.w	r8, r8, #1
 8005a60:	e7e6      	b.n	8005a30 <_printf_float+0x244>
 8005a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	dc39      	bgt.n	8005adc <_printf_float+0x2f0>
 8005a68:	4a1b      	ldr	r2, [pc, #108]	; (8005ad8 <_printf_float+0x2ec>)
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	4628      	mov	r0, r5
 8005a70:	47b8      	blx	r7
 8005a72:	3001      	adds	r0, #1
 8005a74:	f43f af19 	beq.w	80058aa <_printf_float+0xbe>
 8005a78:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	d102      	bne.n	8005a86 <_printf_float+0x29a>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	07d9      	lsls	r1, r3, #31
 8005a84:	d5d8      	bpl.n	8005a38 <_printf_float+0x24c>
 8005a86:	ee18 3a10 	vmov	r3, s16
 8005a8a:	4652      	mov	r2, sl
 8005a8c:	4631      	mov	r1, r6
 8005a8e:	4628      	mov	r0, r5
 8005a90:	47b8      	blx	r7
 8005a92:	3001      	adds	r0, #1
 8005a94:	f43f af09 	beq.w	80058aa <_printf_float+0xbe>
 8005a98:	f04f 0900 	mov.w	r9, #0
 8005a9c:	f104 0a1a 	add.w	sl, r4, #26
 8005aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa2:	425b      	negs	r3, r3
 8005aa4:	454b      	cmp	r3, r9
 8005aa6:	dc01      	bgt.n	8005aac <_printf_float+0x2c0>
 8005aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aaa:	e792      	b.n	80059d2 <_printf_float+0x1e6>
 8005aac:	2301      	movs	r3, #1
 8005aae:	4652      	mov	r2, sl
 8005ab0:	4631      	mov	r1, r6
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	47b8      	blx	r7
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	f43f aef7 	beq.w	80058aa <_printf_float+0xbe>
 8005abc:	f109 0901 	add.w	r9, r9, #1
 8005ac0:	e7ee      	b.n	8005aa0 <_printf_float+0x2b4>
 8005ac2:	bf00      	nop
 8005ac4:	7fefffff 	.word	0x7fefffff
 8005ac8:	080088a0 	.word	0x080088a0
 8005acc:	080088a4 	.word	0x080088a4
 8005ad0:	080088a8 	.word	0x080088a8
 8005ad4:	080088ac 	.word	0x080088ac
 8005ad8:	080088b0 	.word	0x080088b0
 8005adc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ade:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	bfa8      	it	ge
 8005ae4:	461a      	movge	r2, r3
 8005ae6:	2a00      	cmp	r2, #0
 8005ae8:	4691      	mov	r9, r2
 8005aea:	dc37      	bgt.n	8005b5c <_printf_float+0x370>
 8005aec:	f04f 0b00 	mov.w	fp, #0
 8005af0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005af4:	f104 021a 	add.w	r2, r4, #26
 8005af8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005afa:	9305      	str	r3, [sp, #20]
 8005afc:	eba3 0309 	sub.w	r3, r3, r9
 8005b00:	455b      	cmp	r3, fp
 8005b02:	dc33      	bgt.n	8005b6c <_printf_float+0x380>
 8005b04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	db3b      	blt.n	8005b84 <_printf_float+0x398>
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	07da      	lsls	r2, r3, #31
 8005b10:	d438      	bmi.n	8005b84 <_printf_float+0x398>
 8005b12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005b16:	eba2 0903 	sub.w	r9, r2, r3
 8005b1a:	9b05      	ldr	r3, [sp, #20]
 8005b1c:	1ad2      	subs	r2, r2, r3
 8005b1e:	4591      	cmp	r9, r2
 8005b20:	bfa8      	it	ge
 8005b22:	4691      	movge	r9, r2
 8005b24:	f1b9 0f00 	cmp.w	r9, #0
 8005b28:	dc35      	bgt.n	8005b96 <_printf_float+0x3aa>
 8005b2a:	f04f 0800 	mov.w	r8, #0
 8005b2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b32:	f104 0a1a 	add.w	sl, r4, #26
 8005b36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	eba3 0309 	sub.w	r3, r3, r9
 8005b40:	4543      	cmp	r3, r8
 8005b42:	f77f af79 	ble.w	8005a38 <_printf_float+0x24c>
 8005b46:	2301      	movs	r3, #1
 8005b48:	4652      	mov	r2, sl
 8005b4a:	4631      	mov	r1, r6
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	47b8      	blx	r7
 8005b50:	3001      	adds	r0, #1
 8005b52:	f43f aeaa 	beq.w	80058aa <_printf_float+0xbe>
 8005b56:	f108 0801 	add.w	r8, r8, #1
 8005b5a:	e7ec      	b.n	8005b36 <_printf_float+0x34a>
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	4631      	mov	r1, r6
 8005b60:	4642      	mov	r2, r8
 8005b62:	4628      	mov	r0, r5
 8005b64:	47b8      	blx	r7
 8005b66:	3001      	adds	r0, #1
 8005b68:	d1c0      	bne.n	8005aec <_printf_float+0x300>
 8005b6a:	e69e      	b.n	80058aa <_printf_float+0xbe>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	4631      	mov	r1, r6
 8005b70:	4628      	mov	r0, r5
 8005b72:	9205      	str	r2, [sp, #20]
 8005b74:	47b8      	blx	r7
 8005b76:	3001      	adds	r0, #1
 8005b78:	f43f ae97 	beq.w	80058aa <_printf_float+0xbe>
 8005b7c:	9a05      	ldr	r2, [sp, #20]
 8005b7e:	f10b 0b01 	add.w	fp, fp, #1
 8005b82:	e7b9      	b.n	8005af8 <_printf_float+0x30c>
 8005b84:	ee18 3a10 	vmov	r3, s16
 8005b88:	4652      	mov	r2, sl
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	47b8      	blx	r7
 8005b90:	3001      	adds	r0, #1
 8005b92:	d1be      	bne.n	8005b12 <_printf_float+0x326>
 8005b94:	e689      	b.n	80058aa <_printf_float+0xbe>
 8005b96:	9a05      	ldr	r2, [sp, #20]
 8005b98:	464b      	mov	r3, r9
 8005b9a:	4442      	add	r2, r8
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	47b8      	blx	r7
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	d1c1      	bne.n	8005b2a <_printf_float+0x33e>
 8005ba6:	e680      	b.n	80058aa <_printf_float+0xbe>
 8005ba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005baa:	2a01      	cmp	r2, #1
 8005bac:	dc01      	bgt.n	8005bb2 <_printf_float+0x3c6>
 8005bae:	07db      	lsls	r3, r3, #31
 8005bb0:	d53a      	bpl.n	8005c28 <_printf_float+0x43c>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	4642      	mov	r2, r8
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	4628      	mov	r0, r5
 8005bba:	47b8      	blx	r7
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	f43f ae74 	beq.w	80058aa <_printf_float+0xbe>
 8005bc2:	ee18 3a10 	vmov	r3, s16
 8005bc6:	4652      	mov	r2, sl
 8005bc8:	4631      	mov	r1, r6
 8005bca:	4628      	mov	r0, r5
 8005bcc:	47b8      	blx	r7
 8005bce:	3001      	adds	r0, #1
 8005bd0:	f43f ae6b 	beq.w	80058aa <_printf_float+0xbe>
 8005bd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005be0:	f7fa ff7a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005be4:	b9d8      	cbnz	r0, 8005c1e <_printf_float+0x432>
 8005be6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005bea:	f108 0201 	add.w	r2, r8, #1
 8005bee:	4631      	mov	r1, r6
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	47b8      	blx	r7
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d10e      	bne.n	8005c16 <_printf_float+0x42a>
 8005bf8:	e657      	b.n	80058aa <_printf_float+0xbe>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4652      	mov	r2, sl
 8005bfe:	4631      	mov	r1, r6
 8005c00:	4628      	mov	r0, r5
 8005c02:	47b8      	blx	r7
 8005c04:	3001      	adds	r0, #1
 8005c06:	f43f ae50 	beq.w	80058aa <_printf_float+0xbe>
 8005c0a:	f108 0801 	add.w	r8, r8, #1
 8005c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c10:	3b01      	subs	r3, #1
 8005c12:	4543      	cmp	r3, r8
 8005c14:	dcf1      	bgt.n	8005bfa <_printf_float+0x40e>
 8005c16:	464b      	mov	r3, r9
 8005c18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c1c:	e6da      	b.n	80059d4 <_printf_float+0x1e8>
 8005c1e:	f04f 0800 	mov.w	r8, #0
 8005c22:	f104 0a1a 	add.w	sl, r4, #26
 8005c26:	e7f2      	b.n	8005c0e <_printf_float+0x422>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	4642      	mov	r2, r8
 8005c2c:	e7df      	b.n	8005bee <_printf_float+0x402>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	464a      	mov	r2, r9
 8005c32:	4631      	mov	r1, r6
 8005c34:	4628      	mov	r0, r5
 8005c36:	47b8      	blx	r7
 8005c38:	3001      	adds	r0, #1
 8005c3a:	f43f ae36 	beq.w	80058aa <_printf_float+0xbe>
 8005c3e:	f108 0801 	add.w	r8, r8, #1
 8005c42:	68e3      	ldr	r3, [r4, #12]
 8005c44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c46:	1a5b      	subs	r3, r3, r1
 8005c48:	4543      	cmp	r3, r8
 8005c4a:	dcf0      	bgt.n	8005c2e <_printf_float+0x442>
 8005c4c:	e6f8      	b.n	8005a40 <_printf_float+0x254>
 8005c4e:	f04f 0800 	mov.w	r8, #0
 8005c52:	f104 0919 	add.w	r9, r4, #25
 8005c56:	e7f4      	b.n	8005c42 <_printf_float+0x456>

08005c58 <_printf_common>:
 8005c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5c:	4616      	mov	r6, r2
 8005c5e:	4699      	mov	r9, r3
 8005c60:	688a      	ldr	r2, [r1, #8]
 8005c62:	690b      	ldr	r3, [r1, #16]
 8005c64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	bfb8      	it	lt
 8005c6c:	4613      	movlt	r3, r2
 8005c6e:	6033      	str	r3, [r6, #0]
 8005c70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c74:	4607      	mov	r7, r0
 8005c76:	460c      	mov	r4, r1
 8005c78:	b10a      	cbz	r2, 8005c7e <_printf_common+0x26>
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	6033      	str	r3, [r6, #0]
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	0699      	lsls	r1, r3, #26
 8005c82:	bf42      	ittt	mi
 8005c84:	6833      	ldrmi	r3, [r6, #0]
 8005c86:	3302      	addmi	r3, #2
 8005c88:	6033      	strmi	r3, [r6, #0]
 8005c8a:	6825      	ldr	r5, [r4, #0]
 8005c8c:	f015 0506 	ands.w	r5, r5, #6
 8005c90:	d106      	bne.n	8005ca0 <_printf_common+0x48>
 8005c92:	f104 0a19 	add.w	sl, r4, #25
 8005c96:	68e3      	ldr	r3, [r4, #12]
 8005c98:	6832      	ldr	r2, [r6, #0]
 8005c9a:	1a9b      	subs	r3, r3, r2
 8005c9c:	42ab      	cmp	r3, r5
 8005c9e:	dc26      	bgt.n	8005cee <_printf_common+0x96>
 8005ca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ca4:	1e13      	subs	r3, r2, #0
 8005ca6:	6822      	ldr	r2, [r4, #0]
 8005ca8:	bf18      	it	ne
 8005caa:	2301      	movne	r3, #1
 8005cac:	0692      	lsls	r2, r2, #26
 8005cae:	d42b      	bmi.n	8005d08 <_printf_common+0xb0>
 8005cb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cb4:	4649      	mov	r1, r9
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	47c0      	blx	r8
 8005cba:	3001      	adds	r0, #1
 8005cbc:	d01e      	beq.n	8005cfc <_printf_common+0xa4>
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	6922      	ldr	r2, [r4, #16]
 8005cc2:	f003 0306 	and.w	r3, r3, #6
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	bf02      	ittt	eq
 8005cca:	68e5      	ldreq	r5, [r4, #12]
 8005ccc:	6833      	ldreq	r3, [r6, #0]
 8005cce:	1aed      	subeq	r5, r5, r3
 8005cd0:	68a3      	ldr	r3, [r4, #8]
 8005cd2:	bf0c      	ite	eq
 8005cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cd8:	2500      	movne	r5, #0
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	bfc4      	itt	gt
 8005cde:	1a9b      	subgt	r3, r3, r2
 8005ce0:	18ed      	addgt	r5, r5, r3
 8005ce2:	2600      	movs	r6, #0
 8005ce4:	341a      	adds	r4, #26
 8005ce6:	42b5      	cmp	r5, r6
 8005ce8:	d11a      	bne.n	8005d20 <_printf_common+0xc8>
 8005cea:	2000      	movs	r0, #0
 8005cec:	e008      	b.n	8005d00 <_printf_common+0xa8>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4652      	mov	r2, sl
 8005cf2:	4649      	mov	r1, r9
 8005cf4:	4638      	mov	r0, r7
 8005cf6:	47c0      	blx	r8
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d103      	bne.n	8005d04 <_printf_common+0xac>
 8005cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d04:	3501      	adds	r5, #1
 8005d06:	e7c6      	b.n	8005c96 <_printf_common+0x3e>
 8005d08:	18e1      	adds	r1, r4, r3
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	2030      	movs	r0, #48	; 0x30
 8005d0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d12:	4422      	add	r2, r4
 8005d14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d1c:	3302      	adds	r3, #2
 8005d1e:	e7c7      	b.n	8005cb0 <_printf_common+0x58>
 8005d20:	2301      	movs	r3, #1
 8005d22:	4622      	mov	r2, r4
 8005d24:	4649      	mov	r1, r9
 8005d26:	4638      	mov	r0, r7
 8005d28:	47c0      	blx	r8
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	d0e6      	beq.n	8005cfc <_printf_common+0xa4>
 8005d2e:	3601      	adds	r6, #1
 8005d30:	e7d9      	b.n	8005ce6 <_printf_common+0x8e>
	...

08005d34 <_printf_i>:
 8005d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d38:	7e0f      	ldrb	r7, [r1, #24]
 8005d3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d3c:	2f78      	cmp	r7, #120	; 0x78
 8005d3e:	4691      	mov	r9, r2
 8005d40:	4680      	mov	r8, r0
 8005d42:	460c      	mov	r4, r1
 8005d44:	469a      	mov	sl, r3
 8005d46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d4a:	d807      	bhi.n	8005d5c <_printf_i+0x28>
 8005d4c:	2f62      	cmp	r7, #98	; 0x62
 8005d4e:	d80a      	bhi.n	8005d66 <_printf_i+0x32>
 8005d50:	2f00      	cmp	r7, #0
 8005d52:	f000 80d4 	beq.w	8005efe <_printf_i+0x1ca>
 8005d56:	2f58      	cmp	r7, #88	; 0x58
 8005d58:	f000 80c0 	beq.w	8005edc <_printf_i+0x1a8>
 8005d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d64:	e03a      	b.n	8005ddc <_printf_i+0xa8>
 8005d66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d6a:	2b15      	cmp	r3, #21
 8005d6c:	d8f6      	bhi.n	8005d5c <_printf_i+0x28>
 8005d6e:	a101      	add	r1, pc, #4	; (adr r1, 8005d74 <_printf_i+0x40>)
 8005d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d74:	08005dcd 	.word	0x08005dcd
 8005d78:	08005de1 	.word	0x08005de1
 8005d7c:	08005d5d 	.word	0x08005d5d
 8005d80:	08005d5d 	.word	0x08005d5d
 8005d84:	08005d5d 	.word	0x08005d5d
 8005d88:	08005d5d 	.word	0x08005d5d
 8005d8c:	08005de1 	.word	0x08005de1
 8005d90:	08005d5d 	.word	0x08005d5d
 8005d94:	08005d5d 	.word	0x08005d5d
 8005d98:	08005d5d 	.word	0x08005d5d
 8005d9c:	08005d5d 	.word	0x08005d5d
 8005da0:	08005ee5 	.word	0x08005ee5
 8005da4:	08005e0d 	.word	0x08005e0d
 8005da8:	08005e9f 	.word	0x08005e9f
 8005dac:	08005d5d 	.word	0x08005d5d
 8005db0:	08005d5d 	.word	0x08005d5d
 8005db4:	08005f07 	.word	0x08005f07
 8005db8:	08005d5d 	.word	0x08005d5d
 8005dbc:	08005e0d 	.word	0x08005e0d
 8005dc0:	08005d5d 	.word	0x08005d5d
 8005dc4:	08005d5d 	.word	0x08005d5d
 8005dc8:	08005ea7 	.word	0x08005ea7
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	1d1a      	adds	r2, r3, #4
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	602a      	str	r2, [r5, #0]
 8005dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e09f      	b.n	8005f20 <_printf_i+0x1ec>
 8005de0:	6820      	ldr	r0, [r4, #0]
 8005de2:	682b      	ldr	r3, [r5, #0]
 8005de4:	0607      	lsls	r7, r0, #24
 8005de6:	f103 0104 	add.w	r1, r3, #4
 8005dea:	6029      	str	r1, [r5, #0]
 8005dec:	d501      	bpl.n	8005df2 <_printf_i+0xbe>
 8005dee:	681e      	ldr	r6, [r3, #0]
 8005df0:	e003      	b.n	8005dfa <_printf_i+0xc6>
 8005df2:	0646      	lsls	r6, r0, #25
 8005df4:	d5fb      	bpl.n	8005dee <_printf_i+0xba>
 8005df6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005dfa:	2e00      	cmp	r6, #0
 8005dfc:	da03      	bge.n	8005e06 <_printf_i+0xd2>
 8005dfe:	232d      	movs	r3, #45	; 0x2d
 8005e00:	4276      	negs	r6, r6
 8005e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e06:	485a      	ldr	r0, [pc, #360]	; (8005f70 <_printf_i+0x23c>)
 8005e08:	230a      	movs	r3, #10
 8005e0a:	e012      	b.n	8005e32 <_printf_i+0xfe>
 8005e0c:	682b      	ldr	r3, [r5, #0]
 8005e0e:	6820      	ldr	r0, [r4, #0]
 8005e10:	1d19      	adds	r1, r3, #4
 8005e12:	6029      	str	r1, [r5, #0]
 8005e14:	0605      	lsls	r5, r0, #24
 8005e16:	d501      	bpl.n	8005e1c <_printf_i+0xe8>
 8005e18:	681e      	ldr	r6, [r3, #0]
 8005e1a:	e002      	b.n	8005e22 <_printf_i+0xee>
 8005e1c:	0641      	lsls	r1, r0, #25
 8005e1e:	d5fb      	bpl.n	8005e18 <_printf_i+0xe4>
 8005e20:	881e      	ldrh	r6, [r3, #0]
 8005e22:	4853      	ldr	r0, [pc, #332]	; (8005f70 <_printf_i+0x23c>)
 8005e24:	2f6f      	cmp	r7, #111	; 0x6f
 8005e26:	bf0c      	ite	eq
 8005e28:	2308      	moveq	r3, #8
 8005e2a:	230a      	movne	r3, #10
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e32:	6865      	ldr	r5, [r4, #4]
 8005e34:	60a5      	str	r5, [r4, #8]
 8005e36:	2d00      	cmp	r5, #0
 8005e38:	bfa2      	ittt	ge
 8005e3a:	6821      	ldrge	r1, [r4, #0]
 8005e3c:	f021 0104 	bicge.w	r1, r1, #4
 8005e40:	6021      	strge	r1, [r4, #0]
 8005e42:	b90e      	cbnz	r6, 8005e48 <_printf_i+0x114>
 8005e44:	2d00      	cmp	r5, #0
 8005e46:	d04b      	beq.n	8005ee0 <_printf_i+0x1ac>
 8005e48:	4615      	mov	r5, r2
 8005e4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e4e:	fb03 6711 	mls	r7, r3, r1, r6
 8005e52:	5dc7      	ldrb	r7, [r0, r7]
 8005e54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e58:	4637      	mov	r7, r6
 8005e5a:	42bb      	cmp	r3, r7
 8005e5c:	460e      	mov	r6, r1
 8005e5e:	d9f4      	bls.n	8005e4a <_printf_i+0x116>
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d10b      	bne.n	8005e7c <_printf_i+0x148>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	07de      	lsls	r6, r3, #31
 8005e68:	d508      	bpl.n	8005e7c <_printf_i+0x148>
 8005e6a:	6923      	ldr	r3, [r4, #16]
 8005e6c:	6861      	ldr	r1, [r4, #4]
 8005e6e:	4299      	cmp	r1, r3
 8005e70:	bfde      	ittt	le
 8005e72:	2330      	movle	r3, #48	; 0x30
 8005e74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e7c:	1b52      	subs	r2, r2, r5
 8005e7e:	6122      	str	r2, [r4, #16]
 8005e80:	f8cd a000 	str.w	sl, [sp]
 8005e84:	464b      	mov	r3, r9
 8005e86:	aa03      	add	r2, sp, #12
 8005e88:	4621      	mov	r1, r4
 8005e8a:	4640      	mov	r0, r8
 8005e8c:	f7ff fee4 	bl	8005c58 <_printf_common>
 8005e90:	3001      	adds	r0, #1
 8005e92:	d14a      	bne.n	8005f2a <_printf_i+0x1f6>
 8005e94:	f04f 30ff 	mov.w	r0, #4294967295
 8005e98:	b004      	add	sp, #16
 8005e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	f043 0320 	orr.w	r3, r3, #32
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	4833      	ldr	r0, [pc, #204]	; (8005f74 <_printf_i+0x240>)
 8005ea8:	2778      	movs	r7, #120	; 0x78
 8005eaa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	6829      	ldr	r1, [r5, #0]
 8005eb2:	061f      	lsls	r7, r3, #24
 8005eb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005eb8:	d402      	bmi.n	8005ec0 <_printf_i+0x18c>
 8005eba:	065f      	lsls	r7, r3, #25
 8005ebc:	bf48      	it	mi
 8005ebe:	b2b6      	uxthmi	r6, r6
 8005ec0:	07df      	lsls	r7, r3, #31
 8005ec2:	bf48      	it	mi
 8005ec4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ec8:	6029      	str	r1, [r5, #0]
 8005eca:	bf48      	it	mi
 8005ecc:	6023      	strmi	r3, [r4, #0]
 8005ece:	b91e      	cbnz	r6, 8005ed8 <_printf_i+0x1a4>
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	f023 0320 	bic.w	r3, r3, #32
 8005ed6:	6023      	str	r3, [r4, #0]
 8005ed8:	2310      	movs	r3, #16
 8005eda:	e7a7      	b.n	8005e2c <_printf_i+0xf8>
 8005edc:	4824      	ldr	r0, [pc, #144]	; (8005f70 <_printf_i+0x23c>)
 8005ede:	e7e4      	b.n	8005eaa <_printf_i+0x176>
 8005ee0:	4615      	mov	r5, r2
 8005ee2:	e7bd      	b.n	8005e60 <_printf_i+0x12c>
 8005ee4:	682b      	ldr	r3, [r5, #0]
 8005ee6:	6826      	ldr	r6, [r4, #0]
 8005ee8:	6961      	ldr	r1, [r4, #20]
 8005eea:	1d18      	adds	r0, r3, #4
 8005eec:	6028      	str	r0, [r5, #0]
 8005eee:	0635      	lsls	r5, r6, #24
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	d501      	bpl.n	8005ef8 <_printf_i+0x1c4>
 8005ef4:	6019      	str	r1, [r3, #0]
 8005ef6:	e002      	b.n	8005efe <_printf_i+0x1ca>
 8005ef8:	0670      	lsls	r0, r6, #25
 8005efa:	d5fb      	bpl.n	8005ef4 <_printf_i+0x1c0>
 8005efc:	8019      	strh	r1, [r3, #0]
 8005efe:	2300      	movs	r3, #0
 8005f00:	6123      	str	r3, [r4, #16]
 8005f02:	4615      	mov	r5, r2
 8005f04:	e7bc      	b.n	8005e80 <_printf_i+0x14c>
 8005f06:	682b      	ldr	r3, [r5, #0]
 8005f08:	1d1a      	adds	r2, r3, #4
 8005f0a:	602a      	str	r2, [r5, #0]
 8005f0c:	681d      	ldr	r5, [r3, #0]
 8005f0e:	6862      	ldr	r2, [r4, #4]
 8005f10:	2100      	movs	r1, #0
 8005f12:	4628      	mov	r0, r5
 8005f14:	f7fa f964 	bl	80001e0 <memchr>
 8005f18:	b108      	cbz	r0, 8005f1e <_printf_i+0x1ea>
 8005f1a:	1b40      	subs	r0, r0, r5
 8005f1c:	6060      	str	r0, [r4, #4]
 8005f1e:	6863      	ldr	r3, [r4, #4]
 8005f20:	6123      	str	r3, [r4, #16]
 8005f22:	2300      	movs	r3, #0
 8005f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f28:	e7aa      	b.n	8005e80 <_printf_i+0x14c>
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	462a      	mov	r2, r5
 8005f2e:	4649      	mov	r1, r9
 8005f30:	4640      	mov	r0, r8
 8005f32:	47d0      	blx	sl
 8005f34:	3001      	adds	r0, #1
 8005f36:	d0ad      	beq.n	8005e94 <_printf_i+0x160>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	079b      	lsls	r3, r3, #30
 8005f3c:	d413      	bmi.n	8005f66 <_printf_i+0x232>
 8005f3e:	68e0      	ldr	r0, [r4, #12]
 8005f40:	9b03      	ldr	r3, [sp, #12]
 8005f42:	4298      	cmp	r0, r3
 8005f44:	bfb8      	it	lt
 8005f46:	4618      	movlt	r0, r3
 8005f48:	e7a6      	b.n	8005e98 <_printf_i+0x164>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	4649      	mov	r1, r9
 8005f50:	4640      	mov	r0, r8
 8005f52:	47d0      	blx	sl
 8005f54:	3001      	adds	r0, #1
 8005f56:	d09d      	beq.n	8005e94 <_printf_i+0x160>
 8005f58:	3501      	adds	r5, #1
 8005f5a:	68e3      	ldr	r3, [r4, #12]
 8005f5c:	9903      	ldr	r1, [sp, #12]
 8005f5e:	1a5b      	subs	r3, r3, r1
 8005f60:	42ab      	cmp	r3, r5
 8005f62:	dcf2      	bgt.n	8005f4a <_printf_i+0x216>
 8005f64:	e7eb      	b.n	8005f3e <_printf_i+0x20a>
 8005f66:	2500      	movs	r5, #0
 8005f68:	f104 0619 	add.w	r6, r4, #25
 8005f6c:	e7f5      	b.n	8005f5a <_printf_i+0x226>
 8005f6e:	bf00      	nop
 8005f70:	080088b2 	.word	0x080088b2
 8005f74:	080088c3 	.word	0x080088c3

08005f78 <std>:
 8005f78:	2300      	movs	r3, #0
 8005f7a:	b510      	push	{r4, lr}
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f86:	6083      	str	r3, [r0, #8]
 8005f88:	8181      	strh	r1, [r0, #12]
 8005f8a:	6643      	str	r3, [r0, #100]	; 0x64
 8005f8c:	81c2      	strh	r2, [r0, #14]
 8005f8e:	6183      	str	r3, [r0, #24]
 8005f90:	4619      	mov	r1, r3
 8005f92:	2208      	movs	r2, #8
 8005f94:	305c      	adds	r0, #92	; 0x5c
 8005f96:	f000 f926 	bl	80061e6 <memset>
 8005f9a:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <std+0x58>)
 8005f9c:	6263      	str	r3, [r4, #36]	; 0x24
 8005f9e:	4b0d      	ldr	r3, [pc, #52]	; (8005fd4 <std+0x5c>)
 8005fa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <std+0x60>)
 8005fa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <std+0x64>)
 8005fa8:	6323      	str	r3, [r4, #48]	; 0x30
 8005faa:	4b0d      	ldr	r3, [pc, #52]	; (8005fe0 <std+0x68>)
 8005fac:	6224      	str	r4, [r4, #32]
 8005fae:	429c      	cmp	r4, r3
 8005fb0:	d006      	beq.n	8005fc0 <std+0x48>
 8005fb2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005fb6:	4294      	cmp	r4, r2
 8005fb8:	d002      	beq.n	8005fc0 <std+0x48>
 8005fba:	33d0      	adds	r3, #208	; 0xd0
 8005fbc:	429c      	cmp	r4, r3
 8005fbe:	d105      	bne.n	8005fcc <std+0x54>
 8005fc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fc8:	f000 b98a 	b.w	80062e0 <__retarget_lock_init_recursive>
 8005fcc:	bd10      	pop	{r4, pc}
 8005fce:	bf00      	nop
 8005fd0:	08006161 	.word	0x08006161
 8005fd4:	08006183 	.word	0x08006183
 8005fd8:	080061bb 	.word	0x080061bb
 8005fdc:	080061df 	.word	0x080061df
 8005fe0:	20000310 	.word	0x20000310

08005fe4 <stdio_exit_handler>:
 8005fe4:	4a02      	ldr	r2, [pc, #8]	; (8005ff0 <stdio_exit_handler+0xc>)
 8005fe6:	4903      	ldr	r1, [pc, #12]	; (8005ff4 <stdio_exit_handler+0x10>)
 8005fe8:	4803      	ldr	r0, [pc, #12]	; (8005ff8 <stdio_exit_handler+0x14>)
 8005fea:	f000 b869 	b.w	80060c0 <_fwalk_sglue>
 8005fee:	bf00      	nop
 8005ff0:	2000000c 	.word	0x2000000c
 8005ff4:	08007f19 	.word	0x08007f19
 8005ff8:	20000018 	.word	0x20000018

08005ffc <cleanup_stdio>:
 8005ffc:	6841      	ldr	r1, [r0, #4]
 8005ffe:	4b0c      	ldr	r3, [pc, #48]	; (8006030 <cleanup_stdio+0x34>)
 8006000:	4299      	cmp	r1, r3
 8006002:	b510      	push	{r4, lr}
 8006004:	4604      	mov	r4, r0
 8006006:	d001      	beq.n	800600c <cleanup_stdio+0x10>
 8006008:	f001 ff86 	bl	8007f18 <_fflush_r>
 800600c:	68a1      	ldr	r1, [r4, #8]
 800600e:	4b09      	ldr	r3, [pc, #36]	; (8006034 <cleanup_stdio+0x38>)
 8006010:	4299      	cmp	r1, r3
 8006012:	d002      	beq.n	800601a <cleanup_stdio+0x1e>
 8006014:	4620      	mov	r0, r4
 8006016:	f001 ff7f 	bl	8007f18 <_fflush_r>
 800601a:	68e1      	ldr	r1, [r4, #12]
 800601c:	4b06      	ldr	r3, [pc, #24]	; (8006038 <cleanup_stdio+0x3c>)
 800601e:	4299      	cmp	r1, r3
 8006020:	d004      	beq.n	800602c <cleanup_stdio+0x30>
 8006022:	4620      	mov	r0, r4
 8006024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006028:	f001 bf76 	b.w	8007f18 <_fflush_r>
 800602c:	bd10      	pop	{r4, pc}
 800602e:	bf00      	nop
 8006030:	20000310 	.word	0x20000310
 8006034:	20000378 	.word	0x20000378
 8006038:	200003e0 	.word	0x200003e0

0800603c <global_stdio_init.part.0>:
 800603c:	b510      	push	{r4, lr}
 800603e:	4b0b      	ldr	r3, [pc, #44]	; (800606c <global_stdio_init.part.0+0x30>)
 8006040:	4c0b      	ldr	r4, [pc, #44]	; (8006070 <global_stdio_init.part.0+0x34>)
 8006042:	4a0c      	ldr	r2, [pc, #48]	; (8006074 <global_stdio_init.part.0+0x38>)
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	4620      	mov	r0, r4
 8006048:	2200      	movs	r2, #0
 800604a:	2104      	movs	r1, #4
 800604c:	f7ff ff94 	bl	8005f78 <std>
 8006050:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006054:	2201      	movs	r2, #1
 8006056:	2109      	movs	r1, #9
 8006058:	f7ff ff8e 	bl	8005f78 <std>
 800605c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006060:	2202      	movs	r2, #2
 8006062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006066:	2112      	movs	r1, #18
 8006068:	f7ff bf86 	b.w	8005f78 <std>
 800606c:	20000448 	.word	0x20000448
 8006070:	20000310 	.word	0x20000310
 8006074:	08005fe5 	.word	0x08005fe5

08006078 <__sfp_lock_acquire>:
 8006078:	4801      	ldr	r0, [pc, #4]	; (8006080 <__sfp_lock_acquire+0x8>)
 800607a:	f000 b932 	b.w	80062e2 <__retarget_lock_acquire_recursive>
 800607e:	bf00      	nop
 8006080:	20000451 	.word	0x20000451

08006084 <__sfp_lock_release>:
 8006084:	4801      	ldr	r0, [pc, #4]	; (800608c <__sfp_lock_release+0x8>)
 8006086:	f000 b92d 	b.w	80062e4 <__retarget_lock_release_recursive>
 800608a:	bf00      	nop
 800608c:	20000451 	.word	0x20000451

08006090 <__sinit>:
 8006090:	b510      	push	{r4, lr}
 8006092:	4604      	mov	r4, r0
 8006094:	f7ff fff0 	bl	8006078 <__sfp_lock_acquire>
 8006098:	6a23      	ldr	r3, [r4, #32]
 800609a:	b11b      	cbz	r3, 80060a4 <__sinit+0x14>
 800609c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a0:	f7ff bff0 	b.w	8006084 <__sfp_lock_release>
 80060a4:	4b04      	ldr	r3, [pc, #16]	; (80060b8 <__sinit+0x28>)
 80060a6:	6223      	str	r3, [r4, #32]
 80060a8:	4b04      	ldr	r3, [pc, #16]	; (80060bc <__sinit+0x2c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1f5      	bne.n	800609c <__sinit+0xc>
 80060b0:	f7ff ffc4 	bl	800603c <global_stdio_init.part.0>
 80060b4:	e7f2      	b.n	800609c <__sinit+0xc>
 80060b6:	bf00      	nop
 80060b8:	08005ffd 	.word	0x08005ffd
 80060bc:	20000448 	.word	0x20000448

080060c0 <_fwalk_sglue>:
 80060c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060c4:	4607      	mov	r7, r0
 80060c6:	4688      	mov	r8, r1
 80060c8:	4614      	mov	r4, r2
 80060ca:	2600      	movs	r6, #0
 80060cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060d0:	f1b9 0901 	subs.w	r9, r9, #1
 80060d4:	d505      	bpl.n	80060e2 <_fwalk_sglue+0x22>
 80060d6:	6824      	ldr	r4, [r4, #0]
 80060d8:	2c00      	cmp	r4, #0
 80060da:	d1f7      	bne.n	80060cc <_fwalk_sglue+0xc>
 80060dc:	4630      	mov	r0, r6
 80060de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060e2:	89ab      	ldrh	r3, [r5, #12]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d907      	bls.n	80060f8 <_fwalk_sglue+0x38>
 80060e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060ec:	3301      	adds	r3, #1
 80060ee:	d003      	beq.n	80060f8 <_fwalk_sglue+0x38>
 80060f0:	4629      	mov	r1, r5
 80060f2:	4638      	mov	r0, r7
 80060f4:	47c0      	blx	r8
 80060f6:	4306      	orrs	r6, r0
 80060f8:	3568      	adds	r5, #104	; 0x68
 80060fa:	e7e9      	b.n	80060d0 <_fwalk_sglue+0x10>

080060fc <iprintf>:
 80060fc:	b40f      	push	{r0, r1, r2, r3}
 80060fe:	b507      	push	{r0, r1, r2, lr}
 8006100:	4906      	ldr	r1, [pc, #24]	; (800611c <iprintf+0x20>)
 8006102:	ab04      	add	r3, sp, #16
 8006104:	6808      	ldr	r0, [r1, #0]
 8006106:	f853 2b04 	ldr.w	r2, [r3], #4
 800610a:	6881      	ldr	r1, [r0, #8]
 800610c:	9301      	str	r3, [sp, #4]
 800610e:	f001 fd63 	bl	8007bd8 <_vfiprintf_r>
 8006112:	b003      	add	sp, #12
 8006114:	f85d eb04 	ldr.w	lr, [sp], #4
 8006118:	b004      	add	sp, #16
 800611a:	4770      	bx	lr
 800611c:	20000064 	.word	0x20000064

08006120 <siprintf>:
 8006120:	b40e      	push	{r1, r2, r3}
 8006122:	b500      	push	{lr}
 8006124:	b09c      	sub	sp, #112	; 0x70
 8006126:	ab1d      	add	r3, sp, #116	; 0x74
 8006128:	9002      	str	r0, [sp, #8]
 800612a:	9006      	str	r0, [sp, #24]
 800612c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006130:	4809      	ldr	r0, [pc, #36]	; (8006158 <siprintf+0x38>)
 8006132:	9107      	str	r1, [sp, #28]
 8006134:	9104      	str	r1, [sp, #16]
 8006136:	4909      	ldr	r1, [pc, #36]	; (800615c <siprintf+0x3c>)
 8006138:	f853 2b04 	ldr.w	r2, [r3], #4
 800613c:	9105      	str	r1, [sp, #20]
 800613e:	6800      	ldr	r0, [r0, #0]
 8006140:	9301      	str	r3, [sp, #4]
 8006142:	a902      	add	r1, sp, #8
 8006144:	f001 fc20 	bl	8007988 <_svfiprintf_r>
 8006148:	9b02      	ldr	r3, [sp, #8]
 800614a:	2200      	movs	r2, #0
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	b01c      	add	sp, #112	; 0x70
 8006150:	f85d eb04 	ldr.w	lr, [sp], #4
 8006154:	b003      	add	sp, #12
 8006156:	4770      	bx	lr
 8006158:	20000064 	.word	0x20000064
 800615c:	ffff0208 	.word	0xffff0208

08006160 <__sread>:
 8006160:	b510      	push	{r4, lr}
 8006162:	460c      	mov	r4, r1
 8006164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006168:	f000 f86c 	bl	8006244 <_read_r>
 800616c:	2800      	cmp	r0, #0
 800616e:	bfab      	itete	ge
 8006170:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006172:	89a3      	ldrhlt	r3, [r4, #12]
 8006174:	181b      	addge	r3, r3, r0
 8006176:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800617a:	bfac      	ite	ge
 800617c:	6563      	strge	r3, [r4, #84]	; 0x54
 800617e:	81a3      	strhlt	r3, [r4, #12]
 8006180:	bd10      	pop	{r4, pc}

08006182 <__swrite>:
 8006182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006186:	461f      	mov	r7, r3
 8006188:	898b      	ldrh	r3, [r1, #12]
 800618a:	05db      	lsls	r3, r3, #23
 800618c:	4605      	mov	r5, r0
 800618e:	460c      	mov	r4, r1
 8006190:	4616      	mov	r6, r2
 8006192:	d505      	bpl.n	80061a0 <__swrite+0x1e>
 8006194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006198:	2302      	movs	r3, #2
 800619a:	2200      	movs	r2, #0
 800619c:	f000 f840 	bl	8006220 <_lseek_r>
 80061a0:	89a3      	ldrh	r3, [r4, #12]
 80061a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061aa:	81a3      	strh	r3, [r4, #12]
 80061ac:	4632      	mov	r2, r6
 80061ae:	463b      	mov	r3, r7
 80061b0:	4628      	mov	r0, r5
 80061b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061b6:	f000 b857 	b.w	8006268 <_write_r>

080061ba <__sseek>:
 80061ba:	b510      	push	{r4, lr}
 80061bc:	460c      	mov	r4, r1
 80061be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c2:	f000 f82d 	bl	8006220 <_lseek_r>
 80061c6:	1c43      	adds	r3, r0, #1
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	bf15      	itete	ne
 80061cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80061ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061d6:	81a3      	strheq	r3, [r4, #12]
 80061d8:	bf18      	it	ne
 80061da:	81a3      	strhne	r3, [r4, #12]
 80061dc:	bd10      	pop	{r4, pc}

080061de <__sclose>:
 80061de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e2:	f000 b80d 	b.w	8006200 <_close_r>

080061e6 <memset>:
 80061e6:	4402      	add	r2, r0
 80061e8:	4603      	mov	r3, r0
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d100      	bne.n	80061f0 <memset+0xa>
 80061ee:	4770      	bx	lr
 80061f0:	f803 1b01 	strb.w	r1, [r3], #1
 80061f4:	e7f9      	b.n	80061ea <memset+0x4>
	...

080061f8 <_localeconv_r>:
 80061f8:	4800      	ldr	r0, [pc, #0]	; (80061fc <_localeconv_r+0x4>)
 80061fa:	4770      	bx	lr
 80061fc:	20000158 	.word	0x20000158

08006200 <_close_r>:
 8006200:	b538      	push	{r3, r4, r5, lr}
 8006202:	4d06      	ldr	r5, [pc, #24]	; (800621c <_close_r+0x1c>)
 8006204:	2300      	movs	r3, #0
 8006206:	4604      	mov	r4, r0
 8006208:	4608      	mov	r0, r1
 800620a:	602b      	str	r3, [r5, #0]
 800620c:	f7fc fc9f 	bl	8002b4e <_close>
 8006210:	1c43      	adds	r3, r0, #1
 8006212:	d102      	bne.n	800621a <_close_r+0x1a>
 8006214:	682b      	ldr	r3, [r5, #0]
 8006216:	b103      	cbz	r3, 800621a <_close_r+0x1a>
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	bd38      	pop	{r3, r4, r5, pc}
 800621c:	2000044c 	.word	0x2000044c

08006220 <_lseek_r>:
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	4d07      	ldr	r5, [pc, #28]	; (8006240 <_lseek_r+0x20>)
 8006224:	4604      	mov	r4, r0
 8006226:	4608      	mov	r0, r1
 8006228:	4611      	mov	r1, r2
 800622a:	2200      	movs	r2, #0
 800622c:	602a      	str	r2, [r5, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	f7fc fcb4 	bl	8002b9c <_lseek>
 8006234:	1c43      	adds	r3, r0, #1
 8006236:	d102      	bne.n	800623e <_lseek_r+0x1e>
 8006238:	682b      	ldr	r3, [r5, #0]
 800623a:	b103      	cbz	r3, 800623e <_lseek_r+0x1e>
 800623c:	6023      	str	r3, [r4, #0]
 800623e:	bd38      	pop	{r3, r4, r5, pc}
 8006240:	2000044c 	.word	0x2000044c

08006244 <_read_r>:
 8006244:	b538      	push	{r3, r4, r5, lr}
 8006246:	4d07      	ldr	r5, [pc, #28]	; (8006264 <_read_r+0x20>)
 8006248:	4604      	mov	r4, r0
 800624a:	4608      	mov	r0, r1
 800624c:	4611      	mov	r1, r2
 800624e:	2200      	movs	r2, #0
 8006250:	602a      	str	r2, [r5, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	f7fc fc42 	bl	8002adc <_read>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d102      	bne.n	8006262 <_read_r+0x1e>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	b103      	cbz	r3, 8006262 <_read_r+0x1e>
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	bd38      	pop	{r3, r4, r5, pc}
 8006264:	2000044c 	.word	0x2000044c

08006268 <_write_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4d07      	ldr	r5, [pc, #28]	; (8006288 <_write_r+0x20>)
 800626c:	4604      	mov	r4, r0
 800626e:	4608      	mov	r0, r1
 8006270:	4611      	mov	r1, r2
 8006272:	2200      	movs	r2, #0
 8006274:	602a      	str	r2, [r5, #0]
 8006276:	461a      	mov	r2, r3
 8006278:	f7fc fc4d 	bl	8002b16 <_write>
 800627c:	1c43      	adds	r3, r0, #1
 800627e:	d102      	bne.n	8006286 <_write_r+0x1e>
 8006280:	682b      	ldr	r3, [r5, #0]
 8006282:	b103      	cbz	r3, 8006286 <_write_r+0x1e>
 8006284:	6023      	str	r3, [r4, #0]
 8006286:	bd38      	pop	{r3, r4, r5, pc}
 8006288:	2000044c 	.word	0x2000044c

0800628c <__errno>:
 800628c:	4b01      	ldr	r3, [pc, #4]	; (8006294 <__errno+0x8>)
 800628e:	6818      	ldr	r0, [r3, #0]
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	20000064 	.word	0x20000064

08006298 <__libc_init_array>:
 8006298:	b570      	push	{r4, r5, r6, lr}
 800629a:	4d0d      	ldr	r5, [pc, #52]	; (80062d0 <__libc_init_array+0x38>)
 800629c:	4c0d      	ldr	r4, [pc, #52]	; (80062d4 <__libc_init_array+0x3c>)
 800629e:	1b64      	subs	r4, r4, r5
 80062a0:	10a4      	asrs	r4, r4, #2
 80062a2:	2600      	movs	r6, #0
 80062a4:	42a6      	cmp	r6, r4
 80062a6:	d109      	bne.n	80062bc <__libc_init_array+0x24>
 80062a8:	4d0b      	ldr	r5, [pc, #44]	; (80062d8 <__libc_init_array+0x40>)
 80062aa:	4c0c      	ldr	r4, [pc, #48]	; (80062dc <__libc_init_array+0x44>)
 80062ac:	f002 fa9a 	bl	80087e4 <_init>
 80062b0:	1b64      	subs	r4, r4, r5
 80062b2:	10a4      	asrs	r4, r4, #2
 80062b4:	2600      	movs	r6, #0
 80062b6:	42a6      	cmp	r6, r4
 80062b8:	d105      	bne.n	80062c6 <__libc_init_array+0x2e>
 80062ba:	bd70      	pop	{r4, r5, r6, pc}
 80062bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80062c0:	4798      	blx	r3
 80062c2:	3601      	adds	r6, #1
 80062c4:	e7ee      	b.n	80062a4 <__libc_init_array+0xc>
 80062c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ca:	4798      	blx	r3
 80062cc:	3601      	adds	r6, #1
 80062ce:	e7f2      	b.n	80062b6 <__libc_init_array+0x1e>
 80062d0:	08008c1c 	.word	0x08008c1c
 80062d4:	08008c1c 	.word	0x08008c1c
 80062d8:	08008c1c 	.word	0x08008c1c
 80062dc:	08008c20 	.word	0x08008c20

080062e0 <__retarget_lock_init_recursive>:
 80062e0:	4770      	bx	lr

080062e2 <__retarget_lock_acquire_recursive>:
 80062e2:	4770      	bx	lr

080062e4 <__retarget_lock_release_recursive>:
 80062e4:	4770      	bx	lr

080062e6 <quorem>:
 80062e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ea:	6903      	ldr	r3, [r0, #16]
 80062ec:	690c      	ldr	r4, [r1, #16]
 80062ee:	42a3      	cmp	r3, r4
 80062f0:	4607      	mov	r7, r0
 80062f2:	db7e      	blt.n	80063f2 <quorem+0x10c>
 80062f4:	3c01      	subs	r4, #1
 80062f6:	f101 0814 	add.w	r8, r1, #20
 80062fa:	f100 0514 	add.w	r5, r0, #20
 80062fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006302:	9301      	str	r3, [sp, #4]
 8006304:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006308:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800630c:	3301      	adds	r3, #1
 800630e:	429a      	cmp	r2, r3
 8006310:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006314:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006318:	fbb2 f6f3 	udiv	r6, r2, r3
 800631c:	d331      	bcc.n	8006382 <quorem+0x9c>
 800631e:	f04f 0e00 	mov.w	lr, #0
 8006322:	4640      	mov	r0, r8
 8006324:	46ac      	mov	ip, r5
 8006326:	46f2      	mov	sl, lr
 8006328:	f850 2b04 	ldr.w	r2, [r0], #4
 800632c:	b293      	uxth	r3, r2
 800632e:	fb06 e303 	mla	r3, r6, r3, lr
 8006332:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006336:	0c1a      	lsrs	r2, r3, #16
 8006338:	b29b      	uxth	r3, r3
 800633a:	ebaa 0303 	sub.w	r3, sl, r3
 800633e:	f8dc a000 	ldr.w	sl, [ip]
 8006342:	fa13 f38a 	uxtah	r3, r3, sl
 8006346:	fb06 220e 	mla	r2, r6, lr, r2
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	9b00      	ldr	r3, [sp, #0]
 800634e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006352:	b292      	uxth	r2, r2
 8006354:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006358:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800635c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006360:	4581      	cmp	r9, r0
 8006362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006366:	f84c 3b04 	str.w	r3, [ip], #4
 800636a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800636e:	d2db      	bcs.n	8006328 <quorem+0x42>
 8006370:	f855 300b 	ldr.w	r3, [r5, fp]
 8006374:	b92b      	cbnz	r3, 8006382 <quorem+0x9c>
 8006376:	9b01      	ldr	r3, [sp, #4]
 8006378:	3b04      	subs	r3, #4
 800637a:	429d      	cmp	r5, r3
 800637c:	461a      	mov	r2, r3
 800637e:	d32c      	bcc.n	80063da <quorem+0xf4>
 8006380:	613c      	str	r4, [r7, #16]
 8006382:	4638      	mov	r0, r7
 8006384:	f001 f9a6 	bl	80076d4 <__mcmp>
 8006388:	2800      	cmp	r0, #0
 800638a:	db22      	blt.n	80063d2 <quorem+0xec>
 800638c:	3601      	adds	r6, #1
 800638e:	4629      	mov	r1, r5
 8006390:	2000      	movs	r0, #0
 8006392:	f858 2b04 	ldr.w	r2, [r8], #4
 8006396:	f8d1 c000 	ldr.w	ip, [r1]
 800639a:	b293      	uxth	r3, r2
 800639c:	1ac3      	subs	r3, r0, r3
 800639e:	0c12      	lsrs	r2, r2, #16
 80063a0:	fa13 f38c 	uxtah	r3, r3, ip
 80063a4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80063a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063b2:	45c1      	cmp	r9, r8
 80063b4:	f841 3b04 	str.w	r3, [r1], #4
 80063b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80063bc:	d2e9      	bcs.n	8006392 <quorem+0xac>
 80063be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063c6:	b922      	cbnz	r2, 80063d2 <quorem+0xec>
 80063c8:	3b04      	subs	r3, #4
 80063ca:	429d      	cmp	r5, r3
 80063cc:	461a      	mov	r2, r3
 80063ce:	d30a      	bcc.n	80063e6 <quorem+0x100>
 80063d0:	613c      	str	r4, [r7, #16]
 80063d2:	4630      	mov	r0, r6
 80063d4:	b003      	add	sp, #12
 80063d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063da:	6812      	ldr	r2, [r2, #0]
 80063dc:	3b04      	subs	r3, #4
 80063de:	2a00      	cmp	r2, #0
 80063e0:	d1ce      	bne.n	8006380 <quorem+0x9a>
 80063e2:	3c01      	subs	r4, #1
 80063e4:	e7c9      	b.n	800637a <quorem+0x94>
 80063e6:	6812      	ldr	r2, [r2, #0]
 80063e8:	3b04      	subs	r3, #4
 80063ea:	2a00      	cmp	r2, #0
 80063ec:	d1f0      	bne.n	80063d0 <quorem+0xea>
 80063ee:	3c01      	subs	r4, #1
 80063f0:	e7eb      	b.n	80063ca <quorem+0xe4>
 80063f2:	2000      	movs	r0, #0
 80063f4:	e7ee      	b.n	80063d4 <quorem+0xee>
	...

080063f8 <_dtoa_r>:
 80063f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fc:	ed2d 8b04 	vpush	{d8-d9}
 8006400:	69c5      	ldr	r5, [r0, #28]
 8006402:	b093      	sub	sp, #76	; 0x4c
 8006404:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006408:	ec57 6b10 	vmov	r6, r7, d0
 800640c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006410:	9107      	str	r1, [sp, #28]
 8006412:	4604      	mov	r4, r0
 8006414:	920a      	str	r2, [sp, #40]	; 0x28
 8006416:	930d      	str	r3, [sp, #52]	; 0x34
 8006418:	b975      	cbnz	r5, 8006438 <_dtoa_r+0x40>
 800641a:	2010      	movs	r0, #16
 800641c:	f000 fe2a 	bl	8007074 <malloc>
 8006420:	4602      	mov	r2, r0
 8006422:	61e0      	str	r0, [r4, #28]
 8006424:	b920      	cbnz	r0, 8006430 <_dtoa_r+0x38>
 8006426:	4bae      	ldr	r3, [pc, #696]	; (80066e0 <_dtoa_r+0x2e8>)
 8006428:	21ef      	movs	r1, #239	; 0xef
 800642a:	48ae      	ldr	r0, [pc, #696]	; (80066e4 <_dtoa_r+0x2ec>)
 800642c:	f001 fe6a 	bl	8008104 <__assert_func>
 8006430:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006434:	6005      	str	r5, [r0, #0]
 8006436:	60c5      	str	r5, [r0, #12]
 8006438:	69e3      	ldr	r3, [r4, #28]
 800643a:	6819      	ldr	r1, [r3, #0]
 800643c:	b151      	cbz	r1, 8006454 <_dtoa_r+0x5c>
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	604a      	str	r2, [r1, #4]
 8006442:	2301      	movs	r3, #1
 8006444:	4093      	lsls	r3, r2
 8006446:	608b      	str	r3, [r1, #8]
 8006448:	4620      	mov	r0, r4
 800644a:	f000 ff07 	bl	800725c <_Bfree>
 800644e:	69e3      	ldr	r3, [r4, #28]
 8006450:	2200      	movs	r2, #0
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	1e3b      	subs	r3, r7, #0
 8006456:	bfbb      	ittet	lt
 8006458:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800645c:	9303      	strlt	r3, [sp, #12]
 800645e:	2300      	movge	r3, #0
 8006460:	2201      	movlt	r2, #1
 8006462:	bfac      	ite	ge
 8006464:	f8c8 3000 	strge.w	r3, [r8]
 8006468:	f8c8 2000 	strlt.w	r2, [r8]
 800646c:	4b9e      	ldr	r3, [pc, #632]	; (80066e8 <_dtoa_r+0x2f0>)
 800646e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006472:	ea33 0308 	bics.w	r3, r3, r8
 8006476:	d11b      	bne.n	80064b0 <_dtoa_r+0xb8>
 8006478:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800647a:	f242 730f 	movw	r3, #9999	; 0x270f
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006484:	4333      	orrs	r3, r6
 8006486:	f000 8593 	beq.w	8006fb0 <_dtoa_r+0xbb8>
 800648a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800648c:	b963      	cbnz	r3, 80064a8 <_dtoa_r+0xb0>
 800648e:	4b97      	ldr	r3, [pc, #604]	; (80066ec <_dtoa_r+0x2f4>)
 8006490:	e027      	b.n	80064e2 <_dtoa_r+0xea>
 8006492:	4b97      	ldr	r3, [pc, #604]	; (80066f0 <_dtoa_r+0x2f8>)
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	3308      	adds	r3, #8
 8006498:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	9800      	ldr	r0, [sp, #0]
 800649e:	b013      	add	sp, #76	; 0x4c
 80064a0:	ecbd 8b04 	vpop	{d8-d9}
 80064a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a8:	4b90      	ldr	r3, [pc, #576]	; (80066ec <_dtoa_r+0x2f4>)
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	3303      	adds	r3, #3
 80064ae:	e7f3      	b.n	8006498 <_dtoa_r+0xa0>
 80064b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064b4:	2200      	movs	r2, #0
 80064b6:	ec51 0b17 	vmov	r0, r1, d7
 80064ba:	eeb0 8a47 	vmov.f32	s16, s14
 80064be:	eef0 8a67 	vmov.f32	s17, s15
 80064c2:	2300      	movs	r3, #0
 80064c4:	f7fa fb08 	bl	8000ad8 <__aeabi_dcmpeq>
 80064c8:	4681      	mov	r9, r0
 80064ca:	b160      	cbz	r0, 80064e6 <_dtoa_r+0xee>
 80064cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064ce:	2301      	movs	r3, #1
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 8568 	beq.w	8006faa <_dtoa_r+0xbb2>
 80064da:	4b86      	ldr	r3, [pc, #536]	; (80066f4 <_dtoa_r+0x2fc>)
 80064dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	e7da      	b.n	800649c <_dtoa_r+0xa4>
 80064e6:	aa10      	add	r2, sp, #64	; 0x40
 80064e8:	a911      	add	r1, sp, #68	; 0x44
 80064ea:	4620      	mov	r0, r4
 80064ec:	eeb0 0a48 	vmov.f32	s0, s16
 80064f0:	eef0 0a68 	vmov.f32	s1, s17
 80064f4:	f001 f994 	bl	8007820 <__d2b>
 80064f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80064fc:	4682      	mov	sl, r0
 80064fe:	2d00      	cmp	r5, #0
 8006500:	d07f      	beq.n	8006602 <_dtoa_r+0x20a>
 8006502:	ee18 3a90 	vmov	r3, s17
 8006506:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800650a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800650e:	ec51 0b18 	vmov	r0, r1, d8
 8006512:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006516:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800651a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800651e:	4619      	mov	r1, r3
 8006520:	2200      	movs	r2, #0
 8006522:	4b75      	ldr	r3, [pc, #468]	; (80066f8 <_dtoa_r+0x300>)
 8006524:	f7f9 feb8 	bl	8000298 <__aeabi_dsub>
 8006528:	a367      	add	r3, pc, #412	; (adr r3, 80066c8 <_dtoa_r+0x2d0>)
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	f7fa f86b 	bl	8000608 <__aeabi_dmul>
 8006532:	a367      	add	r3, pc, #412	; (adr r3, 80066d0 <_dtoa_r+0x2d8>)
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	f7f9 feb0 	bl	800029c <__adddf3>
 800653c:	4606      	mov	r6, r0
 800653e:	4628      	mov	r0, r5
 8006540:	460f      	mov	r7, r1
 8006542:	f7f9 fff7 	bl	8000534 <__aeabi_i2d>
 8006546:	a364      	add	r3, pc, #400	; (adr r3, 80066d8 <_dtoa_r+0x2e0>)
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	f7fa f85c 	bl	8000608 <__aeabi_dmul>
 8006550:	4602      	mov	r2, r0
 8006552:	460b      	mov	r3, r1
 8006554:	4630      	mov	r0, r6
 8006556:	4639      	mov	r1, r7
 8006558:	f7f9 fea0 	bl	800029c <__adddf3>
 800655c:	4606      	mov	r6, r0
 800655e:	460f      	mov	r7, r1
 8006560:	f7fa fb02 	bl	8000b68 <__aeabi_d2iz>
 8006564:	2200      	movs	r2, #0
 8006566:	4683      	mov	fp, r0
 8006568:	2300      	movs	r3, #0
 800656a:	4630      	mov	r0, r6
 800656c:	4639      	mov	r1, r7
 800656e:	f7fa fabd 	bl	8000aec <__aeabi_dcmplt>
 8006572:	b148      	cbz	r0, 8006588 <_dtoa_r+0x190>
 8006574:	4658      	mov	r0, fp
 8006576:	f7f9 ffdd 	bl	8000534 <__aeabi_i2d>
 800657a:	4632      	mov	r2, r6
 800657c:	463b      	mov	r3, r7
 800657e:	f7fa faab 	bl	8000ad8 <__aeabi_dcmpeq>
 8006582:	b908      	cbnz	r0, 8006588 <_dtoa_r+0x190>
 8006584:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006588:	f1bb 0f16 	cmp.w	fp, #22
 800658c:	d857      	bhi.n	800663e <_dtoa_r+0x246>
 800658e:	4b5b      	ldr	r3, [pc, #364]	; (80066fc <_dtoa_r+0x304>)
 8006590:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006598:	ec51 0b18 	vmov	r0, r1, d8
 800659c:	f7fa faa6 	bl	8000aec <__aeabi_dcmplt>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d04e      	beq.n	8006642 <_dtoa_r+0x24a>
 80065a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065a8:	2300      	movs	r3, #0
 80065aa:	930c      	str	r3, [sp, #48]	; 0x30
 80065ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065ae:	1b5b      	subs	r3, r3, r5
 80065b0:	1e5a      	subs	r2, r3, #1
 80065b2:	bf45      	ittet	mi
 80065b4:	f1c3 0301 	rsbmi	r3, r3, #1
 80065b8:	9305      	strmi	r3, [sp, #20]
 80065ba:	2300      	movpl	r3, #0
 80065bc:	2300      	movmi	r3, #0
 80065be:	9206      	str	r2, [sp, #24]
 80065c0:	bf54      	ite	pl
 80065c2:	9305      	strpl	r3, [sp, #20]
 80065c4:	9306      	strmi	r3, [sp, #24]
 80065c6:	f1bb 0f00 	cmp.w	fp, #0
 80065ca:	db3c      	blt.n	8006646 <_dtoa_r+0x24e>
 80065cc:	9b06      	ldr	r3, [sp, #24]
 80065ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80065d2:	445b      	add	r3, fp
 80065d4:	9306      	str	r3, [sp, #24]
 80065d6:	2300      	movs	r3, #0
 80065d8:	9308      	str	r3, [sp, #32]
 80065da:	9b07      	ldr	r3, [sp, #28]
 80065dc:	2b09      	cmp	r3, #9
 80065de:	d868      	bhi.n	80066b2 <_dtoa_r+0x2ba>
 80065e0:	2b05      	cmp	r3, #5
 80065e2:	bfc4      	itt	gt
 80065e4:	3b04      	subgt	r3, #4
 80065e6:	9307      	strgt	r3, [sp, #28]
 80065e8:	9b07      	ldr	r3, [sp, #28]
 80065ea:	f1a3 0302 	sub.w	r3, r3, #2
 80065ee:	bfcc      	ite	gt
 80065f0:	2500      	movgt	r5, #0
 80065f2:	2501      	movle	r5, #1
 80065f4:	2b03      	cmp	r3, #3
 80065f6:	f200 8085 	bhi.w	8006704 <_dtoa_r+0x30c>
 80065fa:	e8df f003 	tbb	[pc, r3]
 80065fe:	3b2e      	.short	0x3b2e
 8006600:	5839      	.short	0x5839
 8006602:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006606:	441d      	add	r5, r3
 8006608:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800660c:	2b20      	cmp	r3, #32
 800660e:	bfc1      	itttt	gt
 8006610:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006614:	fa08 f803 	lslgt.w	r8, r8, r3
 8006618:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800661c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006620:	bfd6      	itet	le
 8006622:	f1c3 0320 	rsble	r3, r3, #32
 8006626:	ea48 0003 	orrgt.w	r0, r8, r3
 800662a:	fa06 f003 	lslle.w	r0, r6, r3
 800662e:	f7f9 ff71 	bl	8000514 <__aeabi_ui2d>
 8006632:	2201      	movs	r2, #1
 8006634:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006638:	3d01      	subs	r5, #1
 800663a:	920e      	str	r2, [sp, #56]	; 0x38
 800663c:	e76f      	b.n	800651e <_dtoa_r+0x126>
 800663e:	2301      	movs	r3, #1
 8006640:	e7b3      	b.n	80065aa <_dtoa_r+0x1b2>
 8006642:	900c      	str	r0, [sp, #48]	; 0x30
 8006644:	e7b2      	b.n	80065ac <_dtoa_r+0x1b4>
 8006646:	9b05      	ldr	r3, [sp, #20]
 8006648:	eba3 030b 	sub.w	r3, r3, fp
 800664c:	9305      	str	r3, [sp, #20]
 800664e:	f1cb 0300 	rsb	r3, fp, #0
 8006652:	9308      	str	r3, [sp, #32]
 8006654:	2300      	movs	r3, #0
 8006656:	930b      	str	r3, [sp, #44]	; 0x2c
 8006658:	e7bf      	b.n	80065da <_dtoa_r+0x1e2>
 800665a:	2300      	movs	r3, #0
 800665c:	9309      	str	r3, [sp, #36]	; 0x24
 800665e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006660:	2b00      	cmp	r3, #0
 8006662:	dc52      	bgt.n	800670a <_dtoa_r+0x312>
 8006664:	2301      	movs	r3, #1
 8006666:	9301      	str	r3, [sp, #4]
 8006668:	9304      	str	r3, [sp, #16]
 800666a:	461a      	mov	r2, r3
 800666c:	920a      	str	r2, [sp, #40]	; 0x28
 800666e:	e00b      	b.n	8006688 <_dtoa_r+0x290>
 8006670:	2301      	movs	r3, #1
 8006672:	e7f3      	b.n	800665c <_dtoa_r+0x264>
 8006674:	2300      	movs	r3, #0
 8006676:	9309      	str	r3, [sp, #36]	; 0x24
 8006678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800667a:	445b      	add	r3, fp
 800667c:	9301      	str	r3, [sp, #4]
 800667e:	3301      	adds	r3, #1
 8006680:	2b01      	cmp	r3, #1
 8006682:	9304      	str	r3, [sp, #16]
 8006684:	bfb8      	it	lt
 8006686:	2301      	movlt	r3, #1
 8006688:	69e0      	ldr	r0, [r4, #28]
 800668a:	2100      	movs	r1, #0
 800668c:	2204      	movs	r2, #4
 800668e:	f102 0614 	add.w	r6, r2, #20
 8006692:	429e      	cmp	r6, r3
 8006694:	d93d      	bls.n	8006712 <_dtoa_r+0x31a>
 8006696:	6041      	str	r1, [r0, #4]
 8006698:	4620      	mov	r0, r4
 800669a:	f000 fd9f 	bl	80071dc <_Balloc>
 800669e:	9000      	str	r0, [sp, #0]
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d139      	bne.n	8006718 <_dtoa_r+0x320>
 80066a4:	4b16      	ldr	r3, [pc, #88]	; (8006700 <_dtoa_r+0x308>)
 80066a6:	4602      	mov	r2, r0
 80066a8:	f240 11af 	movw	r1, #431	; 0x1af
 80066ac:	e6bd      	b.n	800642a <_dtoa_r+0x32>
 80066ae:	2301      	movs	r3, #1
 80066b0:	e7e1      	b.n	8006676 <_dtoa_r+0x27e>
 80066b2:	2501      	movs	r5, #1
 80066b4:	2300      	movs	r3, #0
 80066b6:	9307      	str	r3, [sp, #28]
 80066b8:	9509      	str	r5, [sp, #36]	; 0x24
 80066ba:	f04f 33ff 	mov.w	r3, #4294967295
 80066be:	9301      	str	r3, [sp, #4]
 80066c0:	9304      	str	r3, [sp, #16]
 80066c2:	2200      	movs	r2, #0
 80066c4:	2312      	movs	r3, #18
 80066c6:	e7d1      	b.n	800666c <_dtoa_r+0x274>
 80066c8:	636f4361 	.word	0x636f4361
 80066cc:	3fd287a7 	.word	0x3fd287a7
 80066d0:	8b60c8b3 	.word	0x8b60c8b3
 80066d4:	3fc68a28 	.word	0x3fc68a28
 80066d8:	509f79fb 	.word	0x509f79fb
 80066dc:	3fd34413 	.word	0x3fd34413
 80066e0:	080088e1 	.word	0x080088e1
 80066e4:	080088f8 	.word	0x080088f8
 80066e8:	7ff00000 	.word	0x7ff00000
 80066ec:	080088dd 	.word	0x080088dd
 80066f0:	080088d4 	.word	0x080088d4
 80066f4:	080088b1 	.word	0x080088b1
 80066f8:	3ff80000 	.word	0x3ff80000
 80066fc:	080089e8 	.word	0x080089e8
 8006700:	08008950 	.word	0x08008950
 8006704:	2301      	movs	r3, #1
 8006706:	9309      	str	r3, [sp, #36]	; 0x24
 8006708:	e7d7      	b.n	80066ba <_dtoa_r+0x2c2>
 800670a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800670c:	9301      	str	r3, [sp, #4]
 800670e:	9304      	str	r3, [sp, #16]
 8006710:	e7ba      	b.n	8006688 <_dtoa_r+0x290>
 8006712:	3101      	adds	r1, #1
 8006714:	0052      	lsls	r2, r2, #1
 8006716:	e7ba      	b.n	800668e <_dtoa_r+0x296>
 8006718:	69e3      	ldr	r3, [r4, #28]
 800671a:	9a00      	ldr	r2, [sp, #0]
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	9b04      	ldr	r3, [sp, #16]
 8006720:	2b0e      	cmp	r3, #14
 8006722:	f200 80a8 	bhi.w	8006876 <_dtoa_r+0x47e>
 8006726:	2d00      	cmp	r5, #0
 8006728:	f000 80a5 	beq.w	8006876 <_dtoa_r+0x47e>
 800672c:	f1bb 0f00 	cmp.w	fp, #0
 8006730:	dd38      	ble.n	80067a4 <_dtoa_r+0x3ac>
 8006732:	4bc0      	ldr	r3, [pc, #768]	; (8006a34 <_dtoa_r+0x63c>)
 8006734:	f00b 020f 	and.w	r2, fp, #15
 8006738:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800673c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006740:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006744:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006748:	d019      	beq.n	800677e <_dtoa_r+0x386>
 800674a:	4bbb      	ldr	r3, [pc, #748]	; (8006a38 <_dtoa_r+0x640>)
 800674c:	ec51 0b18 	vmov	r0, r1, d8
 8006750:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006754:	f7fa f882 	bl	800085c <__aeabi_ddiv>
 8006758:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800675c:	f008 080f 	and.w	r8, r8, #15
 8006760:	2503      	movs	r5, #3
 8006762:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006a38 <_dtoa_r+0x640>
 8006766:	f1b8 0f00 	cmp.w	r8, #0
 800676a:	d10a      	bne.n	8006782 <_dtoa_r+0x38a>
 800676c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006770:	4632      	mov	r2, r6
 8006772:	463b      	mov	r3, r7
 8006774:	f7fa f872 	bl	800085c <__aeabi_ddiv>
 8006778:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800677c:	e02b      	b.n	80067d6 <_dtoa_r+0x3de>
 800677e:	2502      	movs	r5, #2
 8006780:	e7ef      	b.n	8006762 <_dtoa_r+0x36a>
 8006782:	f018 0f01 	tst.w	r8, #1
 8006786:	d008      	beq.n	800679a <_dtoa_r+0x3a2>
 8006788:	4630      	mov	r0, r6
 800678a:	4639      	mov	r1, r7
 800678c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006790:	f7f9 ff3a 	bl	8000608 <__aeabi_dmul>
 8006794:	3501      	adds	r5, #1
 8006796:	4606      	mov	r6, r0
 8006798:	460f      	mov	r7, r1
 800679a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800679e:	f109 0908 	add.w	r9, r9, #8
 80067a2:	e7e0      	b.n	8006766 <_dtoa_r+0x36e>
 80067a4:	f000 809f 	beq.w	80068e6 <_dtoa_r+0x4ee>
 80067a8:	f1cb 0600 	rsb	r6, fp, #0
 80067ac:	4ba1      	ldr	r3, [pc, #644]	; (8006a34 <_dtoa_r+0x63c>)
 80067ae:	4fa2      	ldr	r7, [pc, #648]	; (8006a38 <_dtoa_r+0x640>)
 80067b0:	f006 020f 	and.w	r2, r6, #15
 80067b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	ec51 0b18 	vmov	r0, r1, d8
 80067c0:	f7f9 ff22 	bl	8000608 <__aeabi_dmul>
 80067c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067c8:	1136      	asrs	r6, r6, #4
 80067ca:	2300      	movs	r3, #0
 80067cc:	2502      	movs	r5, #2
 80067ce:	2e00      	cmp	r6, #0
 80067d0:	d17e      	bne.n	80068d0 <_dtoa_r+0x4d8>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1d0      	bne.n	8006778 <_dtoa_r+0x380>
 80067d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8084 	beq.w	80068ea <_dtoa_r+0x4f2>
 80067e2:	4b96      	ldr	r3, [pc, #600]	; (8006a3c <_dtoa_r+0x644>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	4640      	mov	r0, r8
 80067e8:	4649      	mov	r1, r9
 80067ea:	f7fa f97f 	bl	8000aec <__aeabi_dcmplt>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d07b      	beq.n	80068ea <_dtoa_r+0x4f2>
 80067f2:	9b04      	ldr	r3, [sp, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d078      	beq.n	80068ea <_dtoa_r+0x4f2>
 80067f8:	9b01      	ldr	r3, [sp, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	dd39      	ble.n	8006872 <_dtoa_r+0x47a>
 80067fe:	4b90      	ldr	r3, [pc, #576]	; (8006a40 <_dtoa_r+0x648>)
 8006800:	2200      	movs	r2, #0
 8006802:	4640      	mov	r0, r8
 8006804:	4649      	mov	r1, r9
 8006806:	f7f9 feff 	bl	8000608 <__aeabi_dmul>
 800680a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800680e:	9e01      	ldr	r6, [sp, #4]
 8006810:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006814:	3501      	adds	r5, #1
 8006816:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800681a:	4628      	mov	r0, r5
 800681c:	f7f9 fe8a 	bl	8000534 <__aeabi_i2d>
 8006820:	4642      	mov	r2, r8
 8006822:	464b      	mov	r3, r9
 8006824:	f7f9 fef0 	bl	8000608 <__aeabi_dmul>
 8006828:	4b86      	ldr	r3, [pc, #536]	; (8006a44 <_dtoa_r+0x64c>)
 800682a:	2200      	movs	r2, #0
 800682c:	f7f9 fd36 	bl	800029c <__adddf3>
 8006830:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006834:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006838:	9303      	str	r3, [sp, #12]
 800683a:	2e00      	cmp	r6, #0
 800683c:	d158      	bne.n	80068f0 <_dtoa_r+0x4f8>
 800683e:	4b82      	ldr	r3, [pc, #520]	; (8006a48 <_dtoa_r+0x650>)
 8006840:	2200      	movs	r2, #0
 8006842:	4640      	mov	r0, r8
 8006844:	4649      	mov	r1, r9
 8006846:	f7f9 fd27 	bl	8000298 <__aeabi_dsub>
 800684a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800684e:	4680      	mov	r8, r0
 8006850:	4689      	mov	r9, r1
 8006852:	f7fa f969 	bl	8000b28 <__aeabi_dcmpgt>
 8006856:	2800      	cmp	r0, #0
 8006858:	f040 8296 	bne.w	8006d88 <_dtoa_r+0x990>
 800685c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006860:	4640      	mov	r0, r8
 8006862:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006866:	4649      	mov	r1, r9
 8006868:	f7fa f940 	bl	8000aec <__aeabi_dcmplt>
 800686c:	2800      	cmp	r0, #0
 800686e:	f040 8289 	bne.w	8006d84 <_dtoa_r+0x98c>
 8006872:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006876:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006878:	2b00      	cmp	r3, #0
 800687a:	f2c0 814e 	blt.w	8006b1a <_dtoa_r+0x722>
 800687e:	f1bb 0f0e 	cmp.w	fp, #14
 8006882:	f300 814a 	bgt.w	8006b1a <_dtoa_r+0x722>
 8006886:	4b6b      	ldr	r3, [pc, #428]	; (8006a34 <_dtoa_r+0x63c>)
 8006888:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800688c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006892:	2b00      	cmp	r3, #0
 8006894:	f280 80dc 	bge.w	8006a50 <_dtoa_r+0x658>
 8006898:	9b04      	ldr	r3, [sp, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	f300 80d8 	bgt.w	8006a50 <_dtoa_r+0x658>
 80068a0:	f040 826f 	bne.w	8006d82 <_dtoa_r+0x98a>
 80068a4:	4b68      	ldr	r3, [pc, #416]	; (8006a48 <_dtoa_r+0x650>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	4640      	mov	r0, r8
 80068aa:	4649      	mov	r1, r9
 80068ac:	f7f9 feac 	bl	8000608 <__aeabi_dmul>
 80068b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068b4:	f7fa f92e 	bl	8000b14 <__aeabi_dcmpge>
 80068b8:	9e04      	ldr	r6, [sp, #16]
 80068ba:	4637      	mov	r7, r6
 80068bc:	2800      	cmp	r0, #0
 80068be:	f040 8245 	bne.w	8006d4c <_dtoa_r+0x954>
 80068c2:	9d00      	ldr	r5, [sp, #0]
 80068c4:	2331      	movs	r3, #49	; 0x31
 80068c6:	f805 3b01 	strb.w	r3, [r5], #1
 80068ca:	f10b 0b01 	add.w	fp, fp, #1
 80068ce:	e241      	b.n	8006d54 <_dtoa_r+0x95c>
 80068d0:	07f2      	lsls	r2, r6, #31
 80068d2:	d505      	bpl.n	80068e0 <_dtoa_r+0x4e8>
 80068d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068d8:	f7f9 fe96 	bl	8000608 <__aeabi_dmul>
 80068dc:	3501      	adds	r5, #1
 80068de:	2301      	movs	r3, #1
 80068e0:	1076      	asrs	r6, r6, #1
 80068e2:	3708      	adds	r7, #8
 80068e4:	e773      	b.n	80067ce <_dtoa_r+0x3d6>
 80068e6:	2502      	movs	r5, #2
 80068e8:	e775      	b.n	80067d6 <_dtoa_r+0x3de>
 80068ea:	9e04      	ldr	r6, [sp, #16]
 80068ec:	465f      	mov	r7, fp
 80068ee:	e792      	b.n	8006816 <_dtoa_r+0x41e>
 80068f0:	9900      	ldr	r1, [sp, #0]
 80068f2:	4b50      	ldr	r3, [pc, #320]	; (8006a34 <_dtoa_r+0x63c>)
 80068f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80068f8:	4431      	add	r1, r6
 80068fa:	9102      	str	r1, [sp, #8]
 80068fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068fe:	eeb0 9a47 	vmov.f32	s18, s14
 8006902:	eef0 9a67 	vmov.f32	s19, s15
 8006906:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800690a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800690e:	2900      	cmp	r1, #0
 8006910:	d044      	beq.n	800699c <_dtoa_r+0x5a4>
 8006912:	494e      	ldr	r1, [pc, #312]	; (8006a4c <_dtoa_r+0x654>)
 8006914:	2000      	movs	r0, #0
 8006916:	f7f9 ffa1 	bl	800085c <__aeabi_ddiv>
 800691a:	ec53 2b19 	vmov	r2, r3, d9
 800691e:	f7f9 fcbb 	bl	8000298 <__aeabi_dsub>
 8006922:	9d00      	ldr	r5, [sp, #0]
 8006924:	ec41 0b19 	vmov	d9, r0, r1
 8006928:	4649      	mov	r1, r9
 800692a:	4640      	mov	r0, r8
 800692c:	f7fa f91c 	bl	8000b68 <__aeabi_d2iz>
 8006930:	4606      	mov	r6, r0
 8006932:	f7f9 fdff 	bl	8000534 <__aeabi_i2d>
 8006936:	4602      	mov	r2, r0
 8006938:	460b      	mov	r3, r1
 800693a:	4640      	mov	r0, r8
 800693c:	4649      	mov	r1, r9
 800693e:	f7f9 fcab 	bl	8000298 <__aeabi_dsub>
 8006942:	3630      	adds	r6, #48	; 0x30
 8006944:	f805 6b01 	strb.w	r6, [r5], #1
 8006948:	ec53 2b19 	vmov	r2, r3, d9
 800694c:	4680      	mov	r8, r0
 800694e:	4689      	mov	r9, r1
 8006950:	f7fa f8cc 	bl	8000aec <__aeabi_dcmplt>
 8006954:	2800      	cmp	r0, #0
 8006956:	d164      	bne.n	8006a22 <_dtoa_r+0x62a>
 8006958:	4642      	mov	r2, r8
 800695a:	464b      	mov	r3, r9
 800695c:	4937      	ldr	r1, [pc, #220]	; (8006a3c <_dtoa_r+0x644>)
 800695e:	2000      	movs	r0, #0
 8006960:	f7f9 fc9a 	bl	8000298 <__aeabi_dsub>
 8006964:	ec53 2b19 	vmov	r2, r3, d9
 8006968:	f7fa f8c0 	bl	8000aec <__aeabi_dcmplt>
 800696c:	2800      	cmp	r0, #0
 800696e:	f040 80b6 	bne.w	8006ade <_dtoa_r+0x6e6>
 8006972:	9b02      	ldr	r3, [sp, #8]
 8006974:	429d      	cmp	r5, r3
 8006976:	f43f af7c 	beq.w	8006872 <_dtoa_r+0x47a>
 800697a:	4b31      	ldr	r3, [pc, #196]	; (8006a40 <_dtoa_r+0x648>)
 800697c:	ec51 0b19 	vmov	r0, r1, d9
 8006980:	2200      	movs	r2, #0
 8006982:	f7f9 fe41 	bl	8000608 <__aeabi_dmul>
 8006986:	4b2e      	ldr	r3, [pc, #184]	; (8006a40 <_dtoa_r+0x648>)
 8006988:	ec41 0b19 	vmov	d9, r0, r1
 800698c:	2200      	movs	r2, #0
 800698e:	4640      	mov	r0, r8
 8006990:	4649      	mov	r1, r9
 8006992:	f7f9 fe39 	bl	8000608 <__aeabi_dmul>
 8006996:	4680      	mov	r8, r0
 8006998:	4689      	mov	r9, r1
 800699a:	e7c5      	b.n	8006928 <_dtoa_r+0x530>
 800699c:	ec51 0b17 	vmov	r0, r1, d7
 80069a0:	f7f9 fe32 	bl	8000608 <__aeabi_dmul>
 80069a4:	9b02      	ldr	r3, [sp, #8]
 80069a6:	9d00      	ldr	r5, [sp, #0]
 80069a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80069aa:	ec41 0b19 	vmov	d9, r0, r1
 80069ae:	4649      	mov	r1, r9
 80069b0:	4640      	mov	r0, r8
 80069b2:	f7fa f8d9 	bl	8000b68 <__aeabi_d2iz>
 80069b6:	4606      	mov	r6, r0
 80069b8:	f7f9 fdbc 	bl	8000534 <__aeabi_i2d>
 80069bc:	3630      	adds	r6, #48	; 0x30
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	4640      	mov	r0, r8
 80069c4:	4649      	mov	r1, r9
 80069c6:	f7f9 fc67 	bl	8000298 <__aeabi_dsub>
 80069ca:	f805 6b01 	strb.w	r6, [r5], #1
 80069ce:	9b02      	ldr	r3, [sp, #8]
 80069d0:	429d      	cmp	r5, r3
 80069d2:	4680      	mov	r8, r0
 80069d4:	4689      	mov	r9, r1
 80069d6:	f04f 0200 	mov.w	r2, #0
 80069da:	d124      	bne.n	8006a26 <_dtoa_r+0x62e>
 80069dc:	4b1b      	ldr	r3, [pc, #108]	; (8006a4c <_dtoa_r+0x654>)
 80069de:	ec51 0b19 	vmov	r0, r1, d9
 80069e2:	f7f9 fc5b 	bl	800029c <__adddf3>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	4640      	mov	r0, r8
 80069ec:	4649      	mov	r1, r9
 80069ee:	f7fa f89b 	bl	8000b28 <__aeabi_dcmpgt>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d173      	bne.n	8006ade <_dtoa_r+0x6e6>
 80069f6:	ec53 2b19 	vmov	r2, r3, d9
 80069fa:	4914      	ldr	r1, [pc, #80]	; (8006a4c <_dtoa_r+0x654>)
 80069fc:	2000      	movs	r0, #0
 80069fe:	f7f9 fc4b 	bl	8000298 <__aeabi_dsub>
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	4640      	mov	r0, r8
 8006a08:	4649      	mov	r1, r9
 8006a0a:	f7fa f86f 	bl	8000aec <__aeabi_dcmplt>
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	f43f af2f 	beq.w	8006872 <_dtoa_r+0x47a>
 8006a14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a16:	1e6b      	subs	r3, r5, #1
 8006a18:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a1e:	2b30      	cmp	r3, #48	; 0x30
 8006a20:	d0f8      	beq.n	8006a14 <_dtoa_r+0x61c>
 8006a22:	46bb      	mov	fp, r7
 8006a24:	e04a      	b.n	8006abc <_dtoa_r+0x6c4>
 8006a26:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <_dtoa_r+0x648>)
 8006a28:	f7f9 fdee 	bl	8000608 <__aeabi_dmul>
 8006a2c:	4680      	mov	r8, r0
 8006a2e:	4689      	mov	r9, r1
 8006a30:	e7bd      	b.n	80069ae <_dtoa_r+0x5b6>
 8006a32:	bf00      	nop
 8006a34:	080089e8 	.word	0x080089e8
 8006a38:	080089c0 	.word	0x080089c0
 8006a3c:	3ff00000 	.word	0x3ff00000
 8006a40:	40240000 	.word	0x40240000
 8006a44:	401c0000 	.word	0x401c0000
 8006a48:	40140000 	.word	0x40140000
 8006a4c:	3fe00000 	.word	0x3fe00000
 8006a50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a54:	9d00      	ldr	r5, [sp, #0]
 8006a56:	4642      	mov	r2, r8
 8006a58:	464b      	mov	r3, r9
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	4639      	mov	r1, r7
 8006a5e:	f7f9 fefd 	bl	800085c <__aeabi_ddiv>
 8006a62:	f7fa f881 	bl	8000b68 <__aeabi_d2iz>
 8006a66:	9001      	str	r0, [sp, #4]
 8006a68:	f7f9 fd64 	bl	8000534 <__aeabi_i2d>
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	464b      	mov	r3, r9
 8006a70:	f7f9 fdca 	bl	8000608 <__aeabi_dmul>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4630      	mov	r0, r6
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	f7f9 fc0c 	bl	8000298 <__aeabi_dsub>
 8006a80:	9e01      	ldr	r6, [sp, #4]
 8006a82:	9f04      	ldr	r7, [sp, #16]
 8006a84:	3630      	adds	r6, #48	; 0x30
 8006a86:	f805 6b01 	strb.w	r6, [r5], #1
 8006a8a:	9e00      	ldr	r6, [sp, #0]
 8006a8c:	1bae      	subs	r6, r5, r6
 8006a8e:	42b7      	cmp	r7, r6
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	d134      	bne.n	8006b00 <_dtoa_r+0x708>
 8006a96:	f7f9 fc01 	bl	800029c <__adddf3>
 8006a9a:	4642      	mov	r2, r8
 8006a9c:	464b      	mov	r3, r9
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	460f      	mov	r7, r1
 8006aa2:	f7fa f841 	bl	8000b28 <__aeabi_dcmpgt>
 8006aa6:	b9c8      	cbnz	r0, 8006adc <_dtoa_r+0x6e4>
 8006aa8:	4642      	mov	r2, r8
 8006aaa:	464b      	mov	r3, r9
 8006aac:	4630      	mov	r0, r6
 8006aae:	4639      	mov	r1, r7
 8006ab0:	f7fa f812 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ab4:	b110      	cbz	r0, 8006abc <_dtoa_r+0x6c4>
 8006ab6:	9b01      	ldr	r3, [sp, #4]
 8006ab8:	07db      	lsls	r3, r3, #31
 8006aba:	d40f      	bmi.n	8006adc <_dtoa_r+0x6e4>
 8006abc:	4651      	mov	r1, sl
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f000 fbcc 	bl	800725c <_Bfree>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ac8:	702b      	strb	r3, [r5, #0]
 8006aca:	f10b 0301 	add.w	r3, fp, #1
 8006ace:	6013      	str	r3, [r2, #0]
 8006ad0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f43f ace2 	beq.w	800649c <_dtoa_r+0xa4>
 8006ad8:	601d      	str	r5, [r3, #0]
 8006ada:	e4df      	b.n	800649c <_dtoa_r+0xa4>
 8006adc:	465f      	mov	r7, fp
 8006ade:	462b      	mov	r3, r5
 8006ae0:	461d      	mov	r5, r3
 8006ae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ae6:	2a39      	cmp	r2, #57	; 0x39
 8006ae8:	d106      	bne.n	8006af8 <_dtoa_r+0x700>
 8006aea:	9a00      	ldr	r2, [sp, #0]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d1f7      	bne.n	8006ae0 <_dtoa_r+0x6e8>
 8006af0:	9900      	ldr	r1, [sp, #0]
 8006af2:	2230      	movs	r2, #48	; 0x30
 8006af4:	3701      	adds	r7, #1
 8006af6:	700a      	strb	r2, [r1, #0]
 8006af8:	781a      	ldrb	r2, [r3, #0]
 8006afa:	3201      	adds	r2, #1
 8006afc:	701a      	strb	r2, [r3, #0]
 8006afe:	e790      	b.n	8006a22 <_dtoa_r+0x62a>
 8006b00:	4ba3      	ldr	r3, [pc, #652]	; (8006d90 <_dtoa_r+0x998>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	f7f9 fd80 	bl	8000608 <__aeabi_dmul>
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	4606      	mov	r6, r0
 8006b0e:	460f      	mov	r7, r1
 8006b10:	f7f9 ffe2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	d09e      	beq.n	8006a56 <_dtoa_r+0x65e>
 8006b18:	e7d0      	b.n	8006abc <_dtoa_r+0x6c4>
 8006b1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b1c:	2a00      	cmp	r2, #0
 8006b1e:	f000 80ca 	beq.w	8006cb6 <_dtoa_r+0x8be>
 8006b22:	9a07      	ldr	r2, [sp, #28]
 8006b24:	2a01      	cmp	r2, #1
 8006b26:	f300 80ad 	bgt.w	8006c84 <_dtoa_r+0x88c>
 8006b2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b2c:	2a00      	cmp	r2, #0
 8006b2e:	f000 80a5 	beq.w	8006c7c <_dtoa_r+0x884>
 8006b32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b36:	9e08      	ldr	r6, [sp, #32]
 8006b38:	9d05      	ldr	r5, [sp, #20]
 8006b3a:	9a05      	ldr	r2, [sp, #20]
 8006b3c:	441a      	add	r2, r3
 8006b3e:	9205      	str	r2, [sp, #20]
 8006b40:	9a06      	ldr	r2, [sp, #24]
 8006b42:	2101      	movs	r1, #1
 8006b44:	441a      	add	r2, r3
 8006b46:	4620      	mov	r0, r4
 8006b48:	9206      	str	r2, [sp, #24]
 8006b4a:	f000 fc3d 	bl	80073c8 <__i2b>
 8006b4e:	4607      	mov	r7, r0
 8006b50:	b165      	cbz	r5, 8006b6c <_dtoa_r+0x774>
 8006b52:	9b06      	ldr	r3, [sp, #24]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	dd09      	ble.n	8006b6c <_dtoa_r+0x774>
 8006b58:	42ab      	cmp	r3, r5
 8006b5a:	9a05      	ldr	r2, [sp, #20]
 8006b5c:	bfa8      	it	ge
 8006b5e:	462b      	movge	r3, r5
 8006b60:	1ad2      	subs	r2, r2, r3
 8006b62:	9205      	str	r2, [sp, #20]
 8006b64:	9a06      	ldr	r2, [sp, #24]
 8006b66:	1aed      	subs	r5, r5, r3
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	9306      	str	r3, [sp, #24]
 8006b6c:	9b08      	ldr	r3, [sp, #32]
 8006b6e:	b1f3      	cbz	r3, 8006bae <_dtoa_r+0x7b6>
 8006b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 80a3 	beq.w	8006cbe <_dtoa_r+0x8c6>
 8006b78:	2e00      	cmp	r6, #0
 8006b7a:	dd10      	ble.n	8006b9e <_dtoa_r+0x7a6>
 8006b7c:	4639      	mov	r1, r7
 8006b7e:	4632      	mov	r2, r6
 8006b80:	4620      	mov	r0, r4
 8006b82:	f000 fce1 	bl	8007548 <__pow5mult>
 8006b86:	4652      	mov	r2, sl
 8006b88:	4601      	mov	r1, r0
 8006b8a:	4607      	mov	r7, r0
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f000 fc31 	bl	80073f4 <__multiply>
 8006b92:	4651      	mov	r1, sl
 8006b94:	4680      	mov	r8, r0
 8006b96:	4620      	mov	r0, r4
 8006b98:	f000 fb60 	bl	800725c <_Bfree>
 8006b9c:	46c2      	mov	sl, r8
 8006b9e:	9b08      	ldr	r3, [sp, #32]
 8006ba0:	1b9a      	subs	r2, r3, r6
 8006ba2:	d004      	beq.n	8006bae <_dtoa_r+0x7b6>
 8006ba4:	4651      	mov	r1, sl
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f000 fcce 	bl	8007548 <__pow5mult>
 8006bac:	4682      	mov	sl, r0
 8006bae:	2101      	movs	r1, #1
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f000 fc09 	bl	80073c8 <__i2b>
 8006bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	4606      	mov	r6, r0
 8006bbc:	f340 8081 	ble.w	8006cc2 <_dtoa_r+0x8ca>
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	4601      	mov	r1, r0
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f000 fcbf 	bl	8007548 <__pow5mult>
 8006bca:	9b07      	ldr	r3, [sp, #28]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	4606      	mov	r6, r0
 8006bd0:	dd7a      	ble.n	8006cc8 <_dtoa_r+0x8d0>
 8006bd2:	f04f 0800 	mov.w	r8, #0
 8006bd6:	6933      	ldr	r3, [r6, #16]
 8006bd8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006bdc:	6918      	ldr	r0, [r3, #16]
 8006bde:	f000 fba5 	bl	800732c <__hi0bits>
 8006be2:	f1c0 0020 	rsb	r0, r0, #32
 8006be6:	9b06      	ldr	r3, [sp, #24]
 8006be8:	4418      	add	r0, r3
 8006bea:	f010 001f 	ands.w	r0, r0, #31
 8006bee:	f000 8094 	beq.w	8006d1a <_dtoa_r+0x922>
 8006bf2:	f1c0 0320 	rsb	r3, r0, #32
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	f340 8085 	ble.w	8006d06 <_dtoa_r+0x90e>
 8006bfc:	9b05      	ldr	r3, [sp, #20]
 8006bfe:	f1c0 001c 	rsb	r0, r0, #28
 8006c02:	4403      	add	r3, r0
 8006c04:	9305      	str	r3, [sp, #20]
 8006c06:	9b06      	ldr	r3, [sp, #24]
 8006c08:	4403      	add	r3, r0
 8006c0a:	4405      	add	r5, r0
 8006c0c:	9306      	str	r3, [sp, #24]
 8006c0e:	9b05      	ldr	r3, [sp, #20]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	dd05      	ble.n	8006c20 <_dtoa_r+0x828>
 8006c14:	4651      	mov	r1, sl
 8006c16:	461a      	mov	r2, r3
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f000 fcef 	bl	80075fc <__lshift>
 8006c1e:	4682      	mov	sl, r0
 8006c20:	9b06      	ldr	r3, [sp, #24]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	dd05      	ble.n	8006c32 <_dtoa_r+0x83a>
 8006c26:	4631      	mov	r1, r6
 8006c28:	461a      	mov	r2, r3
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f000 fce6 	bl	80075fc <__lshift>
 8006c30:	4606      	mov	r6, r0
 8006c32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d072      	beq.n	8006d1e <_dtoa_r+0x926>
 8006c38:	4631      	mov	r1, r6
 8006c3a:	4650      	mov	r0, sl
 8006c3c:	f000 fd4a 	bl	80076d4 <__mcmp>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	da6c      	bge.n	8006d1e <_dtoa_r+0x926>
 8006c44:	2300      	movs	r3, #0
 8006c46:	4651      	mov	r1, sl
 8006c48:	220a      	movs	r2, #10
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f000 fb28 	bl	80072a0 <__multadd>
 8006c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c56:	4682      	mov	sl, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 81b0 	beq.w	8006fbe <_dtoa_r+0xbc6>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	4639      	mov	r1, r7
 8006c62:	220a      	movs	r2, #10
 8006c64:	4620      	mov	r0, r4
 8006c66:	f000 fb1b 	bl	80072a0 <__multadd>
 8006c6a:	9b01      	ldr	r3, [sp, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	4607      	mov	r7, r0
 8006c70:	f300 8096 	bgt.w	8006da0 <_dtoa_r+0x9a8>
 8006c74:	9b07      	ldr	r3, [sp, #28]
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	dc59      	bgt.n	8006d2e <_dtoa_r+0x936>
 8006c7a:	e091      	b.n	8006da0 <_dtoa_r+0x9a8>
 8006c7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c82:	e758      	b.n	8006b36 <_dtoa_r+0x73e>
 8006c84:	9b04      	ldr	r3, [sp, #16]
 8006c86:	1e5e      	subs	r6, r3, #1
 8006c88:	9b08      	ldr	r3, [sp, #32]
 8006c8a:	42b3      	cmp	r3, r6
 8006c8c:	bfbf      	itttt	lt
 8006c8e:	9b08      	ldrlt	r3, [sp, #32]
 8006c90:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006c92:	9608      	strlt	r6, [sp, #32]
 8006c94:	1af3      	sublt	r3, r6, r3
 8006c96:	bfb4      	ite	lt
 8006c98:	18d2      	addlt	r2, r2, r3
 8006c9a:	1b9e      	subge	r6, r3, r6
 8006c9c:	9b04      	ldr	r3, [sp, #16]
 8006c9e:	bfbc      	itt	lt
 8006ca0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006ca2:	2600      	movlt	r6, #0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	bfb7      	itett	lt
 8006ca8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006cac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006cb0:	1a9d      	sublt	r5, r3, r2
 8006cb2:	2300      	movlt	r3, #0
 8006cb4:	e741      	b.n	8006b3a <_dtoa_r+0x742>
 8006cb6:	9e08      	ldr	r6, [sp, #32]
 8006cb8:	9d05      	ldr	r5, [sp, #20]
 8006cba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006cbc:	e748      	b.n	8006b50 <_dtoa_r+0x758>
 8006cbe:	9a08      	ldr	r2, [sp, #32]
 8006cc0:	e770      	b.n	8006ba4 <_dtoa_r+0x7ac>
 8006cc2:	9b07      	ldr	r3, [sp, #28]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	dc19      	bgt.n	8006cfc <_dtoa_r+0x904>
 8006cc8:	9b02      	ldr	r3, [sp, #8]
 8006cca:	b9bb      	cbnz	r3, 8006cfc <_dtoa_r+0x904>
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cd2:	b99b      	cbnz	r3, 8006cfc <_dtoa_r+0x904>
 8006cd4:	9b03      	ldr	r3, [sp, #12]
 8006cd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cda:	0d1b      	lsrs	r3, r3, #20
 8006cdc:	051b      	lsls	r3, r3, #20
 8006cde:	b183      	cbz	r3, 8006d02 <_dtoa_r+0x90a>
 8006ce0:	9b05      	ldr	r3, [sp, #20]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	9305      	str	r3, [sp, #20]
 8006ce6:	9b06      	ldr	r3, [sp, #24]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	9306      	str	r3, [sp, #24]
 8006cec:	f04f 0801 	mov.w	r8, #1
 8006cf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f47f af6f 	bne.w	8006bd6 <_dtoa_r+0x7de>
 8006cf8:	2001      	movs	r0, #1
 8006cfa:	e774      	b.n	8006be6 <_dtoa_r+0x7ee>
 8006cfc:	f04f 0800 	mov.w	r8, #0
 8006d00:	e7f6      	b.n	8006cf0 <_dtoa_r+0x8f8>
 8006d02:	4698      	mov	r8, r3
 8006d04:	e7f4      	b.n	8006cf0 <_dtoa_r+0x8f8>
 8006d06:	d082      	beq.n	8006c0e <_dtoa_r+0x816>
 8006d08:	9a05      	ldr	r2, [sp, #20]
 8006d0a:	331c      	adds	r3, #28
 8006d0c:	441a      	add	r2, r3
 8006d0e:	9205      	str	r2, [sp, #20]
 8006d10:	9a06      	ldr	r2, [sp, #24]
 8006d12:	441a      	add	r2, r3
 8006d14:	441d      	add	r5, r3
 8006d16:	9206      	str	r2, [sp, #24]
 8006d18:	e779      	b.n	8006c0e <_dtoa_r+0x816>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	e7f4      	b.n	8006d08 <_dtoa_r+0x910>
 8006d1e:	9b04      	ldr	r3, [sp, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	dc37      	bgt.n	8006d94 <_dtoa_r+0x99c>
 8006d24:	9b07      	ldr	r3, [sp, #28]
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	dd34      	ble.n	8006d94 <_dtoa_r+0x99c>
 8006d2a:	9b04      	ldr	r3, [sp, #16]
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	9b01      	ldr	r3, [sp, #4]
 8006d30:	b963      	cbnz	r3, 8006d4c <_dtoa_r+0x954>
 8006d32:	4631      	mov	r1, r6
 8006d34:	2205      	movs	r2, #5
 8006d36:	4620      	mov	r0, r4
 8006d38:	f000 fab2 	bl	80072a0 <__multadd>
 8006d3c:	4601      	mov	r1, r0
 8006d3e:	4606      	mov	r6, r0
 8006d40:	4650      	mov	r0, sl
 8006d42:	f000 fcc7 	bl	80076d4 <__mcmp>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	f73f adbb 	bgt.w	80068c2 <_dtoa_r+0x4ca>
 8006d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d4e:	9d00      	ldr	r5, [sp, #0]
 8006d50:	ea6f 0b03 	mvn.w	fp, r3
 8006d54:	f04f 0800 	mov.w	r8, #0
 8006d58:	4631      	mov	r1, r6
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f000 fa7e 	bl	800725c <_Bfree>
 8006d60:	2f00      	cmp	r7, #0
 8006d62:	f43f aeab 	beq.w	8006abc <_dtoa_r+0x6c4>
 8006d66:	f1b8 0f00 	cmp.w	r8, #0
 8006d6a:	d005      	beq.n	8006d78 <_dtoa_r+0x980>
 8006d6c:	45b8      	cmp	r8, r7
 8006d6e:	d003      	beq.n	8006d78 <_dtoa_r+0x980>
 8006d70:	4641      	mov	r1, r8
 8006d72:	4620      	mov	r0, r4
 8006d74:	f000 fa72 	bl	800725c <_Bfree>
 8006d78:	4639      	mov	r1, r7
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f000 fa6e 	bl	800725c <_Bfree>
 8006d80:	e69c      	b.n	8006abc <_dtoa_r+0x6c4>
 8006d82:	2600      	movs	r6, #0
 8006d84:	4637      	mov	r7, r6
 8006d86:	e7e1      	b.n	8006d4c <_dtoa_r+0x954>
 8006d88:	46bb      	mov	fp, r7
 8006d8a:	4637      	mov	r7, r6
 8006d8c:	e599      	b.n	80068c2 <_dtoa_r+0x4ca>
 8006d8e:	bf00      	nop
 8006d90:	40240000 	.word	0x40240000
 8006d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 80c8 	beq.w	8006f2c <_dtoa_r+0xb34>
 8006d9c:	9b04      	ldr	r3, [sp, #16]
 8006d9e:	9301      	str	r3, [sp, #4]
 8006da0:	2d00      	cmp	r5, #0
 8006da2:	dd05      	ble.n	8006db0 <_dtoa_r+0x9b8>
 8006da4:	4639      	mov	r1, r7
 8006da6:	462a      	mov	r2, r5
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fc27 	bl	80075fc <__lshift>
 8006dae:	4607      	mov	r7, r0
 8006db0:	f1b8 0f00 	cmp.w	r8, #0
 8006db4:	d05b      	beq.n	8006e6e <_dtoa_r+0xa76>
 8006db6:	6879      	ldr	r1, [r7, #4]
 8006db8:	4620      	mov	r0, r4
 8006dba:	f000 fa0f 	bl	80071dc <_Balloc>
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	b928      	cbnz	r0, 8006dce <_dtoa_r+0x9d6>
 8006dc2:	4b83      	ldr	r3, [pc, #524]	; (8006fd0 <_dtoa_r+0xbd8>)
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006dca:	f7ff bb2e 	b.w	800642a <_dtoa_r+0x32>
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	3202      	adds	r2, #2
 8006dd2:	0092      	lsls	r2, r2, #2
 8006dd4:	f107 010c 	add.w	r1, r7, #12
 8006dd8:	300c      	adds	r0, #12
 8006dda:	f001 f985 	bl	80080e8 <memcpy>
 8006dde:	2201      	movs	r2, #1
 8006de0:	4629      	mov	r1, r5
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 fc0a 	bl	80075fc <__lshift>
 8006de8:	9b00      	ldr	r3, [sp, #0]
 8006dea:	3301      	adds	r3, #1
 8006dec:	9304      	str	r3, [sp, #16]
 8006dee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006df2:	4413      	add	r3, r2
 8006df4:	9308      	str	r3, [sp, #32]
 8006df6:	9b02      	ldr	r3, [sp, #8]
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	46b8      	mov	r8, r7
 8006dfe:	9306      	str	r3, [sp, #24]
 8006e00:	4607      	mov	r7, r0
 8006e02:	9b04      	ldr	r3, [sp, #16]
 8006e04:	4631      	mov	r1, r6
 8006e06:	3b01      	subs	r3, #1
 8006e08:	4650      	mov	r0, sl
 8006e0a:	9301      	str	r3, [sp, #4]
 8006e0c:	f7ff fa6b 	bl	80062e6 <quorem>
 8006e10:	4641      	mov	r1, r8
 8006e12:	9002      	str	r0, [sp, #8]
 8006e14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e18:	4650      	mov	r0, sl
 8006e1a:	f000 fc5b 	bl	80076d4 <__mcmp>
 8006e1e:	463a      	mov	r2, r7
 8006e20:	9005      	str	r0, [sp, #20]
 8006e22:	4631      	mov	r1, r6
 8006e24:	4620      	mov	r0, r4
 8006e26:	f000 fc71 	bl	800770c <__mdiff>
 8006e2a:	68c2      	ldr	r2, [r0, #12]
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	bb02      	cbnz	r2, 8006e72 <_dtoa_r+0xa7a>
 8006e30:	4601      	mov	r1, r0
 8006e32:	4650      	mov	r0, sl
 8006e34:	f000 fc4e 	bl	80076d4 <__mcmp>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	9209      	str	r2, [sp, #36]	; 0x24
 8006e40:	f000 fa0c 	bl	800725c <_Bfree>
 8006e44:	9b07      	ldr	r3, [sp, #28]
 8006e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e48:	9d04      	ldr	r5, [sp, #16]
 8006e4a:	ea43 0102 	orr.w	r1, r3, r2
 8006e4e:	9b06      	ldr	r3, [sp, #24]
 8006e50:	4319      	orrs	r1, r3
 8006e52:	d110      	bne.n	8006e76 <_dtoa_r+0xa7e>
 8006e54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e58:	d029      	beq.n	8006eae <_dtoa_r+0xab6>
 8006e5a:	9b05      	ldr	r3, [sp, #20]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	dd02      	ble.n	8006e66 <_dtoa_r+0xa6e>
 8006e60:	9b02      	ldr	r3, [sp, #8]
 8006e62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006e66:	9b01      	ldr	r3, [sp, #4]
 8006e68:	f883 9000 	strb.w	r9, [r3]
 8006e6c:	e774      	b.n	8006d58 <_dtoa_r+0x960>
 8006e6e:	4638      	mov	r0, r7
 8006e70:	e7ba      	b.n	8006de8 <_dtoa_r+0x9f0>
 8006e72:	2201      	movs	r2, #1
 8006e74:	e7e1      	b.n	8006e3a <_dtoa_r+0xa42>
 8006e76:	9b05      	ldr	r3, [sp, #20]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	db04      	blt.n	8006e86 <_dtoa_r+0xa8e>
 8006e7c:	9907      	ldr	r1, [sp, #28]
 8006e7e:	430b      	orrs	r3, r1
 8006e80:	9906      	ldr	r1, [sp, #24]
 8006e82:	430b      	orrs	r3, r1
 8006e84:	d120      	bne.n	8006ec8 <_dtoa_r+0xad0>
 8006e86:	2a00      	cmp	r2, #0
 8006e88:	dded      	ble.n	8006e66 <_dtoa_r+0xa6e>
 8006e8a:	4651      	mov	r1, sl
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f000 fbb4 	bl	80075fc <__lshift>
 8006e94:	4631      	mov	r1, r6
 8006e96:	4682      	mov	sl, r0
 8006e98:	f000 fc1c 	bl	80076d4 <__mcmp>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	dc03      	bgt.n	8006ea8 <_dtoa_r+0xab0>
 8006ea0:	d1e1      	bne.n	8006e66 <_dtoa_r+0xa6e>
 8006ea2:	f019 0f01 	tst.w	r9, #1
 8006ea6:	d0de      	beq.n	8006e66 <_dtoa_r+0xa6e>
 8006ea8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006eac:	d1d8      	bne.n	8006e60 <_dtoa_r+0xa68>
 8006eae:	9a01      	ldr	r2, [sp, #4]
 8006eb0:	2339      	movs	r3, #57	; 0x39
 8006eb2:	7013      	strb	r3, [r2, #0]
 8006eb4:	462b      	mov	r3, r5
 8006eb6:	461d      	mov	r5, r3
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ebe:	2a39      	cmp	r2, #57	; 0x39
 8006ec0:	d06c      	beq.n	8006f9c <_dtoa_r+0xba4>
 8006ec2:	3201      	adds	r2, #1
 8006ec4:	701a      	strb	r2, [r3, #0]
 8006ec6:	e747      	b.n	8006d58 <_dtoa_r+0x960>
 8006ec8:	2a00      	cmp	r2, #0
 8006eca:	dd07      	ble.n	8006edc <_dtoa_r+0xae4>
 8006ecc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ed0:	d0ed      	beq.n	8006eae <_dtoa_r+0xab6>
 8006ed2:	9a01      	ldr	r2, [sp, #4]
 8006ed4:	f109 0301 	add.w	r3, r9, #1
 8006ed8:	7013      	strb	r3, [r2, #0]
 8006eda:	e73d      	b.n	8006d58 <_dtoa_r+0x960>
 8006edc:	9b04      	ldr	r3, [sp, #16]
 8006ede:	9a08      	ldr	r2, [sp, #32]
 8006ee0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d043      	beq.n	8006f70 <_dtoa_r+0xb78>
 8006ee8:	4651      	mov	r1, sl
 8006eea:	2300      	movs	r3, #0
 8006eec:	220a      	movs	r2, #10
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f000 f9d6 	bl	80072a0 <__multadd>
 8006ef4:	45b8      	cmp	r8, r7
 8006ef6:	4682      	mov	sl, r0
 8006ef8:	f04f 0300 	mov.w	r3, #0
 8006efc:	f04f 020a 	mov.w	r2, #10
 8006f00:	4641      	mov	r1, r8
 8006f02:	4620      	mov	r0, r4
 8006f04:	d107      	bne.n	8006f16 <_dtoa_r+0xb1e>
 8006f06:	f000 f9cb 	bl	80072a0 <__multadd>
 8006f0a:	4680      	mov	r8, r0
 8006f0c:	4607      	mov	r7, r0
 8006f0e:	9b04      	ldr	r3, [sp, #16]
 8006f10:	3301      	adds	r3, #1
 8006f12:	9304      	str	r3, [sp, #16]
 8006f14:	e775      	b.n	8006e02 <_dtoa_r+0xa0a>
 8006f16:	f000 f9c3 	bl	80072a0 <__multadd>
 8006f1a:	4639      	mov	r1, r7
 8006f1c:	4680      	mov	r8, r0
 8006f1e:	2300      	movs	r3, #0
 8006f20:	220a      	movs	r2, #10
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 f9bc 	bl	80072a0 <__multadd>
 8006f28:	4607      	mov	r7, r0
 8006f2a:	e7f0      	b.n	8006f0e <_dtoa_r+0xb16>
 8006f2c:	9b04      	ldr	r3, [sp, #16]
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	9d00      	ldr	r5, [sp, #0]
 8006f32:	4631      	mov	r1, r6
 8006f34:	4650      	mov	r0, sl
 8006f36:	f7ff f9d6 	bl	80062e6 <quorem>
 8006f3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006f3e:	9b00      	ldr	r3, [sp, #0]
 8006f40:	f805 9b01 	strb.w	r9, [r5], #1
 8006f44:	1aea      	subs	r2, r5, r3
 8006f46:	9b01      	ldr	r3, [sp, #4]
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	dd07      	ble.n	8006f5c <_dtoa_r+0xb64>
 8006f4c:	4651      	mov	r1, sl
 8006f4e:	2300      	movs	r3, #0
 8006f50:	220a      	movs	r2, #10
 8006f52:	4620      	mov	r0, r4
 8006f54:	f000 f9a4 	bl	80072a0 <__multadd>
 8006f58:	4682      	mov	sl, r0
 8006f5a:	e7ea      	b.n	8006f32 <_dtoa_r+0xb3a>
 8006f5c:	9b01      	ldr	r3, [sp, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	bfc8      	it	gt
 8006f62:	461d      	movgt	r5, r3
 8006f64:	9b00      	ldr	r3, [sp, #0]
 8006f66:	bfd8      	it	le
 8006f68:	2501      	movle	r5, #1
 8006f6a:	441d      	add	r5, r3
 8006f6c:	f04f 0800 	mov.w	r8, #0
 8006f70:	4651      	mov	r1, sl
 8006f72:	2201      	movs	r2, #1
 8006f74:	4620      	mov	r0, r4
 8006f76:	f000 fb41 	bl	80075fc <__lshift>
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4682      	mov	sl, r0
 8006f7e:	f000 fba9 	bl	80076d4 <__mcmp>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	dc96      	bgt.n	8006eb4 <_dtoa_r+0xabc>
 8006f86:	d102      	bne.n	8006f8e <_dtoa_r+0xb96>
 8006f88:	f019 0f01 	tst.w	r9, #1
 8006f8c:	d192      	bne.n	8006eb4 <_dtoa_r+0xabc>
 8006f8e:	462b      	mov	r3, r5
 8006f90:	461d      	mov	r5, r3
 8006f92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f96:	2a30      	cmp	r2, #48	; 0x30
 8006f98:	d0fa      	beq.n	8006f90 <_dtoa_r+0xb98>
 8006f9a:	e6dd      	b.n	8006d58 <_dtoa_r+0x960>
 8006f9c:	9a00      	ldr	r2, [sp, #0]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d189      	bne.n	8006eb6 <_dtoa_r+0xabe>
 8006fa2:	f10b 0b01 	add.w	fp, fp, #1
 8006fa6:	2331      	movs	r3, #49	; 0x31
 8006fa8:	e796      	b.n	8006ed8 <_dtoa_r+0xae0>
 8006faa:	4b0a      	ldr	r3, [pc, #40]	; (8006fd4 <_dtoa_r+0xbdc>)
 8006fac:	f7ff ba99 	b.w	80064e2 <_dtoa_r+0xea>
 8006fb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f47f aa6d 	bne.w	8006492 <_dtoa_r+0x9a>
 8006fb8:	4b07      	ldr	r3, [pc, #28]	; (8006fd8 <_dtoa_r+0xbe0>)
 8006fba:	f7ff ba92 	b.w	80064e2 <_dtoa_r+0xea>
 8006fbe:	9b01      	ldr	r3, [sp, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	dcb5      	bgt.n	8006f30 <_dtoa_r+0xb38>
 8006fc4:	9b07      	ldr	r3, [sp, #28]
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	f73f aeb1 	bgt.w	8006d2e <_dtoa_r+0x936>
 8006fcc:	e7b0      	b.n	8006f30 <_dtoa_r+0xb38>
 8006fce:	bf00      	nop
 8006fd0:	08008950 	.word	0x08008950
 8006fd4:	080088b0 	.word	0x080088b0
 8006fd8:	080088d4 	.word	0x080088d4

08006fdc <_free_r>:
 8006fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fde:	2900      	cmp	r1, #0
 8006fe0:	d044      	beq.n	800706c <_free_r+0x90>
 8006fe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fe6:	9001      	str	r0, [sp, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f1a1 0404 	sub.w	r4, r1, #4
 8006fee:	bfb8      	it	lt
 8006ff0:	18e4      	addlt	r4, r4, r3
 8006ff2:	f000 f8e7 	bl	80071c4 <__malloc_lock>
 8006ff6:	4a1e      	ldr	r2, [pc, #120]	; (8007070 <_free_r+0x94>)
 8006ff8:	9801      	ldr	r0, [sp, #4]
 8006ffa:	6813      	ldr	r3, [r2, #0]
 8006ffc:	b933      	cbnz	r3, 800700c <_free_r+0x30>
 8006ffe:	6063      	str	r3, [r4, #4]
 8007000:	6014      	str	r4, [r2, #0]
 8007002:	b003      	add	sp, #12
 8007004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007008:	f000 b8e2 	b.w	80071d0 <__malloc_unlock>
 800700c:	42a3      	cmp	r3, r4
 800700e:	d908      	bls.n	8007022 <_free_r+0x46>
 8007010:	6825      	ldr	r5, [r4, #0]
 8007012:	1961      	adds	r1, r4, r5
 8007014:	428b      	cmp	r3, r1
 8007016:	bf01      	itttt	eq
 8007018:	6819      	ldreq	r1, [r3, #0]
 800701a:	685b      	ldreq	r3, [r3, #4]
 800701c:	1949      	addeq	r1, r1, r5
 800701e:	6021      	streq	r1, [r4, #0]
 8007020:	e7ed      	b.n	8006ffe <_free_r+0x22>
 8007022:	461a      	mov	r2, r3
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	b10b      	cbz	r3, 800702c <_free_r+0x50>
 8007028:	42a3      	cmp	r3, r4
 800702a:	d9fa      	bls.n	8007022 <_free_r+0x46>
 800702c:	6811      	ldr	r1, [r2, #0]
 800702e:	1855      	adds	r5, r2, r1
 8007030:	42a5      	cmp	r5, r4
 8007032:	d10b      	bne.n	800704c <_free_r+0x70>
 8007034:	6824      	ldr	r4, [r4, #0]
 8007036:	4421      	add	r1, r4
 8007038:	1854      	adds	r4, r2, r1
 800703a:	42a3      	cmp	r3, r4
 800703c:	6011      	str	r1, [r2, #0]
 800703e:	d1e0      	bne.n	8007002 <_free_r+0x26>
 8007040:	681c      	ldr	r4, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	6053      	str	r3, [r2, #4]
 8007046:	440c      	add	r4, r1
 8007048:	6014      	str	r4, [r2, #0]
 800704a:	e7da      	b.n	8007002 <_free_r+0x26>
 800704c:	d902      	bls.n	8007054 <_free_r+0x78>
 800704e:	230c      	movs	r3, #12
 8007050:	6003      	str	r3, [r0, #0]
 8007052:	e7d6      	b.n	8007002 <_free_r+0x26>
 8007054:	6825      	ldr	r5, [r4, #0]
 8007056:	1961      	adds	r1, r4, r5
 8007058:	428b      	cmp	r3, r1
 800705a:	bf04      	itt	eq
 800705c:	6819      	ldreq	r1, [r3, #0]
 800705e:	685b      	ldreq	r3, [r3, #4]
 8007060:	6063      	str	r3, [r4, #4]
 8007062:	bf04      	itt	eq
 8007064:	1949      	addeq	r1, r1, r5
 8007066:	6021      	streq	r1, [r4, #0]
 8007068:	6054      	str	r4, [r2, #4]
 800706a:	e7ca      	b.n	8007002 <_free_r+0x26>
 800706c:	b003      	add	sp, #12
 800706e:	bd30      	pop	{r4, r5, pc}
 8007070:	20000454 	.word	0x20000454

08007074 <malloc>:
 8007074:	4b02      	ldr	r3, [pc, #8]	; (8007080 <malloc+0xc>)
 8007076:	4601      	mov	r1, r0
 8007078:	6818      	ldr	r0, [r3, #0]
 800707a:	f000 b823 	b.w	80070c4 <_malloc_r>
 800707e:	bf00      	nop
 8007080:	20000064 	.word	0x20000064

08007084 <sbrk_aligned>:
 8007084:	b570      	push	{r4, r5, r6, lr}
 8007086:	4e0e      	ldr	r6, [pc, #56]	; (80070c0 <sbrk_aligned+0x3c>)
 8007088:	460c      	mov	r4, r1
 800708a:	6831      	ldr	r1, [r6, #0]
 800708c:	4605      	mov	r5, r0
 800708e:	b911      	cbnz	r1, 8007096 <sbrk_aligned+0x12>
 8007090:	f001 f81a 	bl	80080c8 <_sbrk_r>
 8007094:	6030      	str	r0, [r6, #0]
 8007096:	4621      	mov	r1, r4
 8007098:	4628      	mov	r0, r5
 800709a:	f001 f815 	bl	80080c8 <_sbrk_r>
 800709e:	1c43      	adds	r3, r0, #1
 80070a0:	d00a      	beq.n	80070b8 <sbrk_aligned+0x34>
 80070a2:	1cc4      	adds	r4, r0, #3
 80070a4:	f024 0403 	bic.w	r4, r4, #3
 80070a8:	42a0      	cmp	r0, r4
 80070aa:	d007      	beq.n	80070bc <sbrk_aligned+0x38>
 80070ac:	1a21      	subs	r1, r4, r0
 80070ae:	4628      	mov	r0, r5
 80070b0:	f001 f80a 	bl	80080c8 <_sbrk_r>
 80070b4:	3001      	adds	r0, #1
 80070b6:	d101      	bne.n	80070bc <sbrk_aligned+0x38>
 80070b8:	f04f 34ff 	mov.w	r4, #4294967295
 80070bc:	4620      	mov	r0, r4
 80070be:	bd70      	pop	{r4, r5, r6, pc}
 80070c0:	20000458 	.word	0x20000458

080070c4 <_malloc_r>:
 80070c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c8:	1ccd      	adds	r5, r1, #3
 80070ca:	f025 0503 	bic.w	r5, r5, #3
 80070ce:	3508      	adds	r5, #8
 80070d0:	2d0c      	cmp	r5, #12
 80070d2:	bf38      	it	cc
 80070d4:	250c      	movcc	r5, #12
 80070d6:	2d00      	cmp	r5, #0
 80070d8:	4607      	mov	r7, r0
 80070da:	db01      	blt.n	80070e0 <_malloc_r+0x1c>
 80070dc:	42a9      	cmp	r1, r5
 80070de:	d905      	bls.n	80070ec <_malloc_r+0x28>
 80070e0:	230c      	movs	r3, #12
 80070e2:	603b      	str	r3, [r7, #0]
 80070e4:	2600      	movs	r6, #0
 80070e6:	4630      	mov	r0, r6
 80070e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80071c0 <_malloc_r+0xfc>
 80070f0:	f000 f868 	bl	80071c4 <__malloc_lock>
 80070f4:	f8d8 3000 	ldr.w	r3, [r8]
 80070f8:	461c      	mov	r4, r3
 80070fa:	bb5c      	cbnz	r4, 8007154 <_malloc_r+0x90>
 80070fc:	4629      	mov	r1, r5
 80070fe:	4638      	mov	r0, r7
 8007100:	f7ff ffc0 	bl	8007084 <sbrk_aligned>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	4604      	mov	r4, r0
 8007108:	d155      	bne.n	80071b6 <_malloc_r+0xf2>
 800710a:	f8d8 4000 	ldr.w	r4, [r8]
 800710e:	4626      	mov	r6, r4
 8007110:	2e00      	cmp	r6, #0
 8007112:	d145      	bne.n	80071a0 <_malloc_r+0xdc>
 8007114:	2c00      	cmp	r4, #0
 8007116:	d048      	beq.n	80071aa <_malloc_r+0xe6>
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	4631      	mov	r1, r6
 800711c:	4638      	mov	r0, r7
 800711e:	eb04 0903 	add.w	r9, r4, r3
 8007122:	f000 ffd1 	bl	80080c8 <_sbrk_r>
 8007126:	4581      	cmp	r9, r0
 8007128:	d13f      	bne.n	80071aa <_malloc_r+0xe6>
 800712a:	6821      	ldr	r1, [r4, #0]
 800712c:	1a6d      	subs	r5, r5, r1
 800712e:	4629      	mov	r1, r5
 8007130:	4638      	mov	r0, r7
 8007132:	f7ff ffa7 	bl	8007084 <sbrk_aligned>
 8007136:	3001      	adds	r0, #1
 8007138:	d037      	beq.n	80071aa <_malloc_r+0xe6>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	442b      	add	r3, r5
 800713e:	6023      	str	r3, [r4, #0]
 8007140:	f8d8 3000 	ldr.w	r3, [r8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d038      	beq.n	80071ba <_malloc_r+0xf6>
 8007148:	685a      	ldr	r2, [r3, #4]
 800714a:	42a2      	cmp	r2, r4
 800714c:	d12b      	bne.n	80071a6 <_malloc_r+0xe2>
 800714e:	2200      	movs	r2, #0
 8007150:	605a      	str	r2, [r3, #4]
 8007152:	e00f      	b.n	8007174 <_malloc_r+0xb0>
 8007154:	6822      	ldr	r2, [r4, #0]
 8007156:	1b52      	subs	r2, r2, r5
 8007158:	d41f      	bmi.n	800719a <_malloc_r+0xd6>
 800715a:	2a0b      	cmp	r2, #11
 800715c:	d917      	bls.n	800718e <_malloc_r+0xca>
 800715e:	1961      	adds	r1, r4, r5
 8007160:	42a3      	cmp	r3, r4
 8007162:	6025      	str	r5, [r4, #0]
 8007164:	bf18      	it	ne
 8007166:	6059      	strne	r1, [r3, #4]
 8007168:	6863      	ldr	r3, [r4, #4]
 800716a:	bf08      	it	eq
 800716c:	f8c8 1000 	streq.w	r1, [r8]
 8007170:	5162      	str	r2, [r4, r5]
 8007172:	604b      	str	r3, [r1, #4]
 8007174:	4638      	mov	r0, r7
 8007176:	f104 060b 	add.w	r6, r4, #11
 800717a:	f000 f829 	bl	80071d0 <__malloc_unlock>
 800717e:	f026 0607 	bic.w	r6, r6, #7
 8007182:	1d23      	adds	r3, r4, #4
 8007184:	1af2      	subs	r2, r6, r3
 8007186:	d0ae      	beq.n	80070e6 <_malloc_r+0x22>
 8007188:	1b9b      	subs	r3, r3, r6
 800718a:	50a3      	str	r3, [r4, r2]
 800718c:	e7ab      	b.n	80070e6 <_malloc_r+0x22>
 800718e:	42a3      	cmp	r3, r4
 8007190:	6862      	ldr	r2, [r4, #4]
 8007192:	d1dd      	bne.n	8007150 <_malloc_r+0x8c>
 8007194:	f8c8 2000 	str.w	r2, [r8]
 8007198:	e7ec      	b.n	8007174 <_malloc_r+0xb0>
 800719a:	4623      	mov	r3, r4
 800719c:	6864      	ldr	r4, [r4, #4]
 800719e:	e7ac      	b.n	80070fa <_malloc_r+0x36>
 80071a0:	4634      	mov	r4, r6
 80071a2:	6876      	ldr	r6, [r6, #4]
 80071a4:	e7b4      	b.n	8007110 <_malloc_r+0x4c>
 80071a6:	4613      	mov	r3, r2
 80071a8:	e7cc      	b.n	8007144 <_malloc_r+0x80>
 80071aa:	230c      	movs	r3, #12
 80071ac:	603b      	str	r3, [r7, #0]
 80071ae:	4638      	mov	r0, r7
 80071b0:	f000 f80e 	bl	80071d0 <__malloc_unlock>
 80071b4:	e797      	b.n	80070e6 <_malloc_r+0x22>
 80071b6:	6025      	str	r5, [r4, #0]
 80071b8:	e7dc      	b.n	8007174 <_malloc_r+0xb0>
 80071ba:	605b      	str	r3, [r3, #4]
 80071bc:	deff      	udf	#255	; 0xff
 80071be:	bf00      	nop
 80071c0:	20000454 	.word	0x20000454

080071c4 <__malloc_lock>:
 80071c4:	4801      	ldr	r0, [pc, #4]	; (80071cc <__malloc_lock+0x8>)
 80071c6:	f7ff b88c 	b.w	80062e2 <__retarget_lock_acquire_recursive>
 80071ca:	bf00      	nop
 80071cc:	20000450 	.word	0x20000450

080071d0 <__malloc_unlock>:
 80071d0:	4801      	ldr	r0, [pc, #4]	; (80071d8 <__malloc_unlock+0x8>)
 80071d2:	f7ff b887 	b.w	80062e4 <__retarget_lock_release_recursive>
 80071d6:	bf00      	nop
 80071d8:	20000450 	.word	0x20000450

080071dc <_Balloc>:
 80071dc:	b570      	push	{r4, r5, r6, lr}
 80071de:	69c6      	ldr	r6, [r0, #28]
 80071e0:	4604      	mov	r4, r0
 80071e2:	460d      	mov	r5, r1
 80071e4:	b976      	cbnz	r6, 8007204 <_Balloc+0x28>
 80071e6:	2010      	movs	r0, #16
 80071e8:	f7ff ff44 	bl	8007074 <malloc>
 80071ec:	4602      	mov	r2, r0
 80071ee:	61e0      	str	r0, [r4, #28]
 80071f0:	b920      	cbnz	r0, 80071fc <_Balloc+0x20>
 80071f2:	4b18      	ldr	r3, [pc, #96]	; (8007254 <_Balloc+0x78>)
 80071f4:	4818      	ldr	r0, [pc, #96]	; (8007258 <_Balloc+0x7c>)
 80071f6:	216b      	movs	r1, #107	; 0x6b
 80071f8:	f000 ff84 	bl	8008104 <__assert_func>
 80071fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007200:	6006      	str	r6, [r0, #0]
 8007202:	60c6      	str	r6, [r0, #12]
 8007204:	69e6      	ldr	r6, [r4, #28]
 8007206:	68f3      	ldr	r3, [r6, #12]
 8007208:	b183      	cbz	r3, 800722c <_Balloc+0x50>
 800720a:	69e3      	ldr	r3, [r4, #28]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007212:	b9b8      	cbnz	r0, 8007244 <_Balloc+0x68>
 8007214:	2101      	movs	r1, #1
 8007216:	fa01 f605 	lsl.w	r6, r1, r5
 800721a:	1d72      	adds	r2, r6, #5
 800721c:	0092      	lsls	r2, r2, #2
 800721e:	4620      	mov	r0, r4
 8007220:	f000 ff8e 	bl	8008140 <_calloc_r>
 8007224:	b160      	cbz	r0, 8007240 <_Balloc+0x64>
 8007226:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800722a:	e00e      	b.n	800724a <_Balloc+0x6e>
 800722c:	2221      	movs	r2, #33	; 0x21
 800722e:	2104      	movs	r1, #4
 8007230:	4620      	mov	r0, r4
 8007232:	f000 ff85 	bl	8008140 <_calloc_r>
 8007236:	69e3      	ldr	r3, [r4, #28]
 8007238:	60f0      	str	r0, [r6, #12]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1e4      	bne.n	800720a <_Balloc+0x2e>
 8007240:	2000      	movs	r0, #0
 8007242:	bd70      	pop	{r4, r5, r6, pc}
 8007244:	6802      	ldr	r2, [r0, #0]
 8007246:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800724a:	2300      	movs	r3, #0
 800724c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007250:	e7f7      	b.n	8007242 <_Balloc+0x66>
 8007252:	bf00      	nop
 8007254:	080088e1 	.word	0x080088e1
 8007258:	08008961 	.word	0x08008961

0800725c <_Bfree>:
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	69c6      	ldr	r6, [r0, #28]
 8007260:	4605      	mov	r5, r0
 8007262:	460c      	mov	r4, r1
 8007264:	b976      	cbnz	r6, 8007284 <_Bfree+0x28>
 8007266:	2010      	movs	r0, #16
 8007268:	f7ff ff04 	bl	8007074 <malloc>
 800726c:	4602      	mov	r2, r0
 800726e:	61e8      	str	r0, [r5, #28]
 8007270:	b920      	cbnz	r0, 800727c <_Bfree+0x20>
 8007272:	4b09      	ldr	r3, [pc, #36]	; (8007298 <_Bfree+0x3c>)
 8007274:	4809      	ldr	r0, [pc, #36]	; (800729c <_Bfree+0x40>)
 8007276:	218f      	movs	r1, #143	; 0x8f
 8007278:	f000 ff44 	bl	8008104 <__assert_func>
 800727c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007280:	6006      	str	r6, [r0, #0]
 8007282:	60c6      	str	r6, [r0, #12]
 8007284:	b13c      	cbz	r4, 8007296 <_Bfree+0x3a>
 8007286:	69eb      	ldr	r3, [r5, #28]
 8007288:	6862      	ldr	r2, [r4, #4]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007290:	6021      	str	r1, [r4, #0]
 8007292:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007296:	bd70      	pop	{r4, r5, r6, pc}
 8007298:	080088e1 	.word	0x080088e1
 800729c:	08008961 	.word	0x08008961

080072a0 <__multadd>:
 80072a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a4:	690d      	ldr	r5, [r1, #16]
 80072a6:	4607      	mov	r7, r0
 80072a8:	460c      	mov	r4, r1
 80072aa:	461e      	mov	r6, r3
 80072ac:	f101 0c14 	add.w	ip, r1, #20
 80072b0:	2000      	movs	r0, #0
 80072b2:	f8dc 3000 	ldr.w	r3, [ip]
 80072b6:	b299      	uxth	r1, r3
 80072b8:	fb02 6101 	mla	r1, r2, r1, r6
 80072bc:	0c1e      	lsrs	r6, r3, #16
 80072be:	0c0b      	lsrs	r3, r1, #16
 80072c0:	fb02 3306 	mla	r3, r2, r6, r3
 80072c4:	b289      	uxth	r1, r1
 80072c6:	3001      	adds	r0, #1
 80072c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072cc:	4285      	cmp	r5, r0
 80072ce:	f84c 1b04 	str.w	r1, [ip], #4
 80072d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072d6:	dcec      	bgt.n	80072b2 <__multadd+0x12>
 80072d8:	b30e      	cbz	r6, 800731e <__multadd+0x7e>
 80072da:	68a3      	ldr	r3, [r4, #8]
 80072dc:	42ab      	cmp	r3, r5
 80072de:	dc19      	bgt.n	8007314 <__multadd+0x74>
 80072e0:	6861      	ldr	r1, [r4, #4]
 80072e2:	4638      	mov	r0, r7
 80072e4:	3101      	adds	r1, #1
 80072e6:	f7ff ff79 	bl	80071dc <_Balloc>
 80072ea:	4680      	mov	r8, r0
 80072ec:	b928      	cbnz	r0, 80072fa <__multadd+0x5a>
 80072ee:	4602      	mov	r2, r0
 80072f0:	4b0c      	ldr	r3, [pc, #48]	; (8007324 <__multadd+0x84>)
 80072f2:	480d      	ldr	r0, [pc, #52]	; (8007328 <__multadd+0x88>)
 80072f4:	21ba      	movs	r1, #186	; 0xba
 80072f6:	f000 ff05 	bl	8008104 <__assert_func>
 80072fa:	6922      	ldr	r2, [r4, #16]
 80072fc:	3202      	adds	r2, #2
 80072fe:	f104 010c 	add.w	r1, r4, #12
 8007302:	0092      	lsls	r2, r2, #2
 8007304:	300c      	adds	r0, #12
 8007306:	f000 feef 	bl	80080e8 <memcpy>
 800730a:	4621      	mov	r1, r4
 800730c:	4638      	mov	r0, r7
 800730e:	f7ff ffa5 	bl	800725c <_Bfree>
 8007312:	4644      	mov	r4, r8
 8007314:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007318:	3501      	adds	r5, #1
 800731a:	615e      	str	r6, [r3, #20]
 800731c:	6125      	str	r5, [r4, #16]
 800731e:	4620      	mov	r0, r4
 8007320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007324:	08008950 	.word	0x08008950
 8007328:	08008961 	.word	0x08008961

0800732c <__hi0bits>:
 800732c:	0c03      	lsrs	r3, r0, #16
 800732e:	041b      	lsls	r3, r3, #16
 8007330:	b9d3      	cbnz	r3, 8007368 <__hi0bits+0x3c>
 8007332:	0400      	lsls	r0, r0, #16
 8007334:	2310      	movs	r3, #16
 8007336:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800733a:	bf04      	itt	eq
 800733c:	0200      	lsleq	r0, r0, #8
 800733e:	3308      	addeq	r3, #8
 8007340:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007344:	bf04      	itt	eq
 8007346:	0100      	lsleq	r0, r0, #4
 8007348:	3304      	addeq	r3, #4
 800734a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800734e:	bf04      	itt	eq
 8007350:	0080      	lsleq	r0, r0, #2
 8007352:	3302      	addeq	r3, #2
 8007354:	2800      	cmp	r0, #0
 8007356:	db05      	blt.n	8007364 <__hi0bits+0x38>
 8007358:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800735c:	f103 0301 	add.w	r3, r3, #1
 8007360:	bf08      	it	eq
 8007362:	2320      	moveq	r3, #32
 8007364:	4618      	mov	r0, r3
 8007366:	4770      	bx	lr
 8007368:	2300      	movs	r3, #0
 800736a:	e7e4      	b.n	8007336 <__hi0bits+0xa>

0800736c <__lo0bits>:
 800736c:	6803      	ldr	r3, [r0, #0]
 800736e:	f013 0207 	ands.w	r2, r3, #7
 8007372:	d00c      	beq.n	800738e <__lo0bits+0x22>
 8007374:	07d9      	lsls	r1, r3, #31
 8007376:	d422      	bmi.n	80073be <__lo0bits+0x52>
 8007378:	079a      	lsls	r2, r3, #30
 800737a:	bf49      	itett	mi
 800737c:	085b      	lsrmi	r3, r3, #1
 800737e:	089b      	lsrpl	r3, r3, #2
 8007380:	6003      	strmi	r3, [r0, #0]
 8007382:	2201      	movmi	r2, #1
 8007384:	bf5c      	itt	pl
 8007386:	6003      	strpl	r3, [r0, #0]
 8007388:	2202      	movpl	r2, #2
 800738a:	4610      	mov	r0, r2
 800738c:	4770      	bx	lr
 800738e:	b299      	uxth	r1, r3
 8007390:	b909      	cbnz	r1, 8007396 <__lo0bits+0x2a>
 8007392:	0c1b      	lsrs	r3, r3, #16
 8007394:	2210      	movs	r2, #16
 8007396:	b2d9      	uxtb	r1, r3
 8007398:	b909      	cbnz	r1, 800739e <__lo0bits+0x32>
 800739a:	3208      	adds	r2, #8
 800739c:	0a1b      	lsrs	r3, r3, #8
 800739e:	0719      	lsls	r1, r3, #28
 80073a0:	bf04      	itt	eq
 80073a2:	091b      	lsreq	r3, r3, #4
 80073a4:	3204      	addeq	r2, #4
 80073a6:	0799      	lsls	r1, r3, #30
 80073a8:	bf04      	itt	eq
 80073aa:	089b      	lsreq	r3, r3, #2
 80073ac:	3202      	addeq	r2, #2
 80073ae:	07d9      	lsls	r1, r3, #31
 80073b0:	d403      	bmi.n	80073ba <__lo0bits+0x4e>
 80073b2:	085b      	lsrs	r3, r3, #1
 80073b4:	f102 0201 	add.w	r2, r2, #1
 80073b8:	d003      	beq.n	80073c2 <__lo0bits+0x56>
 80073ba:	6003      	str	r3, [r0, #0]
 80073bc:	e7e5      	b.n	800738a <__lo0bits+0x1e>
 80073be:	2200      	movs	r2, #0
 80073c0:	e7e3      	b.n	800738a <__lo0bits+0x1e>
 80073c2:	2220      	movs	r2, #32
 80073c4:	e7e1      	b.n	800738a <__lo0bits+0x1e>
	...

080073c8 <__i2b>:
 80073c8:	b510      	push	{r4, lr}
 80073ca:	460c      	mov	r4, r1
 80073cc:	2101      	movs	r1, #1
 80073ce:	f7ff ff05 	bl	80071dc <_Balloc>
 80073d2:	4602      	mov	r2, r0
 80073d4:	b928      	cbnz	r0, 80073e2 <__i2b+0x1a>
 80073d6:	4b05      	ldr	r3, [pc, #20]	; (80073ec <__i2b+0x24>)
 80073d8:	4805      	ldr	r0, [pc, #20]	; (80073f0 <__i2b+0x28>)
 80073da:	f240 1145 	movw	r1, #325	; 0x145
 80073de:	f000 fe91 	bl	8008104 <__assert_func>
 80073e2:	2301      	movs	r3, #1
 80073e4:	6144      	str	r4, [r0, #20]
 80073e6:	6103      	str	r3, [r0, #16]
 80073e8:	bd10      	pop	{r4, pc}
 80073ea:	bf00      	nop
 80073ec:	08008950 	.word	0x08008950
 80073f0:	08008961 	.word	0x08008961

080073f4 <__multiply>:
 80073f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f8:	4691      	mov	r9, r2
 80073fa:	690a      	ldr	r2, [r1, #16]
 80073fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007400:	429a      	cmp	r2, r3
 8007402:	bfb8      	it	lt
 8007404:	460b      	movlt	r3, r1
 8007406:	460c      	mov	r4, r1
 8007408:	bfbc      	itt	lt
 800740a:	464c      	movlt	r4, r9
 800740c:	4699      	movlt	r9, r3
 800740e:	6927      	ldr	r7, [r4, #16]
 8007410:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007414:	68a3      	ldr	r3, [r4, #8]
 8007416:	6861      	ldr	r1, [r4, #4]
 8007418:	eb07 060a 	add.w	r6, r7, sl
 800741c:	42b3      	cmp	r3, r6
 800741e:	b085      	sub	sp, #20
 8007420:	bfb8      	it	lt
 8007422:	3101      	addlt	r1, #1
 8007424:	f7ff feda 	bl	80071dc <_Balloc>
 8007428:	b930      	cbnz	r0, 8007438 <__multiply+0x44>
 800742a:	4602      	mov	r2, r0
 800742c:	4b44      	ldr	r3, [pc, #272]	; (8007540 <__multiply+0x14c>)
 800742e:	4845      	ldr	r0, [pc, #276]	; (8007544 <__multiply+0x150>)
 8007430:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007434:	f000 fe66 	bl	8008104 <__assert_func>
 8007438:	f100 0514 	add.w	r5, r0, #20
 800743c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007440:	462b      	mov	r3, r5
 8007442:	2200      	movs	r2, #0
 8007444:	4543      	cmp	r3, r8
 8007446:	d321      	bcc.n	800748c <__multiply+0x98>
 8007448:	f104 0314 	add.w	r3, r4, #20
 800744c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007450:	f109 0314 	add.w	r3, r9, #20
 8007454:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007458:	9202      	str	r2, [sp, #8]
 800745a:	1b3a      	subs	r2, r7, r4
 800745c:	3a15      	subs	r2, #21
 800745e:	f022 0203 	bic.w	r2, r2, #3
 8007462:	3204      	adds	r2, #4
 8007464:	f104 0115 	add.w	r1, r4, #21
 8007468:	428f      	cmp	r7, r1
 800746a:	bf38      	it	cc
 800746c:	2204      	movcc	r2, #4
 800746e:	9201      	str	r2, [sp, #4]
 8007470:	9a02      	ldr	r2, [sp, #8]
 8007472:	9303      	str	r3, [sp, #12]
 8007474:	429a      	cmp	r2, r3
 8007476:	d80c      	bhi.n	8007492 <__multiply+0x9e>
 8007478:	2e00      	cmp	r6, #0
 800747a:	dd03      	ble.n	8007484 <__multiply+0x90>
 800747c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007480:	2b00      	cmp	r3, #0
 8007482:	d05b      	beq.n	800753c <__multiply+0x148>
 8007484:	6106      	str	r6, [r0, #16]
 8007486:	b005      	add	sp, #20
 8007488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800748c:	f843 2b04 	str.w	r2, [r3], #4
 8007490:	e7d8      	b.n	8007444 <__multiply+0x50>
 8007492:	f8b3 a000 	ldrh.w	sl, [r3]
 8007496:	f1ba 0f00 	cmp.w	sl, #0
 800749a:	d024      	beq.n	80074e6 <__multiply+0xf2>
 800749c:	f104 0e14 	add.w	lr, r4, #20
 80074a0:	46a9      	mov	r9, r5
 80074a2:	f04f 0c00 	mov.w	ip, #0
 80074a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80074aa:	f8d9 1000 	ldr.w	r1, [r9]
 80074ae:	fa1f fb82 	uxth.w	fp, r2
 80074b2:	b289      	uxth	r1, r1
 80074b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80074b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80074bc:	f8d9 2000 	ldr.w	r2, [r9]
 80074c0:	4461      	add	r1, ip
 80074c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80074ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80074ce:	b289      	uxth	r1, r1
 80074d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074d4:	4577      	cmp	r7, lr
 80074d6:	f849 1b04 	str.w	r1, [r9], #4
 80074da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074de:	d8e2      	bhi.n	80074a6 <__multiply+0xb2>
 80074e0:	9a01      	ldr	r2, [sp, #4]
 80074e2:	f845 c002 	str.w	ip, [r5, r2]
 80074e6:	9a03      	ldr	r2, [sp, #12]
 80074e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074ec:	3304      	adds	r3, #4
 80074ee:	f1b9 0f00 	cmp.w	r9, #0
 80074f2:	d021      	beq.n	8007538 <__multiply+0x144>
 80074f4:	6829      	ldr	r1, [r5, #0]
 80074f6:	f104 0c14 	add.w	ip, r4, #20
 80074fa:	46ae      	mov	lr, r5
 80074fc:	f04f 0a00 	mov.w	sl, #0
 8007500:	f8bc b000 	ldrh.w	fp, [ip]
 8007504:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007508:	fb09 220b 	mla	r2, r9, fp, r2
 800750c:	4452      	add	r2, sl
 800750e:	b289      	uxth	r1, r1
 8007510:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007514:	f84e 1b04 	str.w	r1, [lr], #4
 8007518:	f85c 1b04 	ldr.w	r1, [ip], #4
 800751c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007520:	f8be 1000 	ldrh.w	r1, [lr]
 8007524:	fb09 110a 	mla	r1, r9, sl, r1
 8007528:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800752c:	4567      	cmp	r7, ip
 800752e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007532:	d8e5      	bhi.n	8007500 <__multiply+0x10c>
 8007534:	9a01      	ldr	r2, [sp, #4]
 8007536:	50a9      	str	r1, [r5, r2]
 8007538:	3504      	adds	r5, #4
 800753a:	e799      	b.n	8007470 <__multiply+0x7c>
 800753c:	3e01      	subs	r6, #1
 800753e:	e79b      	b.n	8007478 <__multiply+0x84>
 8007540:	08008950 	.word	0x08008950
 8007544:	08008961 	.word	0x08008961

08007548 <__pow5mult>:
 8007548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800754c:	4615      	mov	r5, r2
 800754e:	f012 0203 	ands.w	r2, r2, #3
 8007552:	4606      	mov	r6, r0
 8007554:	460f      	mov	r7, r1
 8007556:	d007      	beq.n	8007568 <__pow5mult+0x20>
 8007558:	4c25      	ldr	r4, [pc, #148]	; (80075f0 <__pow5mult+0xa8>)
 800755a:	3a01      	subs	r2, #1
 800755c:	2300      	movs	r3, #0
 800755e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007562:	f7ff fe9d 	bl	80072a0 <__multadd>
 8007566:	4607      	mov	r7, r0
 8007568:	10ad      	asrs	r5, r5, #2
 800756a:	d03d      	beq.n	80075e8 <__pow5mult+0xa0>
 800756c:	69f4      	ldr	r4, [r6, #28]
 800756e:	b97c      	cbnz	r4, 8007590 <__pow5mult+0x48>
 8007570:	2010      	movs	r0, #16
 8007572:	f7ff fd7f 	bl	8007074 <malloc>
 8007576:	4602      	mov	r2, r0
 8007578:	61f0      	str	r0, [r6, #28]
 800757a:	b928      	cbnz	r0, 8007588 <__pow5mult+0x40>
 800757c:	4b1d      	ldr	r3, [pc, #116]	; (80075f4 <__pow5mult+0xac>)
 800757e:	481e      	ldr	r0, [pc, #120]	; (80075f8 <__pow5mult+0xb0>)
 8007580:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007584:	f000 fdbe 	bl	8008104 <__assert_func>
 8007588:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800758c:	6004      	str	r4, [r0, #0]
 800758e:	60c4      	str	r4, [r0, #12]
 8007590:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007594:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007598:	b94c      	cbnz	r4, 80075ae <__pow5mult+0x66>
 800759a:	f240 2171 	movw	r1, #625	; 0x271
 800759e:	4630      	mov	r0, r6
 80075a0:	f7ff ff12 	bl	80073c8 <__i2b>
 80075a4:	2300      	movs	r3, #0
 80075a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80075aa:	4604      	mov	r4, r0
 80075ac:	6003      	str	r3, [r0, #0]
 80075ae:	f04f 0900 	mov.w	r9, #0
 80075b2:	07eb      	lsls	r3, r5, #31
 80075b4:	d50a      	bpl.n	80075cc <__pow5mult+0x84>
 80075b6:	4639      	mov	r1, r7
 80075b8:	4622      	mov	r2, r4
 80075ba:	4630      	mov	r0, r6
 80075bc:	f7ff ff1a 	bl	80073f4 <__multiply>
 80075c0:	4639      	mov	r1, r7
 80075c2:	4680      	mov	r8, r0
 80075c4:	4630      	mov	r0, r6
 80075c6:	f7ff fe49 	bl	800725c <_Bfree>
 80075ca:	4647      	mov	r7, r8
 80075cc:	106d      	asrs	r5, r5, #1
 80075ce:	d00b      	beq.n	80075e8 <__pow5mult+0xa0>
 80075d0:	6820      	ldr	r0, [r4, #0]
 80075d2:	b938      	cbnz	r0, 80075e4 <__pow5mult+0x9c>
 80075d4:	4622      	mov	r2, r4
 80075d6:	4621      	mov	r1, r4
 80075d8:	4630      	mov	r0, r6
 80075da:	f7ff ff0b 	bl	80073f4 <__multiply>
 80075de:	6020      	str	r0, [r4, #0]
 80075e0:	f8c0 9000 	str.w	r9, [r0]
 80075e4:	4604      	mov	r4, r0
 80075e6:	e7e4      	b.n	80075b2 <__pow5mult+0x6a>
 80075e8:	4638      	mov	r0, r7
 80075ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ee:	bf00      	nop
 80075f0:	08008ab0 	.word	0x08008ab0
 80075f4:	080088e1 	.word	0x080088e1
 80075f8:	08008961 	.word	0x08008961

080075fc <__lshift>:
 80075fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007600:	460c      	mov	r4, r1
 8007602:	6849      	ldr	r1, [r1, #4]
 8007604:	6923      	ldr	r3, [r4, #16]
 8007606:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800760a:	68a3      	ldr	r3, [r4, #8]
 800760c:	4607      	mov	r7, r0
 800760e:	4691      	mov	r9, r2
 8007610:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007614:	f108 0601 	add.w	r6, r8, #1
 8007618:	42b3      	cmp	r3, r6
 800761a:	db0b      	blt.n	8007634 <__lshift+0x38>
 800761c:	4638      	mov	r0, r7
 800761e:	f7ff fddd 	bl	80071dc <_Balloc>
 8007622:	4605      	mov	r5, r0
 8007624:	b948      	cbnz	r0, 800763a <__lshift+0x3e>
 8007626:	4602      	mov	r2, r0
 8007628:	4b28      	ldr	r3, [pc, #160]	; (80076cc <__lshift+0xd0>)
 800762a:	4829      	ldr	r0, [pc, #164]	; (80076d0 <__lshift+0xd4>)
 800762c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007630:	f000 fd68 	bl	8008104 <__assert_func>
 8007634:	3101      	adds	r1, #1
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	e7ee      	b.n	8007618 <__lshift+0x1c>
 800763a:	2300      	movs	r3, #0
 800763c:	f100 0114 	add.w	r1, r0, #20
 8007640:	f100 0210 	add.w	r2, r0, #16
 8007644:	4618      	mov	r0, r3
 8007646:	4553      	cmp	r3, sl
 8007648:	db33      	blt.n	80076b2 <__lshift+0xb6>
 800764a:	6920      	ldr	r0, [r4, #16]
 800764c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007650:	f104 0314 	add.w	r3, r4, #20
 8007654:	f019 091f 	ands.w	r9, r9, #31
 8007658:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800765c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007660:	d02b      	beq.n	80076ba <__lshift+0xbe>
 8007662:	f1c9 0e20 	rsb	lr, r9, #32
 8007666:	468a      	mov	sl, r1
 8007668:	2200      	movs	r2, #0
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	fa00 f009 	lsl.w	r0, r0, r9
 8007670:	4310      	orrs	r0, r2
 8007672:	f84a 0b04 	str.w	r0, [sl], #4
 8007676:	f853 2b04 	ldr.w	r2, [r3], #4
 800767a:	459c      	cmp	ip, r3
 800767c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007680:	d8f3      	bhi.n	800766a <__lshift+0x6e>
 8007682:	ebac 0304 	sub.w	r3, ip, r4
 8007686:	3b15      	subs	r3, #21
 8007688:	f023 0303 	bic.w	r3, r3, #3
 800768c:	3304      	adds	r3, #4
 800768e:	f104 0015 	add.w	r0, r4, #21
 8007692:	4584      	cmp	ip, r0
 8007694:	bf38      	it	cc
 8007696:	2304      	movcc	r3, #4
 8007698:	50ca      	str	r2, [r1, r3]
 800769a:	b10a      	cbz	r2, 80076a0 <__lshift+0xa4>
 800769c:	f108 0602 	add.w	r6, r8, #2
 80076a0:	3e01      	subs	r6, #1
 80076a2:	4638      	mov	r0, r7
 80076a4:	612e      	str	r6, [r5, #16]
 80076a6:	4621      	mov	r1, r4
 80076a8:	f7ff fdd8 	bl	800725c <_Bfree>
 80076ac:	4628      	mov	r0, r5
 80076ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80076b6:	3301      	adds	r3, #1
 80076b8:	e7c5      	b.n	8007646 <__lshift+0x4a>
 80076ba:	3904      	subs	r1, #4
 80076bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80076c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80076c4:	459c      	cmp	ip, r3
 80076c6:	d8f9      	bhi.n	80076bc <__lshift+0xc0>
 80076c8:	e7ea      	b.n	80076a0 <__lshift+0xa4>
 80076ca:	bf00      	nop
 80076cc:	08008950 	.word	0x08008950
 80076d0:	08008961 	.word	0x08008961

080076d4 <__mcmp>:
 80076d4:	b530      	push	{r4, r5, lr}
 80076d6:	6902      	ldr	r2, [r0, #16]
 80076d8:	690c      	ldr	r4, [r1, #16]
 80076da:	1b12      	subs	r2, r2, r4
 80076dc:	d10e      	bne.n	80076fc <__mcmp+0x28>
 80076de:	f100 0314 	add.w	r3, r0, #20
 80076e2:	3114      	adds	r1, #20
 80076e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80076e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076f4:	42a5      	cmp	r5, r4
 80076f6:	d003      	beq.n	8007700 <__mcmp+0x2c>
 80076f8:	d305      	bcc.n	8007706 <__mcmp+0x32>
 80076fa:	2201      	movs	r2, #1
 80076fc:	4610      	mov	r0, r2
 80076fe:	bd30      	pop	{r4, r5, pc}
 8007700:	4283      	cmp	r3, r0
 8007702:	d3f3      	bcc.n	80076ec <__mcmp+0x18>
 8007704:	e7fa      	b.n	80076fc <__mcmp+0x28>
 8007706:	f04f 32ff 	mov.w	r2, #4294967295
 800770a:	e7f7      	b.n	80076fc <__mcmp+0x28>

0800770c <__mdiff>:
 800770c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007710:	460c      	mov	r4, r1
 8007712:	4606      	mov	r6, r0
 8007714:	4611      	mov	r1, r2
 8007716:	4620      	mov	r0, r4
 8007718:	4690      	mov	r8, r2
 800771a:	f7ff ffdb 	bl	80076d4 <__mcmp>
 800771e:	1e05      	subs	r5, r0, #0
 8007720:	d110      	bne.n	8007744 <__mdiff+0x38>
 8007722:	4629      	mov	r1, r5
 8007724:	4630      	mov	r0, r6
 8007726:	f7ff fd59 	bl	80071dc <_Balloc>
 800772a:	b930      	cbnz	r0, 800773a <__mdiff+0x2e>
 800772c:	4b3a      	ldr	r3, [pc, #232]	; (8007818 <__mdiff+0x10c>)
 800772e:	4602      	mov	r2, r0
 8007730:	f240 2137 	movw	r1, #567	; 0x237
 8007734:	4839      	ldr	r0, [pc, #228]	; (800781c <__mdiff+0x110>)
 8007736:	f000 fce5 	bl	8008104 <__assert_func>
 800773a:	2301      	movs	r3, #1
 800773c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007744:	bfa4      	itt	ge
 8007746:	4643      	movge	r3, r8
 8007748:	46a0      	movge	r8, r4
 800774a:	4630      	mov	r0, r6
 800774c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007750:	bfa6      	itte	ge
 8007752:	461c      	movge	r4, r3
 8007754:	2500      	movge	r5, #0
 8007756:	2501      	movlt	r5, #1
 8007758:	f7ff fd40 	bl	80071dc <_Balloc>
 800775c:	b920      	cbnz	r0, 8007768 <__mdiff+0x5c>
 800775e:	4b2e      	ldr	r3, [pc, #184]	; (8007818 <__mdiff+0x10c>)
 8007760:	4602      	mov	r2, r0
 8007762:	f240 2145 	movw	r1, #581	; 0x245
 8007766:	e7e5      	b.n	8007734 <__mdiff+0x28>
 8007768:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800776c:	6926      	ldr	r6, [r4, #16]
 800776e:	60c5      	str	r5, [r0, #12]
 8007770:	f104 0914 	add.w	r9, r4, #20
 8007774:	f108 0514 	add.w	r5, r8, #20
 8007778:	f100 0e14 	add.w	lr, r0, #20
 800777c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007780:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007784:	f108 0210 	add.w	r2, r8, #16
 8007788:	46f2      	mov	sl, lr
 800778a:	2100      	movs	r1, #0
 800778c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007790:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007794:	fa11 f88b 	uxtah	r8, r1, fp
 8007798:	b299      	uxth	r1, r3
 800779a:	0c1b      	lsrs	r3, r3, #16
 800779c:	eba8 0801 	sub.w	r8, r8, r1
 80077a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80077a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80077a8:	fa1f f888 	uxth.w	r8, r8
 80077ac:	1419      	asrs	r1, r3, #16
 80077ae:	454e      	cmp	r6, r9
 80077b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80077b4:	f84a 3b04 	str.w	r3, [sl], #4
 80077b8:	d8e8      	bhi.n	800778c <__mdiff+0x80>
 80077ba:	1b33      	subs	r3, r6, r4
 80077bc:	3b15      	subs	r3, #21
 80077be:	f023 0303 	bic.w	r3, r3, #3
 80077c2:	3304      	adds	r3, #4
 80077c4:	3415      	adds	r4, #21
 80077c6:	42a6      	cmp	r6, r4
 80077c8:	bf38      	it	cc
 80077ca:	2304      	movcc	r3, #4
 80077cc:	441d      	add	r5, r3
 80077ce:	4473      	add	r3, lr
 80077d0:	469e      	mov	lr, r3
 80077d2:	462e      	mov	r6, r5
 80077d4:	4566      	cmp	r6, ip
 80077d6:	d30e      	bcc.n	80077f6 <__mdiff+0xea>
 80077d8:	f10c 0203 	add.w	r2, ip, #3
 80077dc:	1b52      	subs	r2, r2, r5
 80077de:	f022 0203 	bic.w	r2, r2, #3
 80077e2:	3d03      	subs	r5, #3
 80077e4:	45ac      	cmp	ip, r5
 80077e6:	bf38      	it	cc
 80077e8:	2200      	movcc	r2, #0
 80077ea:	4413      	add	r3, r2
 80077ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80077f0:	b17a      	cbz	r2, 8007812 <__mdiff+0x106>
 80077f2:	6107      	str	r7, [r0, #16]
 80077f4:	e7a4      	b.n	8007740 <__mdiff+0x34>
 80077f6:	f856 8b04 	ldr.w	r8, [r6], #4
 80077fa:	fa11 f288 	uxtah	r2, r1, r8
 80077fe:	1414      	asrs	r4, r2, #16
 8007800:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007804:	b292      	uxth	r2, r2
 8007806:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800780a:	f84e 2b04 	str.w	r2, [lr], #4
 800780e:	1421      	asrs	r1, r4, #16
 8007810:	e7e0      	b.n	80077d4 <__mdiff+0xc8>
 8007812:	3f01      	subs	r7, #1
 8007814:	e7ea      	b.n	80077ec <__mdiff+0xe0>
 8007816:	bf00      	nop
 8007818:	08008950 	.word	0x08008950
 800781c:	08008961 	.word	0x08008961

08007820 <__d2b>:
 8007820:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007824:	460f      	mov	r7, r1
 8007826:	2101      	movs	r1, #1
 8007828:	ec59 8b10 	vmov	r8, r9, d0
 800782c:	4616      	mov	r6, r2
 800782e:	f7ff fcd5 	bl	80071dc <_Balloc>
 8007832:	4604      	mov	r4, r0
 8007834:	b930      	cbnz	r0, 8007844 <__d2b+0x24>
 8007836:	4602      	mov	r2, r0
 8007838:	4b24      	ldr	r3, [pc, #144]	; (80078cc <__d2b+0xac>)
 800783a:	4825      	ldr	r0, [pc, #148]	; (80078d0 <__d2b+0xb0>)
 800783c:	f240 310f 	movw	r1, #783	; 0x30f
 8007840:	f000 fc60 	bl	8008104 <__assert_func>
 8007844:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007848:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800784c:	bb2d      	cbnz	r5, 800789a <__d2b+0x7a>
 800784e:	9301      	str	r3, [sp, #4]
 8007850:	f1b8 0300 	subs.w	r3, r8, #0
 8007854:	d026      	beq.n	80078a4 <__d2b+0x84>
 8007856:	4668      	mov	r0, sp
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	f7ff fd87 	bl	800736c <__lo0bits>
 800785e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007862:	b1e8      	cbz	r0, 80078a0 <__d2b+0x80>
 8007864:	f1c0 0320 	rsb	r3, r0, #32
 8007868:	fa02 f303 	lsl.w	r3, r2, r3
 800786c:	430b      	orrs	r3, r1
 800786e:	40c2      	lsrs	r2, r0
 8007870:	6163      	str	r3, [r4, #20]
 8007872:	9201      	str	r2, [sp, #4]
 8007874:	9b01      	ldr	r3, [sp, #4]
 8007876:	61a3      	str	r3, [r4, #24]
 8007878:	2b00      	cmp	r3, #0
 800787a:	bf14      	ite	ne
 800787c:	2202      	movne	r2, #2
 800787e:	2201      	moveq	r2, #1
 8007880:	6122      	str	r2, [r4, #16]
 8007882:	b1bd      	cbz	r5, 80078b4 <__d2b+0x94>
 8007884:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007888:	4405      	add	r5, r0
 800788a:	603d      	str	r5, [r7, #0]
 800788c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007890:	6030      	str	r0, [r6, #0]
 8007892:	4620      	mov	r0, r4
 8007894:	b003      	add	sp, #12
 8007896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800789a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800789e:	e7d6      	b.n	800784e <__d2b+0x2e>
 80078a0:	6161      	str	r1, [r4, #20]
 80078a2:	e7e7      	b.n	8007874 <__d2b+0x54>
 80078a4:	a801      	add	r0, sp, #4
 80078a6:	f7ff fd61 	bl	800736c <__lo0bits>
 80078aa:	9b01      	ldr	r3, [sp, #4]
 80078ac:	6163      	str	r3, [r4, #20]
 80078ae:	3020      	adds	r0, #32
 80078b0:	2201      	movs	r2, #1
 80078b2:	e7e5      	b.n	8007880 <__d2b+0x60>
 80078b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078bc:	6038      	str	r0, [r7, #0]
 80078be:	6918      	ldr	r0, [r3, #16]
 80078c0:	f7ff fd34 	bl	800732c <__hi0bits>
 80078c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078c8:	e7e2      	b.n	8007890 <__d2b+0x70>
 80078ca:	bf00      	nop
 80078cc:	08008950 	.word	0x08008950
 80078d0:	08008961 	.word	0x08008961

080078d4 <__ssputs_r>:
 80078d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d8:	688e      	ldr	r6, [r1, #8]
 80078da:	461f      	mov	r7, r3
 80078dc:	42be      	cmp	r6, r7
 80078de:	680b      	ldr	r3, [r1, #0]
 80078e0:	4682      	mov	sl, r0
 80078e2:	460c      	mov	r4, r1
 80078e4:	4690      	mov	r8, r2
 80078e6:	d82c      	bhi.n	8007942 <__ssputs_r+0x6e>
 80078e8:	898a      	ldrh	r2, [r1, #12]
 80078ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078ee:	d026      	beq.n	800793e <__ssputs_r+0x6a>
 80078f0:	6965      	ldr	r5, [r4, #20]
 80078f2:	6909      	ldr	r1, [r1, #16]
 80078f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078f8:	eba3 0901 	sub.w	r9, r3, r1
 80078fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007900:	1c7b      	adds	r3, r7, #1
 8007902:	444b      	add	r3, r9
 8007904:	106d      	asrs	r5, r5, #1
 8007906:	429d      	cmp	r5, r3
 8007908:	bf38      	it	cc
 800790a:	461d      	movcc	r5, r3
 800790c:	0553      	lsls	r3, r2, #21
 800790e:	d527      	bpl.n	8007960 <__ssputs_r+0x8c>
 8007910:	4629      	mov	r1, r5
 8007912:	f7ff fbd7 	bl	80070c4 <_malloc_r>
 8007916:	4606      	mov	r6, r0
 8007918:	b360      	cbz	r0, 8007974 <__ssputs_r+0xa0>
 800791a:	6921      	ldr	r1, [r4, #16]
 800791c:	464a      	mov	r2, r9
 800791e:	f000 fbe3 	bl	80080e8 <memcpy>
 8007922:	89a3      	ldrh	r3, [r4, #12]
 8007924:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800792c:	81a3      	strh	r3, [r4, #12]
 800792e:	6126      	str	r6, [r4, #16]
 8007930:	6165      	str	r5, [r4, #20]
 8007932:	444e      	add	r6, r9
 8007934:	eba5 0509 	sub.w	r5, r5, r9
 8007938:	6026      	str	r6, [r4, #0]
 800793a:	60a5      	str	r5, [r4, #8]
 800793c:	463e      	mov	r6, r7
 800793e:	42be      	cmp	r6, r7
 8007940:	d900      	bls.n	8007944 <__ssputs_r+0x70>
 8007942:	463e      	mov	r6, r7
 8007944:	6820      	ldr	r0, [r4, #0]
 8007946:	4632      	mov	r2, r6
 8007948:	4641      	mov	r1, r8
 800794a:	f000 fba3 	bl	8008094 <memmove>
 800794e:	68a3      	ldr	r3, [r4, #8]
 8007950:	1b9b      	subs	r3, r3, r6
 8007952:	60a3      	str	r3, [r4, #8]
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	4433      	add	r3, r6
 8007958:	6023      	str	r3, [r4, #0]
 800795a:	2000      	movs	r0, #0
 800795c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007960:	462a      	mov	r2, r5
 8007962:	f000 fc15 	bl	8008190 <_realloc_r>
 8007966:	4606      	mov	r6, r0
 8007968:	2800      	cmp	r0, #0
 800796a:	d1e0      	bne.n	800792e <__ssputs_r+0x5a>
 800796c:	6921      	ldr	r1, [r4, #16]
 800796e:	4650      	mov	r0, sl
 8007970:	f7ff fb34 	bl	8006fdc <_free_r>
 8007974:	230c      	movs	r3, #12
 8007976:	f8ca 3000 	str.w	r3, [sl]
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007980:	81a3      	strh	r3, [r4, #12]
 8007982:	f04f 30ff 	mov.w	r0, #4294967295
 8007986:	e7e9      	b.n	800795c <__ssputs_r+0x88>

08007988 <_svfiprintf_r>:
 8007988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	4698      	mov	r8, r3
 800798e:	898b      	ldrh	r3, [r1, #12]
 8007990:	061b      	lsls	r3, r3, #24
 8007992:	b09d      	sub	sp, #116	; 0x74
 8007994:	4607      	mov	r7, r0
 8007996:	460d      	mov	r5, r1
 8007998:	4614      	mov	r4, r2
 800799a:	d50e      	bpl.n	80079ba <_svfiprintf_r+0x32>
 800799c:	690b      	ldr	r3, [r1, #16]
 800799e:	b963      	cbnz	r3, 80079ba <_svfiprintf_r+0x32>
 80079a0:	2140      	movs	r1, #64	; 0x40
 80079a2:	f7ff fb8f 	bl	80070c4 <_malloc_r>
 80079a6:	6028      	str	r0, [r5, #0]
 80079a8:	6128      	str	r0, [r5, #16]
 80079aa:	b920      	cbnz	r0, 80079b6 <_svfiprintf_r+0x2e>
 80079ac:	230c      	movs	r3, #12
 80079ae:	603b      	str	r3, [r7, #0]
 80079b0:	f04f 30ff 	mov.w	r0, #4294967295
 80079b4:	e0d0      	b.n	8007b58 <_svfiprintf_r+0x1d0>
 80079b6:	2340      	movs	r3, #64	; 0x40
 80079b8:	616b      	str	r3, [r5, #20]
 80079ba:	2300      	movs	r3, #0
 80079bc:	9309      	str	r3, [sp, #36]	; 0x24
 80079be:	2320      	movs	r3, #32
 80079c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80079c8:	2330      	movs	r3, #48	; 0x30
 80079ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007b70 <_svfiprintf_r+0x1e8>
 80079ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079d2:	f04f 0901 	mov.w	r9, #1
 80079d6:	4623      	mov	r3, r4
 80079d8:	469a      	mov	sl, r3
 80079da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079de:	b10a      	cbz	r2, 80079e4 <_svfiprintf_r+0x5c>
 80079e0:	2a25      	cmp	r2, #37	; 0x25
 80079e2:	d1f9      	bne.n	80079d8 <_svfiprintf_r+0x50>
 80079e4:	ebba 0b04 	subs.w	fp, sl, r4
 80079e8:	d00b      	beq.n	8007a02 <_svfiprintf_r+0x7a>
 80079ea:	465b      	mov	r3, fp
 80079ec:	4622      	mov	r2, r4
 80079ee:	4629      	mov	r1, r5
 80079f0:	4638      	mov	r0, r7
 80079f2:	f7ff ff6f 	bl	80078d4 <__ssputs_r>
 80079f6:	3001      	adds	r0, #1
 80079f8:	f000 80a9 	beq.w	8007b4e <_svfiprintf_r+0x1c6>
 80079fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079fe:	445a      	add	r2, fp
 8007a00:	9209      	str	r2, [sp, #36]	; 0x24
 8007a02:	f89a 3000 	ldrb.w	r3, [sl]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 80a1 	beq.w	8007b4e <_svfiprintf_r+0x1c6>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a16:	f10a 0a01 	add.w	sl, sl, #1
 8007a1a:	9304      	str	r3, [sp, #16]
 8007a1c:	9307      	str	r3, [sp, #28]
 8007a1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a22:	931a      	str	r3, [sp, #104]	; 0x68
 8007a24:	4654      	mov	r4, sl
 8007a26:	2205      	movs	r2, #5
 8007a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a2c:	4850      	ldr	r0, [pc, #320]	; (8007b70 <_svfiprintf_r+0x1e8>)
 8007a2e:	f7f8 fbd7 	bl	80001e0 <memchr>
 8007a32:	9a04      	ldr	r2, [sp, #16]
 8007a34:	b9d8      	cbnz	r0, 8007a6e <_svfiprintf_r+0xe6>
 8007a36:	06d0      	lsls	r0, r2, #27
 8007a38:	bf44      	itt	mi
 8007a3a:	2320      	movmi	r3, #32
 8007a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a40:	0711      	lsls	r1, r2, #28
 8007a42:	bf44      	itt	mi
 8007a44:	232b      	movmi	r3, #43	; 0x2b
 8007a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8007a50:	d015      	beq.n	8007a7e <_svfiprintf_r+0xf6>
 8007a52:	9a07      	ldr	r2, [sp, #28]
 8007a54:	4654      	mov	r4, sl
 8007a56:	2000      	movs	r0, #0
 8007a58:	f04f 0c0a 	mov.w	ip, #10
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a62:	3b30      	subs	r3, #48	; 0x30
 8007a64:	2b09      	cmp	r3, #9
 8007a66:	d94d      	bls.n	8007b04 <_svfiprintf_r+0x17c>
 8007a68:	b1b0      	cbz	r0, 8007a98 <_svfiprintf_r+0x110>
 8007a6a:	9207      	str	r2, [sp, #28]
 8007a6c:	e014      	b.n	8007a98 <_svfiprintf_r+0x110>
 8007a6e:	eba0 0308 	sub.w	r3, r0, r8
 8007a72:	fa09 f303 	lsl.w	r3, r9, r3
 8007a76:	4313      	orrs	r3, r2
 8007a78:	9304      	str	r3, [sp, #16]
 8007a7a:	46a2      	mov	sl, r4
 8007a7c:	e7d2      	b.n	8007a24 <_svfiprintf_r+0x9c>
 8007a7e:	9b03      	ldr	r3, [sp, #12]
 8007a80:	1d19      	adds	r1, r3, #4
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	9103      	str	r1, [sp, #12]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	bfbb      	ittet	lt
 8007a8a:	425b      	neglt	r3, r3
 8007a8c:	f042 0202 	orrlt.w	r2, r2, #2
 8007a90:	9307      	strge	r3, [sp, #28]
 8007a92:	9307      	strlt	r3, [sp, #28]
 8007a94:	bfb8      	it	lt
 8007a96:	9204      	strlt	r2, [sp, #16]
 8007a98:	7823      	ldrb	r3, [r4, #0]
 8007a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a9c:	d10c      	bne.n	8007ab8 <_svfiprintf_r+0x130>
 8007a9e:	7863      	ldrb	r3, [r4, #1]
 8007aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8007aa2:	d134      	bne.n	8007b0e <_svfiprintf_r+0x186>
 8007aa4:	9b03      	ldr	r3, [sp, #12]
 8007aa6:	1d1a      	adds	r2, r3, #4
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	9203      	str	r2, [sp, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	bfb8      	it	lt
 8007ab0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ab4:	3402      	adds	r4, #2
 8007ab6:	9305      	str	r3, [sp, #20]
 8007ab8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007b80 <_svfiprintf_r+0x1f8>
 8007abc:	7821      	ldrb	r1, [r4, #0]
 8007abe:	2203      	movs	r2, #3
 8007ac0:	4650      	mov	r0, sl
 8007ac2:	f7f8 fb8d 	bl	80001e0 <memchr>
 8007ac6:	b138      	cbz	r0, 8007ad8 <_svfiprintf_r+0x150>
 8007ac8:	9b04      	ldr	r3, [sp, #16]
 8007aca:	eba0 000a 	sub.w	r0, r0, sl
 8007ace:	2240      	movs	r2, #64	; 0x40
 8007ad0:	4082      	lsls	r2, r0
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	3401      	adds	r4, #1
 8007ad6:	9304      	str	r3, [sp, #16]
 8007ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007adc:	4825      	ldr	r0, [pc, #148]	; (8007b74 <_svfiprintf_r+0x1ec>)
 8007ade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ae2:	2206      	movs	r2, #6
 8007ae4:	f7f8 fb7c 	bl	80001e0 <memchr>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d038      	beq.n	8007b5e <_svfiprintf_r+0x1d6>
 8007aec:	4b22      	ldr	r3, [pc, #136]	; (8007b78 <_svfiprintf_r+0x1f0>)
 8007aee:	bb1b      	cbnz	r3, 8007b38 <_svfiprintf_r+0x1b0>
 8007af0:	9b03      	ldr	r3, [sp, #12]
 8007af2:	3307      	adds	r3, #7
 8007af4:	f023 0307 	bic.w	r3, r3, #7
 8007af8:	3308      	adds	r3, #8
 8007afa:	9303      	str	r3, [sp, #12]
 8007afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007afe:	4433      	add	r3, r6
 8007b00:	9309      	str	r3, [sp, #36]	; 0x24
 8007b02:	e768      	b.n	80079d6 <_svfiprintf_r+0x4e>
 8007b04:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b08:	460c      	mov	r4, r1
 8007b0a:	2001      	movs	r0, #1
 8007b0c:	e7a6      	b.n	8007a5c <_svfiprintf_r+0xd4>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	3401      	adds	r4, #1
 8007b12:	9305      	str	r3, [sp, #20]
 8007b14:	4619      	mov	r1, r3
 8007b16:	f04f 0c0a 	mov.w	ip, #10
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b20:	3a30      	subs	r2, #48	; 0x30
 8007b22:	2a09      	cmp	r2, #9
 8007b24:	d903      	bls.n	8007b2e <_svfiprintf_r+0x1a6>
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d0c6      	beq.n	8007ab8 <_svfiprintf_r+0x130>
 8007b2a:	9105      	str	r1, [sp, #20]
 8007b2c:	e7c4      	b.n	8007ab8 <_svfiprintf_r+0x130>
 8007b2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b32:	4604      	mov	r4, r0
 8007b34:	2301      	movs	r3, #1
 8007b36:	e7f0      	b.n	8007b1a <_svfiprintf_r+0x192>
 8007b38:	ab03      	add	r3, sp, #12
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	462a      	mov	r2, r5
 8007b3e:	4b0f      	ldr	r3, [pc, #60]	; (8007b7c <_svfiprintf_r+0x1f4>)
 8007b40:	a904      	add	r1, sp, #16
 8007b42:	4638      	mov	r0, r7
 8007b44:	f7fd fe52 	bl	80057ec <_printf_float>
 8007b48:	1c42      	adds	r2, r0, #1
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	d1d6      	bne.n	8007afc <_svfiprintf_r+0x174>
 8007b4e:	89ab      	ldrh	r3, [r5, #12]
 8007b50:	065b      	lsls	r3, r3, #25
 8007b52:	f53f af2d 	bmi.w	80079b0 <_svfiprintf_r+0x28>
 8007b56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b58:	b01d      	add	sp, #116	; 0x74
 8007b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5e:	ab03      	add	r3, sp, #12
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	462a      	mov	r2, r5
 8007b64:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <_svfiprintf_r+0x1f4>)
 8007b66:	a904      	add	r1, sp, #16
 8007b68:	4638      	mov	r0, r7
 8007b6a:	f7fe f8e3 	bl	8005d34 <_printf_i>
 8007b6e:	e7eb      	b.n	8007b48 <_svfiprintf_r+0x1c0>
 8007b70:	08008abc 	.word	0x08008abc
 8007b74:	08008ac6 	.word	0x08008ac6
 8007b78:	080057ed 	.word	0x080057ed
 8007b7c:	080078d5 	.word	0x080078d5
 8007b80:	08008ac2 	.word	0x08008ac2

08007b84 <__sfputc_r>:
 8007b84:	6893      	ldr	r3, [r2, #8]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	b410      	push	{r4}
 8007b8c:	6093      	str	r3, [r2, #8]
 8007b8e:	da08      	bge.n	8007ba2 <__sfputc_r+0x1e>
 8007b90:	6994      	ldr	r4, [r2, #24]
 8007b92:	42a3      	cmp	r3, r4
 8007b94:	db01      	blt.n	8007b9a <__sfputc_r+0x16>
 8007b96:	290a      	cmp	r1, #10
 8007b98:	d103      	bne.n	8007ba2 <__sfputc_r+0x1e>
 8007b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b9e:	f000 b9e3 	b.w	8007f68 <__swbuf_r>
 8007ba2:	6813      	ldr	r3, [r2, #0]
 8007ba4:	1c58      	adds	r0, r3, #1
 8007ba6:	6010      	str	r0, [r2, #0]
 8007ba8:	7019      	strb	r1, [r3, #0]
 8007baa:	4608      	mov	r0, r1
 8007bac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <__sfputs_r>:
 8007bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb4:	4606      	mov	r6, r0
 8007bb6:	460f      	mov	r7, r1
 8007bb8:	4614      	mov	r4, r2
 8007bba:	18d5      	adds	r5, r2, r3
 8007bbc:	42ac      	cmp	r4, r5
 8007bbe:	d101      	bne.n	8007bc4 <__sfputs_r+0x12>
 8007bc0:	2000      	movs	r0, #0
 8007bc2:	e007      	b.n	8007bd4 <__sfputs_r+0x22>
 8007bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bc8:	463a      	mov	r2, r7
 8007bca:	4630      	mov	r0, r6
 8007bcc:	f7ff ffda 	bl	8007b84 <__sfputc_r>
 8007bd0:	1c43      	adds	r3, r0, #1
 8007bd2:	d1f3      	bne.n	8007bbc <__sfputs_r+0xa>
 8007bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bd8 <_vfiprintf_r>:
 8007bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bdc:	460d      	mov	r5, r1
 8007bde:	b09d      	sub	sp, #116	; 0x74
 8007be0:	4614      	mov	r4, r2
 8007be2:	4698      	mov	r8, r3
 8007be4:	4606      	mov	r6, r0
 8007be6:	b118      	cbz	r0, 8007bf0 <_vfiprintf_r+0x18>
 8007be8:	6a03      	ldr	r3, [r0, #32]
 8007bea:	b90b      	cbnz	r3, 8007bf0 <_vfiprintf_r+0x18>
 8007bec:	f7fe fa50 	bl	8006090 <__sinit>
 8007bf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bf2:	07d9      	lsls	r1, r3, #31
 8007bf4:	d405      	bmi.n	8007c02 <_vfiprintf_r+0x2a>
 8007bf6:	89ab      	ldrh	r3, [r5, #12]
 8007bf8:	059a      	lsls	r2, r3, #22
 8007bfa:	d402      	bmi.n	8007c02 <_vfiprintf_r+0x2a>
 8007bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bfe:	f7fe fb70 	bl	80062e2 <__retarget_lock_acquire_recursive>
 8007c02:	89ab      	ldrh	r3, [r5, #12]
 8007c04:	071b      	lsls	r3, r3, #28
 8007c06:	d501      	bpl.n	8007c0c <_vfiprintf_r+0x34>
 8007c08:	692b      	ldr	r3, [r5, #16]
 8007c0a:	b99b      	cbnz	r3, 8007c34 <_vfiprintf_r+0x5c>
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f000 f9e8 	bl	8007fe4 <__swsetup_r>
 8007c14:	b170      	cbz	r0, 8007c34 <_vfiprintf_r+0x5c>
 8007c16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c18:	07dc      	lsls	r4, r3, #31
 8007c1a:	d504      	bpl.n	8007c26 <_vfiprintf_r+0x4e>
 8007c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c20:	b01d      	add	sp, #116	; 0x74
 8007c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c26:	89ab      	ldrh	r3, [r5, #12]
 8007c28:	0598      	lsls	r0, r3, #22
 8007c2a:	d4f7      	bmi.n	8007c1c <_vfiprintf_r+0x44>
 8007c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c2e:	f7fe fb59 	bl	80062e4 <__retarget_lock_release_recursive>
 8007c32:	e7f3      	b.n	8007c1c <_vfiprintf_r+0x44>
 8007c34:	2300      	movs	r3, #0
 8007c36:	9309      	str	r3, [sp, #36]	; 0x24
 8007c38:	2320      	movs	r3, #32
 8007c3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c42:	2330      	movs	r3, #48	; 0x30
 8007c44:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007df8 <_vfiprintf_r+0x220>
 8007c48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c4c:	f04f 0901 	mov.w	r9, #1
 8007c50:	4623      	mov	r3, r4
 8007c52:	469a      	mov	sl, r3
 8007c54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c58:	b10a      	cbz	r2, 8007c5e <_vfiprintf_r+0x86>
 8007c5a:	2a25      	cmp	r2, #37	; 0x25
 8007c5c:	d1f9      	bne.n	8007c52 <_vfiprintf_r+0x7a>
 8007c5e:	ebba 0b04 	subs.w	fp, sl, r4
 8007c62:	d00b      	beq.n	8007c7c <_vfiprintf_r+0xa4>
 8007c64:	465b      	mov	r3, fp
 8007c66:	4622      	mov	r2, r4
 8007c68:	4629      	mov	r1, r5
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	f7ff ffa1 	bl	8007bb2 <__sfputs_r>
 8007c70:	3001      	adds	r0, #1
 8007c72:	f000 80a9 	beq.w	8007dc8 <_vfiprintf_r+0x1f0>
 8007c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c78:	445a      	add	r2, fp
 8007c7a:	9209      	str	r2, [sp, #36]	; 0x24
 8007c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 80a1 	beq.w	8007dc8 <_vfiprintf_r+0x1f0>
 8007c86:	2300      	movs	r3, #0
 8007c88:	f04f 32ff 	mov.w	r2, #4294967295
 8007c8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c90:	f10a 0a01 	add.w	sl, sl, #1
 8007c94:	9304      	str	r3, [sp, #16]
 8007c96:	9307      	str	r3, [sp, #28]
 8007c98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c9c:	931a      	str	r3, [sp, #104]	; 0x68
 8007c9e:	4654      	mov	r4, sl
 8007ca0:	2205      	movs	r2, #5
 8007ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca6:	4854      	ldr	r0, [pc, #336]	; (8007df8 <_vfiprintf_r+0x220>)
 8007ca8:	f7f8 fa9a 	bl	80001e0 <memchr>
 8007cac:	9a04      	ldr	r2, [sp, #16]
 8007cae:	b9d8      	cbnz	r0, 8007ce8 <_vfiprintf_r+0x110>
 8007cb0:	06d1      	lsls	r1, r2, #27
 8007cb2:	bf44      	itt	mi
 8007cb4:	2320      	movmi	r3, #32
 8007cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cba:	0713      	lsls	r3, r2, #28
 8007cbc:	bf44      	itt	mi
 8007cbe:	232b      	movmi	r3, #43	; 0x2b
 8007cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8007cca:	d015      	beq.n	8007cf8 <_vfiprintf_r+0x120>
 8007ccc:	9a07      	ldr	r2, [sp, #28]
 8007cce:	4654      	mov	r4, sl
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	f04f 0c0a 	mov.w	ip, #10
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cdc:	3b30      	subs	r3, #48	; 0x30
 8007cde:	2b09      	cmp	r3, #9
 8007ce0:	d94d      	bls.n	8007d7e <_vfiprintf_r+0x1a6>
 8007ce2:	b1b0      	cbz	r0, 8007d12 <_vfiprintf_r+0x13a>
 8007ce4:	9207      	str	r2, [sp, #28]
 8007ce6:	e014      	b.n	8007d12 <_vfiprintf_r+0x13a>
 8007ce8:	eba0 0308 	sub.w	r3, r0, r8
 8007cec:	fa09 f303 	lsl.w	r3, r9, r3
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	9304      	str	r3, [sp, #16]
 8007cf4:	46a2      	mov	sl, r4
 8007cf6:	e7d2      	b.n	8007c9e <_vfiprintf_r+0xc6>
 8007cf8:	9b03      	ldr	r3, [sp, #12]
 8007cfa:	1d19      	adds	r1, r3, #4
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	9103      	str	r1, [sp, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	bfbb      	ittet	lt
 8007d04:	425b      	neglt	r3, r3
 8007d06:	f042 0202 	orrlt.w	r2, r2, #2
 8007d0a:	9307      	strge	r3, [sp, #28]
 8007d0c:	9307      	strlt	r3, [sp, #28]
 8007d0e:	bfb8      	it	lt
 8007d10:	9204      	strlt	r2, [sp, #16]
 8007d12:	7823      	ldrb	r3, [r4, #0]
 8007d14:	2b2e      	cmp	r3, #46	; 0x2e
 8007d16:	d10c      	bne.n	8007d32 <_vfiprintf_r+0x15a>
 8007d18:	7863      	ldrb	r3, [r4, #1]
 8007d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d1c:	d134      	bne.n	8007d88 <_vfiprintf_r+0x1b0>
 8007d1e:	9b03      	ldr	r3, [sp, #12]
 8007d20:	1d1a      	adds	r2, r3, #4
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	9203      	str	r2, [sp, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	bfb8      	it	lt
 8007d2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d2e:	3402      	adds	r4, #2
 8007d30:	9305      	str	r3, [sp, #20]
 8007d32:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007e08 <_vfiprintf_r+0x230>
 8007d36:	7821      	ldrb	r1, [r4, #0]
 8007d38:	2203      	movs	r2, #3
 8007d3a:	4650      	mov	r0, sl
 8007d3c:	f7f8 fa50 	bl	80001e0 <memchr>
 8007d40:	b138      	cbz	r0, 8007d52 <_vfiprintf_r+0x17a>
 8007d42:	9b04      	ldr	r3, [sp, #16]
 8007d44:	eba0 000a 	sub.w	r0, r0, sl
 8007d48:	2240      	movs	r2, #64	; 0x40
 8007d4a:	4082      	lsls	r2, r0
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	3401      	adds	r4, #1
 8007d50:	9304      	str	r3, [sp, #16]
 8007d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d56:	4829      	ldr	r0, [pc, #164]	; (8007dfc <_vfiprintf_r+0x224>)
 8007d58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d5c:	2206      	movs	r2, #6
 8007d5e:	f7f8 fa3f 	bl	80001e0 <memchr>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	d03f      	beq.n	8007de6 <_vfiprintf_r+0x20e>
 8007d66:	4b26      	ldr	r3, [pc, #152]	; (8007e00 <_vfiprintf_r+0x228>)
 8007d68:	bb1b      	cbnz	r3, 8007db2 <_vfiprintf_r+0x1da>
 8007d6a:	9b03      	ldr	r3, [sp, #12]
 8007d6c:	3307      	adds	r3, #7
 8007d6e:	f023 0307 	bic.w	r3, r3, #7
 8007d72:	3308      	adds	r3, #8
 8007d74:	9303      	str	r3, [sp, #12]
 8007d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d78:	443b      	add	r3, r7
 8007d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d7c:	e768      	b.n	8007c50 <_vfiprintf_r+0x78>
 8007d7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d82:	460c      	mov	r4, r1
 8007d84:	2001      	movs	r0, #1
 8007d86:	e7a6      	b.n	8007cd6 <_vfiprintf_r+0xfe>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	3401      	adds	r4, #1
 8007d8c:	9305      	str	r3, [sp, #20]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	f04f 0c0a 	mov.w	ip, #10
 8007d94:	4620      	mov	r0, r4
 8007d96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d9a:	3a30      	subs	r2, #48	; 0x30
 8007d9c:	2a09      	cmp	r2, #9
 8007d9e:	d903      	bls.n	8007da8 <_vfiprintf_r+0x1d0>
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d0c6      	beq.n	8007d32 <_vfiprintf_r+0x15a>
 8007da4:	9105      	str	r1, [sp, #20]
 8007da6:	e7c4      	b.n	8007d32 <_vfiprintf_r+0x15a>
 8007da8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dac:	4604      	mov	r4, r0
 8007dae:	2301      	movs	r3, #1
 8007db0:	e7f0      	b.n	8007d94 <_vfiprintf_r+0x1bc>
 8007db2:	ab03      	add	r3, sp, #12
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	462a      	mov	r2, r5
 8007db8:	4b12      	ldr	r3, [pc, #72]	; (8007e04 <_vfiprintf_r+0x22c>)
 8007dba:	a904      	add	r1, sp, #16
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	f7fd fd15 	bl	80057ec <_printf_float>
 8007dc2:	4607      	mov	r7, r0
 8007dc4:	1c78      	adds	r0, r7, #1
 8007dc6:	d1d6      	bne.n	8007d76 <_vfiprintf_r+0x19e>
 8007dc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dca:	07d9      	lsls	r1, r3, #31
 8007dcc:	d405      	bmi.n	8007dda <_vfiprintf_r+0x202>
 8007dce:	89ab      	ldrh	r3, [r5, #12]
 8007dd0:	059a      	lsls	r2, r3, #22
 8007dd2:	d402      	bmi.n	8007dda <_vfiprintf_r+0x202>
 8007dd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dd6:	f7fe fa85 	bl	80062e4 <__retarget_lock_release_recursive>
 8007dda:	89ab      	ldrh	r3, [r5, #12]
 8007ddc:	065b      	lsls	r3, r3, #25
 8007dde:	f53f af1d 	bmi.w	8007c1c <_vfiprintf_r+0x44>
 8007de2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007de4:	e71c      	b.n	8007c20 <_vfiprintf_r+0x48>
 8007de6:	ab03      	add	r3, sp, #12
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	462a      	mov	r2, r5
 8007dec:	4b05      	ldr	r3, [pc, #20]	; (8007e04 <_vfiprintf_r+0x22c>)
 8007dee:	a904      	add	r1, sp, #16
 8007df0:	4630      	mov	r0, r6
 8007df2:	f7fd ff9f 	bl	8005d34 <_printf_i>
 8007df6:	e7e4      	b.n	8007dc2 <_vfiprintf_r+0x1ea>
 8007df8:	08008abc 	.word	0x08008abc
 8007dfc:	08008ac6 	.word	0x08008ac6
 8007e00:	080057ed 	.word	0x080057ed
 8007e04:	08007bb3 	.word	0x08007bb3
 8007e08:	08008ac2 	.word	0x08008ac2

08007e0c <__sflush_r>:
 8007e0c:	898a      	ldrh	r2, [r1, #12]
 8007e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e12:	4605      	mov	r5, r0
 8007e14:	0710      	lsls	r0, r2, #28
 8007e16:	460c      	mov	r4, r1
 8007e18:	d458      	bmi.n	8007ecc <__sflush_r+0xc0>
 8007e1a:	684b      	ldr	r3, [r1, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	dc05      	bgt.n	8007e2c <__sflush_r+0x20>
 8007e20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	dc02      	bgt.n	8007e2c <__sflush_r+0x20>
 8007e26:	2000      	movs	r0, #0
 8007e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e2e:	2e00      	cmp	r6, #0
 8007e30:	d0f9      	beq.n	8007e26 <__sflush_r+0x1a>
 8007e32:	2300      	movs	r3, #0
 8007e34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e38:	682f      	ldr	r7, [r5, #0]
 8007e3a:	6a21      	ldr	r1, [r4, #32]
 8007e3c:	602b      	str	r3, [r5, #0]
 8007e3e:	d032      	beq.n	8007ea6 <__sflush_r+0x9a>
 8007e40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e42:	89a3      	ldrh	r3, [r4, #12]
 8007e44:	075a      	lsls	r2, r3, #29
 8007e46:	d505      	bpl.n	8007e54 <__sflush_r+0x48>
 8007e48:	6863      	ldr	r3, [r4, #4]
 8007e4a:	1ac0      	subs	r0, r0, r3
 8007e4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e4e:	b10b      	cbz	r3, 8007e54 <__sflush_r+0x48>
 8007e50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e52:	1ac0      	subs	r0, r0, r3
 8007e54:	2300      	movs	r3, #0
 8007e56:	4602      	mov	r2, r0
 8007e58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e5a:	6a21      	ldr	r1, [r4, #32]
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	47b0      	blx	r6
 8007e60:	1c43      	adds	r3, r0, #1
 8007e62:	89a3      	ldrh	r3, [r4, #12]
 8007e64:	d106      	bne.n	8007e74 <__sflush_r+0x68>
 8007e66:	6829      	ldr	r1, [r5, #0]
 8007e68:	291d      	cmp	r1, #29
 8007e6a:	d82b      	bhi.n	8007ec4 <__sflush_r+0xb8>
 8007e6c:	4a29      	ldr	r2, [pc, #164]	; (8007f14 <__sflush_r+0x108>)
 8007e6e:	410a      	asrs	r2, r1
 8007e70:	07d6      	lsls	r6, r2, #31
 8007e72:	d427      	bmi.n	8007ec4 <__sflush_r+0xb8>
 8007e74:	2200      	movs	r2, #0
 8007e76:	6062      	str	r2, [r4, #4]
 8007e78:	04d9      	lsls	r1, r3, #19
 8007e7a:	6922      	ldr	r2, [r4, #16]
 8007e7c:	6022      	str	r2, [r4, #0]
 8007e7e:	d504      	bpl.n	8007e8a <__sflush_r+0x7e>
 8007e80:	1c42      	adds	r2, r0, #1
 8007e82:	d101      	bne.n	8007e88 <__sflush_r+0x7c>
 8007e84:	682b      	ldr	r3, [r5, #0]
 8007e86:	b903      	cbnz	r3, 8007e8a <__sflush_r+0x7e>
 8007e88:	6560      	str	r0, [r4, #84]	; 0x54
 8007e8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e8c:	602f      	str	r7, [r5, #0]
 8007e8e:	2900      	cmp	r1, #0
 8007e90:	d0c9      	beq.n	8007e26 <__sflush_r+0x1a>
 8007e92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e96:	4299      	cmp	r1, r3
 8007e98:	d002      	beq.n	8007ea0 <__sflush_r+0x94>
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	f7ff f89e 	bl	8006fdc <_free_r>
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	6360      	str	r0, [r4, #52]	; 0x34
 8007ea4:	e7c0      	b.n	8007e28 <__sflush_r+0x1c>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	47b0      	blx	r6
 8007eac:	1c41      	adds	r1, r0, #1
 8007eae:	d1c8      	bne.n	8007e42 <__sflush_r+0x36>
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0c5      	beq.n	8007e42 <__sflush_r+0x36>
 8007eb6:	2b1d      	cmp	r3, #29
 8007eb8:	d001      	beq.n	8007ebe <__sflush_r+0xb2>
 8007eba:	2b16      	cmp	r3, #22
 8007ebc:	d101      	bne.n	8007ec2 <__sflush_r+0xb6>
 8007ebe:	602f      	str	r7, [r5, #0]
 8007ec0:	e7b1      	b.n	8007e26 <__sflush_r+0x1a>
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ec8:	81a3      	strh	r3, [r4, #12]
 8007eca:	e7ad      	b.n	8007e28 <__sflush_r+0x1c>
 8007ecc:	690f      	ldr	r7, [r1, #16]
 8007ece:	2f00      	cmp	r7, #0
 8007ed0:	d0a9      	beq.n	8007e26 <__sflush_r+0x1a>
 8007ed2:	0793      	lsls	r3, r2, #30
 8007ed4:	680e      	ldr	r6, [r1, #0]
 8007ed6:	bf08      	it	eq
 8007ed8:	694b      	ldreq	r3, [r1, #20]
 8007eda:	600f      	str	r7, [r1, #0]
 8007edc:	bf18      	it	ne
 8007ede:	2300      	movne	r3, #0
 8007ee0:	eba6 0807 	sub.w	r8, r6, r7
 8007ee4:	608b      	str	r3, [r1, #8]
 8007ee6:	f1b8 0f00 	cmp.w	r8, #0
 8007eea:	dd9c      	ble.n	8007e26 <__sflush_r+0x1a>
 8007eec:	6a21      	ldr	r1, [r4, #32]
 8007eee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ef0:	4643      	mov	r3, r8
 8007ef2:	463a      	mov	r2, r7
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	47b0      	blx	r6
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	dc06      	bgt.n	8007f0a <__sflush_r+0xfe>
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f02:	81a3      	strh	r3, [r4, #12]
 8007f04:	f04f 30ff 	mov.w	r0, #4294967295
 8007f08:	e78e      	b.n	8007e28 <__sflush_r+0x1c>
 8007f0a:	4407      	add	r7, r0
 8007f0c:	eba8 0800 	sub.w	r8, r8, r0
 8007f10:	e7e9      	b.n	8007ee6 <__sflush_r+0xda>
 8007f12:	bf00      	nop
 8007f14:	dfbffffe 	.word	0xdfbffffe

08007f18 <_fflush_r>:
 8007f18:	b538      	push	{r3, r4, r5, lr}
 8007f1a:	690b      	ldr	r3, [r1, #16]
 8007f1c:	4605      	mov	r5, r0
 8007f1e:	460c      	mov	r4, r1
 8007f20:	b913      	cbnz	r3, 8007f28 <_fflush_r+0x10>
 8007f22:	2500      	movs	r5, #0
 8007f24:	4628      	mov	r0, r5
 8007f26:	bd38      	pop	{r3, r4, r5, pc}
 8007f28:	b118      	cbz	r0, 8007f32 <_fflush_r+0x1a>
 8007f2a:	6a03      	ldr	r3, [r0, #32]
 8007f2c:	b90b      	cbnz	r3, 8007f32 <_fflush_r+0x1a>
 8007f2e:	f7fe f8af 	bl	8006090 <__sinit>
 8007f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d0f3      	beq.n	8007f22 <_fflush_r+0xa>
 8007f3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f3c:	07d0      	lsls	r0, r2, #31
 8007f3e:	d404      	bmi.n	8007f4a <_fflush_r+0x32>
 8007f40:	0599      	lsls	r1, r3, #22
 8007f42:	d402      	bmi.n	8007f4a <_fflush_r+0x32>
 8007f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f46:	f7fe f9cc 	bl	80062e2 <__retarget_lock_acquire_recursive>
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	f7ff ff5d 	bl	8007e0c <__sflush_r>
 8007f52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f54:	07da      	lsls	r2, r3, #31
 8007f56:	4605      	mov	r5, r0
 8007f58:	d4e4      	bmi.n	8007f24 <_fflush_r+0xc>
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	059b      	lsls	r3, r3, #22
 8007f5e:	d4e1      	bmi.n	8007f24 <_fflush_r+0xc>
 8007f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f62:	f7fe f9bf 	bl	80062e4 <__retarget_lock_release_recursive>
 8007f66:	e7dd      	b.n	8007f24 <_fflush_r+0xc>

08007f68 <__swbuf_r>:
 8007f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6a:	460e      	mov	r6, r1
 8007f6c:	4614      	mov	r4, r2
 8007f6e:	4605      	mov	r5, r0
 8007f70:	b118      	cbz	r0, 8007f7a <__swbuf_r+0x12>
 8007f72:	6a03      	ldr	r3, [r0, #32]
 8007f74:	b90b      	cbnz	r3, 8007f7a <__swbuf_r+0x12>
 8007f76:	f7fe f88b 	bl	8006090 <__sinit>
 8007f7a:	69a3      	ldr	r3, [r4, #24]
 8007f7c:	60a3      	str	r3, [r4, #8]
 8007f7e:	89a3      	ldrh	r3, [r4, #12]
 8007f80:	071a      	lsls	r2, r3, #28
 8007f82:	d525      	bpl.n	8007fd0 <__swbuf_r+0x68>
 8007f84:	6923      	ldr	r3, [r4, #16]
 8007f86:	b31b      	cbz	r3, 8007fd0 <__swbuf_r+0x68>
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	6922      	ldr	r2, [r4, #16]
 8007f8c:	1a98      	subs	r0, r3, r2
 8007f8e:	6963      	ldr	r3, [r4, #20]
 8007f90:	b2f6      	uxtb	r6, r6
 8007f92:	4283      	cmp	r3, r0
 8007f94:	4637      	mov	r7, r6
 8007f96:	dc04      	bgt.n	8007fa2 <__swbuf_r+0x3a>
 8007f98:	4621      	mov	r1, r4
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f7ff ffbc 	bl	8007f18 <_fflush_r>
 8007fa0:	b9e0      	cbnz	r0, 8007fdc <__swbuf_r+0x74>
 8007fa2:	68a3      	ldr	r3, [r4, #8]
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	60a3      	str	r3, [r4, #8]
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	6022      	str	r2, [r4, #0]
 8007fae:	701e      	strb	r6, [r3, #0]
 8007fb0:	6962      	ldr	r2, [r4, #20]
 8007fb2:	1c43      	adds	r3, r0, #1
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d004      	beq.n	8007fc2 <__swbuf_r+0x5a>
 8007fb8:	89a3      	ldrh	r3, [r4, #12]
 8007fba:	07db      	lsls	r3, r3, #31
 8007fbc:	d506      	bpl.n	8007fcc <__swbuf_r+0x64>
 8007fbe:	2e0a      	cmp	r6, #10
 8007fc0:	d104      	bne.n	8007fcc <__swbuf_r+0x64>
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	f7ff ffa7 	bl	8007f18 <_fflush_r>
 8007fca:	b938      	cbnz	r0, 8007fdc <__swbuf_r+0x74>
 8007fcc:	4638      	mov	r0, r7
 8007fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f000 f806 	bl	8007fe4 <__swsetup_r>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d0d5      	beq.n	8007f88 <__swbuf_r+0x20>
 8007fdc:	f04f 37ff 	mov.w	r7, #4294967295
 8007fe0:	e7f4      	b.n	8007fcc <__swbuf_r+0x64>
	...

08007fe4 <__swsetup_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	4b2a      	ldr	r3, [pc, #168]	; (8008090 <__swsetup_r+0xac>)
 8007fe8:	4605      	mov	r5, r0
 8007fea:	6818      	ldr	r0, [r3, #0]
 8007fec:	460c      	mov	r4, r1
 8007fee:	b118      	cbz	r0, 8007ff8 <__swsetup_r+0x14>
 8007ff0:	6a03      	ldr	r3, [r0, #32]
 8007ff2:	b90b      	cbnz	r3, 8007ff8 <__swsetup_r+0x14>
 8007ff4:	f7fe f84c 	bl	8006090 <__sinit>
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ffe:	0718      	lsls	r0, r3, #28
 8008000:	d422      	bmi.n	8008048 <__swsetup_r+0x64>
 8008002:	06d9      	lsls	r1, r3, #27
 8008004:	d407      	bmi.n	8008016 <__swsetup_r+0x32>
 8008006:	2309      	movs	r3, #9
 8008008:	602b      	str	r3, [r5, #0]
 800800a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800800e:	81a3      	strh	r3, [r4, #12]
 8008010:	f04f 30ff 	mov.w	r0, #4294967295
 8008014:	e034      	b.n	8008080 <__swsetup_r+0x9c>
 8008016:	0758      	lsls	r0, r3, #29
 8008018:	d512      	bpl.n	8008040 <__swsetup_r+0x5c>
 800801a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800801c:	b141      	cbz	r1, 8008030 <__swsetup_r+0x4c>
 800801e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008022:	4299      	cmp	r1, r3
 8008024:	d002      	beq.n	800802c <__swsetup_r+0x48>
 8008026:	4628      	mov	r0, r5
 8008028:	f7fe ffd8 	bl	8006fdc <_free_r>
 800802c:	2300      	movs	r3, #0
 800802e:	6363      	str	r3, [r4, #52]	; 0x34
 8008030:	89a3      	ldrh	r3, [r4, #12]
 8008032:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008036:	81a3      	strh	r3, [r4, #12]
 8008038:	2300      	movs	r3, #0
 800803a:	6063      	str	r3, [r4, #4]
 800803c:	6923      	ldr	r3, [r4, #16]
 800803e:	6023      	str	r3, [r4, #0]
 8008040:	89a3      	ldrh	r3, [r4, #12]
 8008042:	f043 0308 	orr.w	r3, r3, #8
 8008046:	81a3      	strh	r3, [r4, #12]
 8008048:	6923      	ldr	r3, [r4, #16]
 800804a:	b94b      	cbnz	r3, 8008060 <__swsetup_r+0x7c>
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008056:	d003      	beq.n	8008060 <__swsetup_r+0x7c>
 8008058:	4621      	mov	r1, r4
 800805a:	4628      	mov	r0, r5
 800805c:	f000 f90c 	bl	8008278 <__smakebuf_r>
 8008060:	89a0      	ldrh	r0, [r4, #12]
 8008062:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008066:	f010 0301 	ands.w	r3, r0, #1
 800806a:	d00a      	beq.n	8008082 <__swsetup_r+0x9e>
 800806c:	2300      	movs	r3, #0
 800806e:	60a3      	str	r3, [r4, #8]
 8008070:	6963      	ldr	r3, [r4, #20]
 8008072:	425b      	negs	r3, r3
 8008074:	61a3      	str	r3, [r4, #24]
 8008076:	6923      	ldr	r3, [r4, #16]
 8008078:	b943      	cbnz	r3, 800808c <__swsetup_r+0xa8>
 800807a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800807e:	d1c4      	bne.n	800800a <__swsetup_r+0x26>
 8008080:	bd38      	pop	{r3, r4, r5, pc}
 8008082:	0781      	lsls	r1, r0, #30
 8008084:	bf58      	it	pl
 8008086:	6963      	ldrpl	r3, [r4, #20]
 8008088:	60a3      	str	r3, [r4, #8]
 800808a:	e7f4      	b.n	8008076 <__swsetup_r+0x92>
 800808c:	2000      	movs	r0, #0
 800808e:	e7f7      	b.n	8008080 <__swsetup_r+0x9c>
 8008090:	20000064 	.word	0x20000064

08008094 <memmove>:
 8008094:	4288      	cmp	r0, r1
 8008096:	b510      	push	{r4, lr}
 8008098:	eb01 0402 	add.w	r4, r1, r2
 800809c:	d902      	bls.n	80080a4 <memmove+0x10>
 800809e:	4284      	cmp	r4, r0
 80080a0:	4623      	mov	r3, r4
 80080a2:	d807      	bhi.n	80080b4 <memmove+0x20>
 80080a4:	1e43      	subs	r3, r0, #1
 80080a6:	42a1      	cmp	r1, r4
 80080a8:	d008      	beq.n	80080bc <memmove+0x28>
 80080aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080b2:	e7f8      	b.n	80080a6 <memmove+0x12>
 80080b4:	4402      	add	r2, r0
 80080b6:	4601      	mov	r1, r0
 80080b8:	428a      	cmp	r2, r1
 80080ba:	d100      	bne.n	80080be <memmove+0x2a>
 80080bc:	bd10      	pop	{r4, pc}
 80080be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080c6:	e7f7      	b.n	80080b8 <memmove+0x24>

080080c8 <_sbrk_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4d06      	ldr	r5, [pc, #24]	; (80080e4 <_sbrk_r+0x1c>)
 80080cc:	2300      	movs	r3, #0
 80080ce:	4604      	mov	r4, r0
 80080d0:	4608      	mov	r0, r1
 80080d2:	602b      	str	r3, [r5, #0]
 80080d4:	f7fa fd70 	bl	8002bb8 <_sbrk>
 80080d8:	1c43      	adds	r3, r0, #1
 80080da:	d102      	bne.n	80080e2 <_sbrk_r+0x1a>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	b103      	cbz	r3, 80080e2 <_sbrk_r+0x1a>
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	2000044c 	.word	0x2000044c

080080e8 <memcpy>:
 80080e8:	440a      	add	r2, r1
 80080ea:	4291      	cmp	r1, r2
 80080ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80080f0:	d100      	bne.n	80080f4 <memcpy+0xc>
 80080f2:	4770      	bx	lr
 80080f4:	b510      	push	{r4, lr}
 80080f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080fe:	4291      	cmp	r1, r2
 8008100:	d1f9      	bne.n	80080f6 <memcpy+0xe>
 8008102:	bd10      	pop	{r4, pc}

08008104 <__assert_func>:
 8008104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008106:	4614      	mov	r4, r2
 8008108:	461a      	mov	r2, r3
 800810a:	4b09      	ldr	r3, [pc, #36]	; (8008130 <__assert_func+0x2c>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4605      	mov	r5, r0
 8008110:	68d8      	ldr	r0, [r3, #12]
 8008112:	b14c      	cbz	r4, 8008128 <__assert_func+0x24>
 8008114:	4b07      	ldr	r3, [pc, #28]	; (8008134 <__assert_func+0x30>)
 8008116:	9100      	str	r1, [sp, #0]
 8008118:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800811c:	4906      	ldr	r1, [pc, #24]	; (8008138 <__assert_func+0x34>)
 800811e:	462b      	mov	r3, r5
 8008120:	f000 f872 	bl	8008208 <fiprintf>
 8008124:	f000 f906 	bl	8008334 <abort>
 8008128:	4b04      	ldr	r3, [pc, #16]	; (800813c <__assert_func+0x38>)
 800812a:	461c      	mov	r4, r3
 800812c:	e7f3      	b.n	8008116 <__assert_func+0x12>
 800812e:	bf00      	nop
 8008130:	20000064 	.word	0x20000064
 8008134:	08008ad7 	.word	0x08008ad7
 8008138:	08008ae4 	.word	0x08008ae4
 800813c:	08008b12 	.word	0x08008b12

08008140 <_calloc_r>:
 8008140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008142:	fba1 2402 	umull	r2, r4, r1, r2
 8008146:	b94c      	cbnz	r4, 800815c <_calloc_r+0x1c>
 8008148:	4611      	mov	r1, r2
 800814a:	9201      	str	r2, [sp, #4]
 800814c:	f7fe ffba 	bl	80070c4 <_malloc_r>
 8008150:	9a01      	ldr	r2, [sp, #4]
 8008152:	4605      	mov	r5, r0
 8008154:	b930      	cbnz	r0, 8008164 <_calloc_r+0x24>
 8008156:	4628      	mov	r0, r5
 8008158:	b003      	add	sp, #12
 800815a:	bd30      	pop	{r4, r5, pc}
 800815c:	220c      	movs	r2, #12
 800815e:	6002      	str	r2, [r0, #0]
 8008160:	2500      	movs	r5, #0
 8008162:	e7f8      	b.n	8008156 <_calloc_r+0x16>
 8008164:	4621      	mov	r1, r4
 8008166:	f7fe f83e 	bl	80061e6 <memset>
 800816a:	e7f4      	b.n	8008156 <_calloc_r+0x16>

0800816c <__ascii_mbtowc>:
 800816c:	b082      	sub	sp, #8
 800816e:	b901      	cbnz	r1, 8008172 <__ascii_mbtowc+0x6>
 8008170:	a901      	add	r1, sp, #4
 8008172:	b142      	cbz	r2, 8008186 <__ascii_mbtowc+0x1a>
 8008174:	b14b      	cbz	r3, 800818a <__ascii_mbtowc+0x1e>
 8008176:	7813      	ldrb	r3, [r2, #0]
 8008178:	600b      	str	r3, [r1, #0]
 800817a:	7812      	ldrb	r2, [r2, #0]
 800817c:	1e10      	subs	r0, r2, #0
 800817e:	bf18      	it	ne
 8008180:	2001      	movne	r0, #1
 8008182:	b002      	add	sp, #8
 8008184:	4770      	bx	lr
 8008186:	4610      	mov	r0, r2
 8008188:	e7fb      	b.n	8008182 <__ascii_mbtowc+0x16>
 800818a:	f06f 0001 	mvn.w	r0, #1
 800818e:	e7f8      	b.n	8008182 <__ascii_mbtowc+0x16>

08008190 <_realloc_r>:
 8008190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008194:	4680      	mov	r8, r0
 8008196:	4614      	mov	r4, r2
 8008198:	460e      	mov	r6, r1
 800819a:	b921      	cbnz	r1, 80081a6 <_realloc_r+0x16>
 800819c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081a0:	4611      	mov	r1, r2
 80081a2:	f7fe bf8f 	b.w	80070c4 <_malloc_r>
 80081a6:	b92a      	cbnz	r2, 80081b4 <_realloc_r+0x24>
 80081a8:	f7fe ff18 	bl	8006fdc <_free_r>
 80081ac:	4625      	mov	r5, r4
 80081ae:	4628      	mov	r0, r5
 80081b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b4:	f000 f8c5 	bl	8008342 <_malloc_usable_size_r>
 80081b8:	4284      	cmp	r4, r0
 80081ba:	4607      	mov	r7, r0
 80081bc:	d802      	bhi.n	80081c4 <_realloc_r+0x34>
 80081be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081c2:	d812      	bhi.n	80081ea <_realloc_r+0x5a>
 80081c4:	4621      	mov	r1, r4
 80081c6:	4640      	mov	r0, r8
 80081c8:	f7fe ff7c 	bl	80070c4 <_malloc_r>
 80081cc:	4605      	mov	r5, r0
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d0ed      	beq.n	80081ae <_realloc_r+0x1e>
 80081d2:	42bc      	cmp	r4, r7
 80081d4:	4622      	mov	r2, r4
 80081d6:	4631      	mov	r1, r6
 80081d8:	bf28      	it	cs
 80081da:	463a      	movcs	r2, r7
 80081dc:	f7ff ff84 	bl	80080e8 <memcpy>
 80081e0:	4631      	mov	r1, r6
 80081e2:	4640      	mov	r0, r8
 80081e4:	f7fe fefa 	bl	8006fdc <_free_r>
 80081e8:	e7e1      	b.n	80081ae <_realloc_r+0x1e>
 80081ea:	4635      	mov	r5, r6
 80081ec:	e7df      	b.n	80081ae <_realloc_r+0x1e>

080081ee <__ascii_wctomb>:
 80081ee:	b149      	cbz	r1, 8008204 <__ascii_wctomb+0x16>
 80081f0:	2aff      	cmp	r2, #255	; 0xff
 80081f2:	bf85      	ittet	hi
 80081f4:	238a      	movhi	r3, #138	; 0x8a
 80081f6:	6003      	strhi	r3, [r0, #0]
 80081f8:	700a      	strbls	r2, [r1, #0]
 80081fa:	f04f 30ff 	movhi.w	r0, #4294967295
 80081fe:	bf98      	it	ls
 8008200:	2001      	movls	r0, #1
 8008202:	4770      	bx	lr
 8008204:	4608      	mov	r0, r1
 8008206:	4770      	bx	lr

08008208 <fiprintf>:
 8008208:	b40e      	push	{r1, r2, r3}
 800820a:	b503      	push	{r0, r1, lr}
 800820c:	4601      	mov	r1, r0
 800820e:	ab03      	add	r3, sp, #12
 8008210:	4805      	ldr	r0, [pc, #20]	; (8008228 <fiprintf+0x20>)
 8008212:	f853 2b04 	ldr.w	r2, [r3], #4
 8008216:	6800      	ldr	r0, [r0, #0]
 8008218:	9301      	str	r3, [sp, #4]
 800821a:	f7ff fcdd 	bl	8007bd8 <_vfiprintf_r>
 800821e:	b002      	add	sp, #8
 8008220:	f85d eb04 	ldr.w	lr, [sp], #4
 8008224:	b003      	add	sp, #12
 8008226:	4770      	bx	lr
 8008228:	20000064 	.word	0x20000064

0800822c <__swhatbuf_r>:
 800822c:	b570      	push	{r4, r5, r6, lr}
 800822e:	460c      	mov	r4, r1
 8008230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008234:	2900      	cmp	r1, #0
 8008236:	b096      	sub	sp, #88	; 0x58
 8008238:	4615      	mov	r5, r2
 800823a:	461e      	mov	r6, r3
 800823c:	da0d      	bge.n	800825a <__swhatbuf_r+0x2e>
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008244:	f04f 0100 	mov.w	r1, #0
 8008248:	bf0c      	ite	eq
 800824a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800824e:	2340      	movne	r3, #64	; 0x40
 8008250:	2000      	movs	r0, #0
 8008252:	6031      	str	r1, [r6, #0]
 8008254:	602b      	str	r3, [r5, #0]
 8008256:	b016      	add	sp, #88	; 0x58
 8008258:	bd70      	pop	{r4, r5, r6, pc}
 800825a:	466a      	mov	r2, sp
 800825c:	f000 f848 	bl	80082f0 <_fstat_r>
 8008260:	2800      	cmp	r0, #0
 8008262:	dbec      	blt.n	800823e <__swhatbuf_r+0x12>
 8008264:	9901      	ldr	r1, [sp, #4]
 8008266:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800826a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800826e:	4259      	negs	r1, r3
 8008270:	4159      	adcs	r1, r3
 8008272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008276:	e7eb      	b.n	8008250 <__swhatbuf_r+0x24>

08008278 <__smakebuf_r>:
 8008278:	898b      	ldrh	r3, [r1, #12]
 800827a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800827c:	079d      	lsls	r5, r3, #30
 800827e:	4606      	mov	r6, r0
 8008280:	460c      	mov	r4, r1
 8008282:	d507      	bpl.n	8008294 <__smakebuf_r+0x1c>
 8008284:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008288:	6023      	str	r3, [r4, #0]
 800828a:	6123      	str	r3, [r4, #16]
 800828c:	2301      	movs	r3, #1
 800828e:	6163      	str	r3, [r4, #20]
 8008290:	b002      	add	sp, #8
 8008292:	bd70      	pop	{r4, r5, r6, pc}
 8008294:	ab01      	add	r3, sp, #4
 8008296:	466a      	mov	r2, sp
 8008298:	f7ff ffc8 	bl	800822c <__swhatbuf_r>
 800829c:	9900      	ldr	r1, [sp, #0]
 800829e:	4605      	mov	r5, r0
 80082a0:	4630      	mov	r0, r6
 80082a2:	f7fe ff0f 	bl	80070c4 <_malloc_r>
 80082a6:	b948      	cbnz	r0, 80082bc <__smakebuf_r+0x44>
 80082a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ac:	059a      	lsls	r2, r3, #22
 80082ae:	d4ef      	bmi.n	8008290 <__smakebuf_r+0x18>
 80082b0:	f023 0303 	bic.w	r3, r3, #3
 80082b4:	f043 0302 	orr.w	r3, r3, #2
 80082b8:	81a3      	strh	r3, [r4, #12]
 80082ba:	e7e3      	b.n	8008284 <__smakebuf_r+0xc>
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	6020      	str	r0, [r4, #0]
 80082c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c4:	81a3      	strh	r3, [r4, #12]
 80082c6:	9b00      	ldr	r3, [sp, #0]
 80082c8:	6163      	str	r3, [r4, #20]
 80082ca:	9b01      	ldr	r3, [sp, #4]
 80082cc:	6120      	str	r0, [r4, #16]
 80082ce:	b15b      	cbz	r3, 80082e8 <__smakebuf_r+0x70>
 80082d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082d4:	4630      	mov	r0, r6
 80082d6:	f000 f81d 	bl	8008314 <_isatty_r>
 80082da:	b128      	cbz	r0, 80082e8 <__smakebuf_r+0x70>
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	f023 0303 	bic.w	r3, r3, #3
 80082e2:	f043 0301 	orr.w	r3, r3, #1
 80082e6:	81a3      	strh	r3, [r4, #12]
 80082e8:	89a3      	ldrh	r3, [r4, #12]
 80082ea:	431d      	orrs	r5, r3
 80082ec:	81a5      	strh	r5, [r4, #12]
 80082ee:	e7cf      	b.n	8008290 <__smakebuf_r+0x18>

080082f0 <_fstat_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4d07      	ldr	r5, [pc, #28]	; (8008310 <_fstat_r+0x20>)
 80082f4:	2300      	movs	r3, #0
 80082f6:	4604      	mov	r4, r0
 80082f8:	4608      	mov	r0, r1
 80082fa:	4611      	mov	r1, r2
 80082fc:	602b      	str	r3, [r5, #0]
 80082fe:	f7fa fc32 	bl	8002b66 <_fstat>
 8008302:	1c43      	adds	r3, r0, #1
 8008304:	d102      	bne.n	800830c <_fstat_r+0x1c>
 8008306:	682b      	ldr	r3, [r5, #0]
 8008308:	b103      	cbz	r3, 800830c <_fstat_r+0x1c>
 800830a:	6023      	str	r3, [r4, #0]
 800830c:	bd38      	pop	{r3, r4, r5, pc}
 800830e:	bf00      	nop
 8008310:	2000044c 	.word	0x2000044c

08008314 <_isatty_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4d06      	ldr	r5, [pc, #24]	; (8008330 <_isatty_r+0x1c>)
 8008318:	2300      	movs	r3, #0
 800831a:	4604      	mov	r4, r0
 800831c:	4608      	mov	r0, r1
 800831e:	602b      	str	r3, [r5, #0]
 8008320:	f7fa fc31 	bl	8002b86 <_isatty>
 8008324:	1c43      	adds	r3, r0, #1
 8008326:	d102      	bne.n	800832e <_isatty_r+0x1a>
 8008328:	682b      	ldr	r3, [r5, #0]
 800832a:	b103      	cbz	r3, 800832e <_isatty_r+0x1a>
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	bd38      	pop	{r3, r4, r5, pc}
 8008330:	2000044c 	.word	0x2000044c

08008334 <abort>:
 8008334:	b508      	push	{r3, lr}
 8008336:	2006      	movs	r0, #6
 8008338:	f000 f834 	bl	80083a4 <raise>
 800833c:	2001      	movs	r0, #1
 800833e:	f7fa fbc3 	bl	8002ac8 <_exit>

08008342 <_malloc_usable_size_r>:
 8008342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008346:	1f18      	subs	r0, r3, #4
 8008348:	2b00      	cmp	r3, #0
 800834a:	bfbc      	itt	lt
 800834c:	580b      	ldrlt	r3, [r1, r0]
 800834e:	18c0      	addlt	r0, r0, r3
 8008350:	4770      	bx	lr

08008352 <_raise_r>:
 8008352:	291f      	cmp	r1, #31
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4604      	mov	r4, r0
 8008358:	460d      	mov	r5, r1
 800835a:	d904      	bls.n	8008366 <_raise_r+0x14>
 800835c:	2316      	movs	r3, #22
 800835e:	6003      	str	r3, [r0, #0]
 8008360:	f04f 30ff 	mov.w	r0, #4294967295
 8008364:	bd38      	pop	{r3, r4, r5, pc}
 8008366:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008368:	b112      	cbz	r2, 8008370 <_raise_r+0x1e>
 800836a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800836e:	b94b      	cbnz	r3, 8008384 <_raise_r+0x32>
 8008370:	4620      	mov	r0, r4
 8008372:	f000 f831 	bl	80083d8 <_getpid_r>
 8008376:	462a      	mov	r2, r5
 8008378:	4601      	mov	r1, r0
 800837a:	4620      	mov	r0, r4
 800837c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008380:	f000 b818 	b.w	80083b4 <_kill_r>
 8008384:	2b01      	cmp	r3, #1
 8008386:	d00a      	beq.n	800839e <_raise_r+0x4c>
 8008388:	1c59      	adds	r1, r3, #1
 800838a:	d103      	bne.n	8008394 <_raise_r+0x42>
 800838c:	2316      	movs	r3, #22
 800838e:	6003      	str	r3, [r0, #0]
 8008390:	2001      	movs	r0, #1
 8008392:	e7e7      	b.n	8008364 <_raise_r+0x12>
 8008394:	2400      	movs	r4, #0
 8008396:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800839a:	4628      	mov	r0, r5
 800839c:	4798      	blx	r3
 800839e:	2000      	movs	r0, #0
 80083a0:	e7e0      	b.n	8008364 <_raise_r+0x12>
	...

080083a4 <raise>:
 80083a4:	4b02      	ldr	r3, [pc, #8]	; (80083b0 <raise+0xc>)
 80083a6:	4601      	mov	r1, r0
 80083a8:	6818      	ldr	r0, [r3, #0]
 80083aa:	f7ff bfd2 	b.w	8008352 <_raise_r>
 80083ae:	bf00      	nop
 80083b0:	20000064 	.word	0x20000064

080083b4 <_kill_r>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	4d07      	ldr	r5, [pc, #28]	; (80083d4 <_kill_r+0x20>)
 80083b8:	2300      	movs	r3, #0
 80083ba:	4604      	mov	r4, r0
 80083bc:	4608      	mov	r0, r1
 80083be:	4611      	mov	r1, r2
 80083c0:	602b      	str	r3, [r5, #0]
 80083c2:	f7fa fb71 	bl	8002aa8 <_kill>
 80083c6:	1c43      	adds	r3, r0, #1
 80083c8:	d102      	bne.n	80083d0 <_kill_r+0x1c>
 80083ca:	682b      	ldr	r3, [r5, #0]
 80083cc:	b103      	cbz	r3, 80083d0 <_kill_r+0x1c>
 80083ce:	6023      	str	r3, [r4, #0]
 80083d0:	bd38      	pop	{r3, r4, r5, pc}
 80083d2:	bf00      	nop
 80083d4:	2000044c 	.word	0x2000044c

080083d8 <_getpid_r>:
 80083d8:	f7fa bb5e 	b.w	8002a98 <_getpid>
 80083dc:	0000      	movs	r0, r0
	...

080083e0 <log>:
 80083e0:	b538      	push	{r3, r4, r5, lr}
 80083e2:	ed2d 8b02 	vpush	{d8}
 80083e6:	ec55 4b10 	vmov	r4, r5, d0
 80083ea:	f000 f841 	bl	8008470 <__ieee754_log>
 80083ee:	4622      	mov	r2, r4
 80083f0:	462b      	mov	r3, r5
 80083f2:	4620      	mov	r0, r4
 80083f4:	4629      	mov	r1, r5
 80083f6:	eeb0 8a40 	vmov.f32	s16, s0
 80083fa:	eef0 8a60 	vmov.f32	s17, s1
 80083fe:	f7f8 fb9d 	bl	8000b3c <__aeabi_dcmpun>
 8008402:	b998      	cbnz	r0, 800842c <log+0x4c>
 8008404:	2200      	movs	r2, #0
 8008406:	2300      	movs	r3, #0
 8008408:	4620      	mov	r0, r4
 800840a:	4629      	mov	r1, r5
 800840c:	f7f8 fb8c 	bl	8000b28 <__aeabi_dcmpgt>
 8008410:	b960      	cbnz	r0, 800842c <log+0x4c>
 8008412:	2200      	movs	r2, #0
 8008414:	2300      	movs	r3, #0
 8008416:	4620      	mov	r0, r4
 8008418:	4629      	mov	r1, r5
 800841a:	f7f8 fb5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800841e:	b160      	cbz	r0, 800843a <log+0x5a>
 8008420:	f7fd ff34 	bl	800628c <__errno>
 8008424:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8008450 <log+0x70>
 8008428:	2322      	movs	r3, #34	; 0x22
 800842a:	6003      	str	r3, [r0, #0]
 800842c:	eeb0 0a48 	vmov.f32	s0, s16
 8008430:	eef0 0a68 	vmov.f32	s1, s17
 8008434:	ecbd 8b02 	vpop	{d8}
 8008438:	bd38      	pop	{r3, r4, r5, pc}
 800843a:	f7fd ff27 	bl	800628c <__errno>
 800843e:	ecbd 8b02 	vpop	{d8}
 8008442:	2321      	movs	r3, #33	; 0x21
 8008444:	6003      	str	r3, [r0, #0]
 8008446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800844a:	4803      	ldr	r0, [pc, #12]	; (8008458 <log+0x78>)
 800844c:	f000 b808 	b.w	8008460 <nan>
 8008450:	00000000 	.word	0x00000000
 8008454:	fff00000 	.word	0xfff00000
 8008458:	08008b12 	.word	0x08008b12
 800845c:	00000000 	.word	0x00000000

08008460 <nan>:
 8008460:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008468 <nan+0x8>
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	00000000 	.word	0x00000000
 800846c:	7ff80000 	.word	0x7ff80000

08008470 <__ieee754_log>:
 8008470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008474:	ec51 0b10 	vmov	r0, r1, d0
 8008478:	ed2d 8b04 	vpush	{d8-d9}
 800847c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008480:	b083      	sub	sp, #12
 8008482:	460d      	mov	r5, r1
 8008484:	da29      	bge.n	80084da <__ieee754_log+0x6a>
 8008486:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800848a:	4303      	orrs	r3, r0
 800848c:	ee10 2a10 	vmov	r2, s0
 8008490:	d10c      	bne.n	80084ac <__ieee754_log+0x3c>
 8008492:	49cf      	ldr	r1, [pc, #828]	; (80087d0 <__ieee754_log+0x360>)
 8008494:	2200      	movs	r2, #0
 8008496:	2300      	movs	r3, #0
 8008498:	2000      	movs	r0, #0
 800849a:	f7f8 f9df 	bl	800085c <__aeabi_ddiv>
 800849e:	ec41 0b10 	vmov	d0, r0, r1
 80084a2:	b003      	add	sp, #12
 80084a4:	ecbd 8b04 	vpop	{d8-d9}
 80084a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ac:	2900      	cmp	r1, #0
 80084ae:	da05      	bge.n	80084bc <__ieee754_log+0x4c>
 80084b0:	460b      	mov	r3, r1
 80084b2:	f7f7 fef1 	bl	8000298 <__aeabi_dsub>
 80084b6:	2200      	movs	r2, #0
 80084b8:	2300      	movs	r3, #0
 80084ba:	e7ee      	b.n	800849a <__ieee754_log+0x2a>
 80084bc:	4bc5      	ldr	r3, [pc, #788]	; (80087d4 <__ieee754_log+0x364>)
 80084be:	2200      	movs	r2, #0
 80084c0:	f7f8 f8a2 	bl	8000608 <__aeabi_dmul>
 80084c4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80084c8:	460d      	mov	r5, r1
 80084ca:	4ac3      	ldr	r2, [pc, #780]	; (80087d8 <__ieee754_log+0x368>)
 80084cc:	4295      	cmp	r5, r2
 80084ce:	dd06      	ble.n	80084de <__ieee754_log+0x6e>
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
 80084d4:	f7f7 fee2 	bl	800029c <__adddf3>
 80084d8:	e7e1      	b.n	800849e <__ieee754_log+0x2e>
 80084da:	2300      	movs	r3, #0
 80084dc:	e7f5      	b.n	80084ca <__ieee754_log+0x5a>
 80084de:	152c      	asrs	r4, r5, #20
 80084e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80084e4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80084e8:	441c      	add	r4, r3
 80084ea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80084ee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80084f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084f6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80084fa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80084fe:	ea42 0105 	orr.w	r1, r2, r5
 8008502:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008506:	2200      	movs	r2, #0
 8008508:	4bb4      	ldr	r3, [pc, #720]	; (80087dc <__ieee754_log+0x36c>)
 800850a:	f7f7 fec5 	bl	8000298 <__aeabi_dsub>
 800850e:	1cab      	adds	r3, r5, #2
 8008510:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008514:	2b02      	cmp	r3, #2
 8008516:	4682      	mov	sl, r0
 8008518:	468b      	mov	fp, r1
 800851a:	f04f 0200 	mov.w	r2, #0
 800851e:	dc53      	bgt.n	80085c8 <__ieee754_log+0x158>
 8008520:	2300      	movs	r3, #0
 8008522:	f7f8 fad9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008526:	b1d0      	cbz	r0, 800855e <__ieee754_log+0xee>
 8008528:	2c00      	cmp	r4, #0
 800852a:	f000 8122 	beq.w	8008772 <__ieee754_log+0x302>
 800852e:	4620      	mov	r0, r4
 8008530:	f7f8 f800 	bl	8000534 <__aeabi_i2d>
 8008534:	a390      	add	r3, pc, #576	; (adr r3, 8008778 <__ieee754_log+0x308>)
 8008536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853a:	4606      	mov	r6, r0
 800853c:	460f      	mov	r7, r1
 800853e:	f7f8 f863 	bl	8000608 <__aeabi_dmul>
 8008542:	a38f      	add	r3, pc, #572	; (adr r3, 8008780 <__ieee754_log+0x310>)
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	4604      	mov	r4, r0
 800854a:	460d      	mov	r5, r1
 800854c:	4630      	mov	r0, r6
 800854e:	4639      	mov	r1, r7
 8008550:	f7f8 f85a 	bl	8000608 <__aeabi_dmul>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	4620      	mov	r0, r4
 800855a:	4629      	mov	r1, r5
 800855c:	e7ba      	b.n	80084d4 <__ieee754_log+0x64>
 800855e:	a38a      	add	r3, pc, #552	; (adr r3, 8008788 <__ieee754_log+0x318>)
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	4650      	mov	r0, sl
 8008566:	4659      	mov	r1, fp
 8008568:	f7f8 f84e 	bl	8000608 <__aeabi_dmul>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	2000      	movs	r0, #0
 8008572:	499b      	ldr	r1, [pc, #620]	; (80087e0 <__ieee754_log+0x370>)
 8008574:	f7f7 fe90 	bl	8000298 <__aeabi_dsub>
 8008578:	4652      	mov	r2, sl
 800857a:	4606      	mov	r6, r0
 800857c:	460f      	mov	r7, r1
 800857e:	465b      	mov	r3, fp
 8008580:	4650      	mov	r0, sl
 8008582:	4659      	mov	r1, fp
 8008584:	f7f8 f840 	bl	8000608 <__aeabi_dmul>
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	4630      	mov	r0, r6
 800858e:	4639      	mov	r1, r7
 8008590:	f7f8 f83a 	bl	8000608 <__aeabi_dmul>
 8008594:	4606      	mov	r6, r0
 8008596:	460f      	mov	r7, r1
 8008598:	b914      	cbnz	r4, 80085a0 <__ieee754_log+0x130>
 800859a:	4632      	mov	r2, r6
 800859c:	463b      	mov	r3, r7
 800859e:	e0a2      	b.n	80086e6 <__ieee754_log+0x276>
 80085a0:	4620      	mov	r0, r4
 80085a2:	f7f7 ffc7 	bl	8000534 <__aeabi_i2d>
 80085a6:	a374      	add	r3, pc, #464	; (adr r3, 8008778 <__ieee754_log+0x308>)
 80085a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ac:	4680      	mov	r8, r0
 80085ae:	4689      	mov	r9, r1
 80085b0:	f7f8 f82a 	bl	8000608 <__aeabi_dmul>
 80085b4:	a372      	add	r3, pc, #456	; (adr r3, 8008780 <__ieee754_log+0x310>)
 80085b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ba:	4604      	mov	r4, r0
 80085bc:	460d      	mov	r5, r1
 80085be:	4640      	mov	r0, r8
 80085c0:	4649      	mov	r1, r9
 80085c2:	f7f8 f821 	bl	8000608 <__aeabi_dmul>
 80085c6:	e0a7      	b.n	8008718 <__ieee754_log+0x2a8>
 80085c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085cc:	f7f7 fe66 	bl	800029c <__adddf3>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4650      	mov	r0, sl
 80085d6:	4659      	mov	r1, fp
 80085d8:	f7f8 f940 	bl	800085c <__aeabi_ddiv>
 80085dc:	ec41 0b18 	vmov	d8, r0, r1
 80085e0:	4620      	mov	r0, r4
 80085e2:	f7f7 ffa7 	bl	8000534 <__aeabi_i2d>
 80085e6:	ec53 2b18 	vmov	r2, r3, d8
 80085ea:	ec41 0b19 	vmov	d9, r0, r1
 80085ee:	ec51 0b18 	vmov	r0, r1, d8
 80085f2:	f7f8 f809 	bl	8000608 <__aeabi_dmul>
 80085f6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80085fa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80085fe:	9301      	str	r3, [sp, #4]
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	4680      	mov	r8, r0
 8008606:	4689      	mov	r9, r1
 8008608:	f7f7 fffe 	bl	8000608 <__aeabi_dmul>
 800860c:	a360      	add	r3, pc, #384	; (adr r3, 8008790 <__ieee754_log+0x320>)
 800860e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008612:	4606      	mov	r6, r0
 8008614:	460f      	mov	r7, r1
 8008616:	f7f7 fff7 	bl	8000608 <__aeabi_dmul>
 800861a:	a35f      	add	r3, pc, #380	; (adr r3, 8008798 <__ieee754_log+0x328>)
 800861c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008620:	f7f7 fe3c 	bl	800029c <__adddf3>
 8008624:	4632      	mov	r2, r6
 8008626:	463b      	mov	r3, r7
 8008628:	f7f7 ffee 	bl	8000608 <__aeabi_dmul>
 800862c:	a35c      	add	r3, pc, #368	; (adr r3, 80087a0 <__ieee754_log+0x330>)
 800862e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008632:	f7f7 fe33 	bl	800029c <__adddf3>
 8008636:	4632      	mov	r2, r6
 8008638:	463b      	mov	r3, r7
 800863a:	f7f7 ffe5 	bl	8000608 <__aeabi_dmul>
 800863e:	a35a      	add	r3, pc, #360	; (adr r3, 80087a8 <__ieee754_log+0x338>)
 8008640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008644:	f7f7 fe2a 	bl	800029c <__adddf3>
 8008648:	4642      	mov	r2, r8
 800864a:	464b      	mov	r3, r9
 800864c:	f7f7 ffdc 	bl	8000608 <__aeabi_dmul>
 8008650:	a357      	add	r3, pc, #348	; (adr r3, 80087b0 <__ieee754_log+0x340>)
 8008652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008656:	4680      	mov	r8, r0
 8008658:	4689      	mov	r9, r1
 800865a:	4630      	mov	r0, r6
 800865c:	4639      	mov	r1, r7
 800865e:	f7f7 ffd3 	bl	8000608 <__aeabi_dmul>
 8008662:	a355      	add	r3, pc, #340	; (adr r3, 80087b8 <__ieee754_log+0x348>)
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	f7f7 fe18 	bl	800029c <__adddf3>
 800866c:	4632      	mov	r2, r6
 800866e:	463b      	mov	r3, r7
 8008670:	f7f7 ffca 	bl	8000608 <__aeabi_dmul>
 8008674:	a352      	add	r3, pc, #328	; (adr r3, 80087c0 <__ieee754_log+0x350>)
 8008676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867a:	f7f7 fe0f 	bl	800029c <__adddf3>
 800867e:	4632      	mov	r2, r6
 8008680:	463b      	mov	r3, r7
 8008682:	f7f7 ffc1 	bl	8000608 <__aeabi_dmul>
 8008686:	460b      	mov	r3, r1
 8008688:	4602      	mov	r2, r0
 800868a:	4649      	mov	r1, r9
 800868c:	4640      	mov	r0, r8
 800868e:	f7f7 fe05 	bl	800029c <__adddf3>
 8008692:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008696:	9b01      	ldr	r3, [sp, #4]
 8008698:	3551      	adds	r5, #81	; 0x51
 800869a:	431d      	orrs	r5, r3
 800869c:	2d00      	cmp	r5, #0
 800869e:	4680      	mov	r8, r0
 80086a0:	4689      	mov	r9, r1
 80086a2:	dd48      	ble.n	8008736 <__ieee754_log+0x2c6>
 80086a4:	4b4e      	ldr	r3, [pc, #312]	; (80087e0 <__ieee754_log+0x370>)
 80086a6:	2200      	movs	r2, #0
 80086a8:	4650      	mov	r0, sl
 80086aa:	4659      	mov	r1, fp
 80086ac:	f7f7 ffac 	bl	8000608 <__aeabi_dmul>
 80086b0:	4652      	mov	r2, sl
 80086b2:	465b      	mov	r3, fp
 80086b4:	f7f7 ffa8 	bl	8000608 <__aeabi_dmul>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	4606      	mov	r6, r0
 80086be:	460f      	mov	r7, r1
 80086c0:	4640      	mov	r0, r8
 80086c2:	4649      	mov	r1, r9
 80086c4:	f7f7 fdea 	bl	800029c <__adddf3>
 80086c8:	ec53 2b18 	vmov	r2, r3, d8
 80086cc:	f7f7 ff9c 	bl	8000608 <__aeabi_dmul>
 80086d0:	4680      	mov	r8, r0
 80086d2:	4689      	mov	r9, r1
 80086d4:	b964      	cbnz	r4, 80086f0 <__ieee754_log+0x280>
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	4630      	mov	r0, r6
 80086dc:	4639      	mov	r1, r7
 80086de:	f7f7 fddb 	bl	8000298 <__aeabi_dsub>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4650      	mov	r0, sl
 80086e8:	4659      	mov	r1, fp
 80086ea:	f7f7 fdd5 	bl	8000298 <__aeabi_dsub>
 80086ee:	e6d6      	b.n	800849e <__ieee754_log+0x2e>
 80086f0:	a321      	add	r3, pc, #132	; (adr r3, 8008778 <__ieee754_log+0x308>)
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	ec51 0b19 	vmov	r0, r1, d9
 80086fa:	f7f7 ff85 	bl	8000608 <__aeabi_dmul>
 80086fe:	a320      	add	r3, pc, #128	; (adr r3, 8008780 <__ieee754_log+0x310>)
 8008700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008704:	4604      	mov	r4, r0
 8008706:	460d      	mov	r5, r1
 8008708:	ec51 0b19 	vmov	r0, r1, d9
 800870c:	f7f7 ff7c 	bl	8000608 <__aeabi_dmul>
 8008710:	4642      	mov	r2, r8
 8008712:	464b      	mov	r3, r9
 8008714:	f7f7 fdc2 	bl	800029c <__adddf3>
 8008718:	4602      	mov	r2, r0
 800871a:	460b      	mov	r3, r1
 800871c:	4630      	mov	r0, r6
 800871e:	4639      	mov	r1, r7
 8008720:	f7f7 fdba 	bl	8000298 <__aeabi_dsub>
 8008724:	4652      	mov	r2, sl
 8008726:	465b      	mov	r3, fp
 8008728:	f7f7 fdb6 	bl	8000298 <__aeabi_dsub>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	4620      	mov	r0, r4
 8008732:	4629      	mov	r1, r5
 8008734:	e7d9      	b.n	80086ea <__ieee754_log+0x27a>
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
 800873a:	4650      	mov	r0, sl
 800873c:	4659      	mov	r1, fp
 800873e:	f7f7 fdab 	bl	8000298 <__aeabi_dsub>
 8008742:	ec53 2b18 	vmov	r2, r3, d8
 8008746:	f7f7 ff5f 	bl	8000608 <__aeabi_dmul>
 800874a:	4606      	mov	r6, r0
 800874c:	460f      	mov	r7, r1
 800874e:	2c00      	cmp	r4, #0
 8008750:	f43f af23 	beq.w	800859a <__ieee754_log+0x12a>
 8008754:	a308      	add	r3, pc, #32	; (adr r3, 8008778 <__ieee754_log+0x308>)
 8008756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875a:	ec51 0b19 	vmov	r0, r1, d9
 800875e:	f7f7 ff53 	bl	8000608 <__aeabi_dmul>
 8008762:	a307      	add	r3, pc, #28	; (adr r3, 8008780 <__ieee754_log+0x310>)
 8008764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008768:	4604      	mov	r4, r0
 800876a:	460d      	mov	r5, r1
 800876c:	ec51 0b19 	vmov	r0, r1, d9
 8008770:	e727      	b.n	80085c2 <__ieee754_log+0x152>
 8008772:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80087c8 <__ieee754_log+0x358>
 8008776:	e694      	b.n	80084a2 <__ieee754_log+0x32>
 8008778:	fee00000 	.word	0xfee00000
 800877c:	3fe62e42 	.word	0x3fe62e42
 8008780:	35793c76 	.word	0x35793c76
 8008784:	3dea39ef 	.word	0x3dea39ef
 8008788:	55555555 	.word	0x55555555
 800878c:	3fd55555 	.word	0x3fd55555
 8008790:	df3e5244 	.word	0xdf3e5244
 8008794:	3fc2f112 	.word	0x3fc2f112
 8008798:	96cb03de 	.word	0x96cb03de
 800879c:	3fc74664 	.word	0x3fc74664
 80087a0:	94229359 	.word	0x94229359
 80087a4:	3fd24924 	.word	0x3fd24924
 80087a8:	55555593 	.word	0x55555593
 80087ac:	3fe55555 	.word	0x3fe55555
 80087b0:	d078c69f 	.word	0xd078c69f
 80087b4:	3fc39a09 	.word	0x3fc39a09
 80087b8:	1d8e78af 	.word	0x1d8e78af
 80087bc:	3fcc71c5 	.word	0x3fcc71c5
 80087c0:	9997fa04 	.word	0x9997fa04
 80087c4:	3fd99999 	.word	0x3fd99999
	...
 80087d0:	c3500000 	.word	0xc3500000
 80087d4:	43500000 	.word	0x43500000
 80087d8:	7fefffff 	.word	0x7fefffff
 80087dc:	3ff00000 	.word	0x3ff00000
 80087e0:	3fe00000 	.word	0x3fe00000

080087e4 <_init>:
 80087e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e6:	bf00      	nop
 80087e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ea:	bc08      	pop	{r3}
 80087ec:	469e      	mov	lr, r3
 80087ee:	4770      	bx	lr

080087f0 <_fini>:
 80087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f2:	bf00      	nop
 80087f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087f6:	bc08      	pop	{r3}
 80087f8:	469e      	mov	lr, r3
 80087fa:	4770      	bx	lr
