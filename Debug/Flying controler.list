
Flying controler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004668  08004668  00014668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046bc  080046bc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080046bc  080046bc  000146bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046c4  080046c4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c4  080046c4  000146c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080046cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027c0  20000068  08004734  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002828  08004734  00022828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000800a  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000197b  00000000  00000000  000280e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000810  00000000  00000000  00029a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000614  00000000  00000000  0002a270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002af3  00000000  00000000  0002a884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b4c4  00000000  00000000  0002d377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008763e  00000000  00000000  0003883b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002838  00000000  00000000  000bfe7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000c26b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004650 	.word	0x08004650

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004650 	.word	0x08004650

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b970 	b.w	8000db4 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	460d      	mov	r5, r1
 8000af4:	4604      	mov	r4, r0
 8000af6:	460f      	mov	r7, r1
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d14a      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4694      	mov	ip, r2
 8000b00:	d965      	bls.n	8000bce <__udivmoddi4+0xe2>
 8000b02:	fab2 f382 	clz	r3, r2
 8000b06:	b143      	cbz	r3, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b0c:	f1c3 0220 	rsb	r2, r3, #32
 8000b10:	409f      	lsls	r7, r3
 8000b12:	fa20 f202 	lsr.w	r2, r0, r2
 8000b16:	4317      	orrs	r7, r2
 8000b18:	409c      	lsls	r4, r3
 8000b1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b1e:	fa1f f58c 	uxth.w	r5, ip
 8000b22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b26:	0c22      	lsrs	r2, r4, #16
 8000b28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b30:	fb01 f005 	mul.w	r0, r1, r5
 8000b34:	4290      	cmp	r0, r2
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x62>
 8000b38:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b40:	f080 811c 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b44:	4290      	cmp	r0, r2
 8000b46:	f240 8119 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b4a:	3902      	subs	r1, #2
 8000b4c:	4462      	add	r2, ip
 8000b4e:	1a12      	subs	r2, r2, r0
 8000b50:	b2a4      	uxth	r4, r4
 8000b52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b5e:	fb00 f505 	mul.w	r5, r0, r5
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	d90a      	bls.n	8000b7c <__udivmoddi4+0x90>
 8000b66:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b6e:	f080 8107 	bcs.w	8000d80 <__udivmoddi4+0x294>
 8000b72:	42a5      	cmp	r5, r4
 8000b74:	f240 8104 	bls.w	8000d80 <__udivmoddi4+0x294>
 8000b78:	4464      	add	r4, ip
 8000b7a:	3802      	subs	r0, #2
 8000b7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b80:	1b64      	subs	r4, r4, r5
 8000b82:	2100      	movs	r1, #0
 8000b84:	b11e      	cbz	r6, 8000b8e <__udivmoddi4+0xa2>
 8000b86:	40dc      	lsrs	r4, r3
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0xbc>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80ed 	beq.w	8000d76 <__udivmoddi4+0x28a>
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba8:	fab3 f183 	clz	r1, r3
 8000bac:	2900      	cmp	r1, #0
 8000bae:	d149      	bne.n	8000c44 <__udivmoddi4+0x158>
 8000bb0:	42ab      	cmp	r3, r5
 8000bb2:	d302      	bcc.n	8000bba <__udivmoddi4+0xce>
 8000bb4:	4282      	cmp	r2, r0
 8000bb6:	f200 80f8 	bhi.w	8000daa <__udivmoddi4+0x2be>
 8000bba:	1a84      	subs	r4, r0, r2
 8000bbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	4617      	mov	r7, r2
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d0e2      	beq.n	8000b8e <__udivmoddi4+0xa2>
 8000bc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bcc:	e7df      	b.n	8000b8e <__udivmoddi4+0xa2>
 8000bce:	b902      	cbnz	r2, 8000bd2 <__udivmoddi4+0xe6>
 8000bd0:	deff      	udf	#255	; 0xff
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f040 8090 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bdc:	1a8a      	subs	r2, r1, r2
 8000bde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be2:	fa1f fe8c 	uxth.w	lr, ip
 8000be6:	2101      	movs	r1, #1
 8000be8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bec:	fb07 2015 	mls	r0, r7, r5, r2
 8000bf0:	0c22      	lsrs	r2, r4, #16
 8000bf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bf6:	fb0e f005 	mul.w	r0, lr, r5
 8000bfa:	4290      	cmp	r0, r2
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000bfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000c02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4290      	cmp	r0, r2
 8000c0a:	f200 80cb 	bhi.w	8000da4 <__udivmoddi4+0x2b8>
 8000c0e:	4645      	mov	r5, r8
 8000c10:	1a12      	subs	r2, r2, r0
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c18:	fb07 2210 	mls	r2, r7, r0, r2
 8000c1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c20:	fb0e fe00 	mul.w	lr, lr, r0
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x14e>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c30:	d202      	bcs.n	8000c38 <__udivmoddi4+0x14c>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f200 80bb 	bhi.w	8000dae <__udivmoddi4+0x2c2>
 8000c38:	4610      	mov	r0, r2
 8000c3a:	eba4 040e 	sub.w	r4, r4, lr
 8000c3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c42:	e79f      	b.n	8000b84 <__udivmoddi4+0x98>
 8000c44:	f1c1 0720 	rsb	r7, r1, #32
 8000c48:	408b      	lsls	r3, r1
 8000c4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c52:	fa05 f401 	lsl.w	r4, r5, r1
 8000c56:	fa20 f307 	lsr.w	r3, r0, r7
 8000c5a:	40fd      	lsrs	r5, r7
 8000c5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c60:	4323      	orrs	r3, r4
 8000c62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c66:	fa1f fe8c 	uxth.w	lr, ip
 8000c6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c6e:	0c1c      	lsrs	r4, r3, #16
 8000c70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c74:	fb08 f50e 	mul.w	r5, r8, lr
 8000c78:	42a5      	cmp	r5, r4
 8000c7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c8c:	f080 8088 	bcs.w	8000da0 <__udivmoddi4+0x2b4>
 8000c90:	42a5      	cmp	r5, r4
 8000c92:	f240 8085 	bls.w	8000da0 <__udivmoddi4+0x2b4>
 8000c96:	f1a8 0802 	sub.w	r8, r8, #2
 8000c9a:	4464      	add	r4, ip
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	b29d      	uxth	r5, r3
 8000ca0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ca4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ca8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cbc:	d26c      	bcs.n	8000d98 <__udivmoddi4+0x2ac>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	d96a      	bls.n	8000d98 <__udivmoddi4+0x2ac>
 8000cc2:	3b02      	subs	r3, #2
 8000cc4:	4464      	add	r4, ip
 8000cc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cca:	fba3 9502 	umull	r9, r5, r3, r2
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	42ac      	cmp	r4, r5
 8000cd4:	46c8      	mov	r8, r9
 8000cd6:	46ae      	mov	lr, r5
 8000cd8:	d356      	bcc.n	8000d88 <__udivmoddi4+0x29c>
 8000cda:	d053      	beq.n	8000d84 <__udivmoddi4+0x298>
 8000cdc:	b156      	cbz	r6, 8000cf4 <__udivmoddi4+0x208>
 8000cde:	ebb0 0208 	subs.w	r2, r0, r8
 8000ce2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ce6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cea:	40ca      	lsrs	r2, r1
 8000cec:	40cc      	lsrs	r4, r1
 8000cee:	4317      	orrs	r7, r2
 8000cf0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfc:	f1c3 0120 	rsb	r1, r3, #32
 8000d00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d04:	fa20 f201 	lsr.w	r2, r0, r1
 8000d08:	fa25 f101 	lsr.w	r1, r5, r1
 8000d0c:	409d      	lsls	r5, r3
 8000d0e:	432a      	orrs	r2, r5
 8000d10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d14:	fa1f fe8c 	uxth.w	lr, ip
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d20:	0c11      	lsrs	r1, r2, #16
 8000d22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d26:	fb00 f50e 	mul.w	r5, r0, lr
 8000d2a:	428d      	cmp	r5, r1
 8000d2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x258>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d3a:	d22f      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d3c:	428d      	cmp	r5, r1
 8000d3e:	d92d      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d40:	3802      	subs	r0, #2
 8000d42:	4461      	add	r1, ip
 8000d44:	1b49      	subs	r1, r1, r5
 8000d46:	b292      	uxth	r2, r2
 8000d48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d54:	fb05 f10e 	mul.w	r1, r5, lr
 8000d58:	4291      	cmp	r1, r2
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x282>
 8000d5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d64:	d216      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d66:	4291      	cmp	r1, r2
 8000d68:	d914      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d6a:	3d02      	subs	r5, #2
 8000d6c:	4462      	add	r2, ip
 8000d6e:	1a52      	subs	r2, r2, r1
 8000d70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d74:	e738      	b.n	8000be8 <__udivmoddi4+0xfc>
 8000d76:	4631      	mov	r1, r6
 8000d78:	4630      	mov	r0, r6
 8000d7a:	e708      	b.n	8000b8e <__udivmoddi4+0xa2>
 8000d7c:	4639      	mov	r1, r7
 8000d7e:	e6e6      	b.n	8000b4e <__udivmoddi4+0x62>
 8000d80:	4610      	mov	r0, r2
 8000d82:	e6fb      	b.n	8000b7c <__udivmoddi4+0x90>
 8000d84:	4548      	cmp	r0, r9
 8000d86:	d2a9      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d88:	ebb9 0802 	subs.w	r8, r9, r2
 8000d8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d90:	3b01      	subs	r3, #1
 8000d92:	e7a3      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d94:	4645      	mov	r5, r8
 8000d96:	e7ea      	b.n	8000d6e <__udivmoddi4+0x282>
 8000d98:	462b      	mov	r3, r5
 8000d9a:	e794      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9c:	4640      	mov	r0, r8
 8000d9e:	e7d1      	b.n	8000d44 <__udivmoddi4+0x258>
 8000da0:	46d0      	mov	r8, sl
 8000da2:	e77b      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da4:	3d02      	subs	r5, #2
 8000da6:	4462      	add	r2, ip
 8000da8:	e732      	b.n	8000c10 <__udivmoddi4+0x124>
 8000daa:	4608      	mov	r0, r1
 8000dac:	e70a      	b.n	8000bc4 <__udivmoddi4+0xd8>
 8000dae:	4464      	add	r4, ip
 8000db0:	3802      	subs	r0, #2
 8000db2:	e742      	b.n	8000c3a <__udivmoddi4+0x14e>

08000db4 <__aeabi_idiv0>:
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <BMP280_Pressure>:
HAL_StatusTypeDef checkT_read;

uint16_t pressure0;

void BMP280_Pressure (double *pressure)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af04      	add	r7, sp, #16
 8000dbe:	6078      	str	r0, [r7, #4]
//
//	pressure0 = ((dataP [0] << 8) | dataP [1]);
//
//	*pressure = pressure0 / 256.0;

	checkP_write = HAL_I2C_Mem_Write (&hi2c2, BMP280_ADDRESS << 1, PRESSURE_REG, I2C_MEMADD_SIZE_8BIT, dataP, 1, 1000);
 8000dc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc4:	9302      	str	r3, [sp, #8]
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	22f6      	movs	r2, #246	; 0xf6
 8000dd4:	21ec      	movs	r1, #236	; 0xec
 8000dd6:	4826      	ldr	r0, [pc, #152]	; (8000e70 <BMP280_Pressure+0xb8>)
 8000dd8:	f001 f9de 	bl	8002198 <HAL_I2C_Mem_Write>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <BMP280_Pressure+0xbc>)
 8000de2:	701a      	strb	r2, [r3, #0]
	if (checkP_write != HAL_OK)
 8000de4:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <BMP280_Pressure+0xbc>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d002      	beq.n	8000df2 <BMP280_Pressure+0x3a>
	{
		printf ("False");
 8000dec:	4822      	ldr	r0, [pc, #136]	; (8000e78 <BMP280_Pressure+0xc0>)
 8000dee:	f002 fdb9 	bl	8003964 <iprintf>
	}
	checkP_read = HAL_I2C_Mem_Read (&hi2c2, BMP280_ADDRESS << 1, PRESSURE_REG, I2C_MEMADD_SIZE_8BIT, dataP, 2, 1000);
 8000df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df6:	9302      	str	r3, [sp, #8]
 8000df8:	2302      	movs	r3, #2
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2301      	movs	r3, #1
 8000e04:	22f6      	movs	r2, #246	; 0xf6
 8000e06:	21ec      	movs	r1, #236	; 0xec
 8000e08:	4819      	ldr	r0, [pc, #100]	; (8000e70 <BMP280_Pressure+0xb8>)
 8000e0a:	f001 fabf 	bl	800238c <HAL_I2C_Mem_Read>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <BMP280_Pressure+0xc4>)
 8000e14:	701a      	strb	r2, [r3, #0]
	if (checkP_read != HAL_OK)
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <BMP280_Pressure+0xc4>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <BMP280_Pressure+0x6c>
	{
		printf ("False");
 8000e1e:	4816      	ldr	r0, [pc, #88]	; (8000e78 <BMP280_Pressure+0xc0>)
 8000e20:	f002 fda0 	bl	8003964 <iprintf>
	}

	pressure0 = ((uint32_t) dataP [0] << 12 | (uint32_t) dataP [1] << 4 | (uint32_t) dataP [2] >> 4);
 8000e24:	7b3b      	ldrb	r3, [r7, #12]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	031b      	lsls	r3, r3, #12
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	7b7b      	ldrb	r3, [r7, #13]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	011b      	lsls	r3, r3, #4
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	7bbb      	ldrb	r3, [r7, #14]
 8000e3a:	091b      	lsrs	r3, r3, #4
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <BMP280_Pressure+0xc8>)
 8000e46:	801a      	strh	r2, [r3, #0]

	*pressure = pressure0 / 256.0;
 8000e48:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <BMP280_Pressure+0xc8>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fb69 	bl	8000524 <__aeabi_i2d>
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <BMP280_Pressure+0xcc>)
 8000e58:	f7ff fcf8 	bl	800084c <__aeabi_ddiv>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20002680 	.word	0x20002680
 8000e74:	20000084 	.word	0x20000084
 8000e78:	08004668 	.word	0x08004668
 8000e7c:	20000085 	.word	0x20000085
 8000e80:	20000086 	.word	0x20000086
 8000e84:	40700000 	.word	0x40700000

08000e88 <initKalmanFilterAccel>:

float x_gyro = 0;
float P_gyro = 1;

void initKalmanFilterAccel(KalmanFilterAccel *filter) // Function to initialize Kalman filter for accelerometer
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
    filter->x = 0;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
    filter->P = 1;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e9e:	605a      	str	r2, [r3, #4]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <initKalmanFilterGyro>:

void initKalmanFilterGyro(KalmanFilterGyro *filter) // Function to initialize Kalman filter for gyroscope
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
    filter->x = 0;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
    filter->P = 1;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ec2:	605a      	str	r2, [r3, #4]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <KalmanFilterUpdateAccel>:

void KalmanFilterUpdateAccel(KalmanFilterAccel *filter, float z, float R, float H) // Function to update Kalman filter for accelerometer
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000edc:	edc7 0a01 	vstr	s1, [r7, #4]
 8000ee0:	ed87 1a00 	vstr	s2, [r7]
    float x_pred = filter->x;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	61fb      	str	r3, [r7, #28]
    float P_pred = filter->P;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	61bb      	str	r3, [r7, #24]

    float K = P_pred * H / (H * P_pred * H + R);
 8000ef0:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ef4:	edd7 7a00 	vldr	s15, [r7]
 8000ef8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000efc:	ed97 7a00 	vldr	s14, [r7]
 8000f00:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f08:	edd7 7a00 	vldr	s15, [r7]
 8000f0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f10:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f1c:	edc7 7a05 	vstr	s15, [r7, #20]
    filter->x = x_pred + K * (z - H * x_pred);
 8000f20:	ed97 7a00 	vldr	s14, [r7]
 8000f24:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f2c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f34:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	edc3 7a00 	vstr	s15, [r3]
    filter->P = (1 - K * H) * P_pred;
 8000f4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f4e:	edd7 7a00 	vldr	s15, [r7]
 8000f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000f6c:	bf00      	nop
 8000f6e:	3724      	adds	r7, #36	; 0x24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <KalmanFilterUpdateGyro>:

void KalmanFilterUpdateGyro(KalmanFilterGyro *filter, float z, float R, float H) // Function to update Kalman filter for gyroscope
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f84:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f88:	ed87 1a00 	vstr	s2, [r7]
    float x_pred = filter->x;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	61fb      	str	r3, [r7, #28]
    float P_pred = filter->P;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	61bb      	str	r3, [r7, #24]

    float K = P_pred * H / (H * P_pred * H + R);
 8000f98:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f9c:	edd7 7a00 	vldr	s15, [r7]
 8000fa0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000fa4:	ed97 7a00 	vldr	s14, [r7]
 8000fa8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb0:	edd7 7a00 	vldr	s15, [r7]
 8000fb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fc4:	edc7 7a05 	vstr	s15, [r7, #20]
    filter->x = x_pred + K * (z - H * x_pred);
 8000fc8:	ed97 7a00 	vldr	s14, [r7]
 8000fcc:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd4:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fe0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fe4:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	edc3 7a00 	vstr	s15, [r3]
    filter->P = (1 - K * H) * P_pred;
 8000ff2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ff6:	edd7 7a00 	vldr	s15, [r7]
 8000ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ffe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001002:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001006:	edd7 7a06 	vldr	s15, [r7, #24]
 800100a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001014:	bf00      	nop
 8001016:	3724      	adds	r7, #36	; 0x24
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <MPU6050_Read_Accel>:
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
    }
}

void MPU6050_Read_Accel(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af04      	add	r7, sp, #16
    KalmanFilterAccel accelFilter;
    initKalmanFilterAccel(&accelFilter);
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff2c 	bl	8000e88 <initKalmanFilterAccel>

    for (int i = 0; i < 100; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	e0c0      	b.n	80011b8 <MPU6050_Read_Accel+0x198>
    {
        uint8_t Rec_Data[6];
        HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	2306      	movs	r3, #6
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2301      	movs	r3, #1
 8001046:	223b      	movs	r2, #59	; 0x3b
 8001048:	21d0      	movs	r1, #208	; 0xd0
 800104a:	4860      	ldr	r0, [pc, #384]	; (80011cc <MPU6050_Read_Accel+0x1ac>)
 800104c:	f001 f99e 	bl	800238c <HAL_I2C_Mem_Read>

        Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001050:	793b      	ldrb	r3, [r7, #4]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	797b      	ldrb	r3, [r7, #5]
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21a      	sxth	r2, r3
 800105e:	4b5c      	ldr	r3, [pc, #368]	; (80011d0 <MPU6050_Read_Accel+0x1b0>)
 8001060:	801a      	strh	r2, [r3, #0]
        Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	b21b      	sxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b21a      	sxth	r2, r3
 8001070:	4b58      	ldr	r3, [pc, #352]	; (80011d4 <MPU6050_Read_Accel+0x1b4>)
 8001072:	801a      	strh	r2, [r3, #0]
        Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001074:	7a3b      	ldrb	r3, [r7, #8]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	7a7b      	ldrb	r3, [r7, #9]
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21a      	sxth	r2, r3
 8001082:	4b55      	ldr	r3, [pc, #340]	; (80011d8 <MPU6050_Read_Accel+0x1b8>)
 8001084:	801a      	strh	r2, [r3, #0]
        Ax = Accel_X_RAW / 16384.0;
 8001086:	4b52      	ldr	r3, [pc, #328]	; (80011d0 <MPU6050_Read_Accel+0x1b0>)
 8001088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fa49 	bl	8000524 <__aeabi_i2d>
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	4b51      	ldr	r3, [pc, #324]	; (80011dc <MPU6050_Read_Accel+0x1bc>)
 8001098:	f7ff fbd8 	bl	800084c <__aeabi_ddiv>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fcba 	bl	8000a1c <__aeabi_d2f>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a4d      	ldr	r2, [pc, #308]	; (80011e0 <MPU6050_Read_Accel+0x1c0>)
 80010ac:	6013      	str	r3, [r2, #0]
        Ay = Accel_Y_RAW / 16384.0;
 80010ae:	4b49      	ldr	r3, [pc, #292]	; (80011d4 <MPU6050_Read_Accel+0x1b4>)
 80010b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fa35 	bl	8000524 <__aeabi_i2d>
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	4b47      	ldr	r3, [pc, #284]	; (80011dc <MPU6050_Read_Accel+0x1bc>)
 80010c0:	f7ff fbc4 	bl	800084c <__aeabi_ddiv>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f7ff fca6 	bl	8000a1c <__aeabi_d2f>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4a44      	ldr	r2, [pc, #272]	; (80011e4 <MPU6050_Read_Accel+0x1c4>)
 80010d4:	6013      	str	r3, [r2, #0]
        Az = Accel_Z_RAW / 16384.0;
 80010d6:	4b40      	ldr	r3, [pc, #256]	; (80011d8 <MPU6050_Read_Accel+0x1b8>)
 80010d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa21 	bl	8000524 <__aeabi_i2d>
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	4b3d      	ldr	r3, [pc, #244]	; (80011dc <MPU6050_Read_Accel+0x1bc>)
 80010e8:	f7ff fbb0 	bl	800084c <__aeabi_ddiv>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f7ff fc92 	bl	8000a1c <__aeabi_d2f>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4a3b      	ldr	r2, [pc, #236]	; (80011e8 <MPU6050_Read_Accel+0x1c8>)
 80010fc:	6013      	str	r3, [r2, #0]

        arr_accel_x[i] = Ax;
 80010fe:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <MPU6050_Read_Accel+0x1c0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fa20 	bl	8000548 <__aeabi_f2d>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4837      	ldr	r0, [pc, #220]	; (80011ec <MPU6050_Read_Accel+0x1cc>)
 800110e:	6979      	ldr	r1, [r7, #20]
 8001110:	00c9      	lsls	r1, r1, #3
 8001112:	4401      	add	r1, r0
 8001114:	e9c1 2300 	strd	r2, r3, [r1]
        arr_accel_y[i] = Ay;
 8001118:	4b32      	ldr	r3, [pc, #200]	; (80011e4 <MPU6050_Read_Accel+0x1c4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fa13 	bl	8000548 <__aeabi_f2d>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4832      	ldr	r0, [pc, #200]	; (80011f0 <MPU6050_Read_Accel+0x1d0>)
 8001128:	6979      	ldr	r1, [r7, #20]
 800112a:	00c9      	lsls	r1, r1, #3
 800112c:	4401      	add	r1, r0
 800112e:	e9c1 2300 	strd	r2, r3, [r1]
        arr_accel_z[i] = Az;
 8001132:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <MPU6050_Read_Accel+0x1c8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fa06 	bl	8000548 <__aeabi_f2d>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	482c      	ldr	r0, [pc, #176]	; (80011f4 <MPU6050_Read_Accel+0x1d4>)
 8001142:	6979      	ldr	r1, [r7, #20]
 8001144:	00c9      	lsls	r1, r1, #3
 8001146:	4401      	add	r1, r0
 8001148:	e9c1 2300 	strd	r2, r3, [r1]

        KalmanFilterUpdateAccel(&accelFilter, Ax, R_ACCEL, 1); // Apply Kalman filter to accelerometer data
 800114c:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <MPU6050_Read_Accel+0x1c0>)
 800114e:	edd3 7a00 	vldr	s15, [r3]
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800115a:	eddf 0a27 	vldr	s1, [pc, #156]	; 80011f8 <MPU6050_Read_Accel+0x1d8>
 800115e:	eeb0 0a67 	vmov.f32	s0, s15
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff feb4 	bl	8000ed0 <KalmanFilterUpdateAccel>

        Kalman_accel_x[i] = accelFilter.x;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f9ec 	bl	8000548 <__aeabi_f2d>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4821      	ldr	r0, [pc, #132]	; (80011fc <MPU6050_Read_Accel+0x1dc>)
 8001176:	6979      	ldr	r1, [r7, #20]
 8001178:	00c9      	lsls	r1, r1, #3
 800117a:	4401      	add	r1, r0
 800117c:	e9c1 2300 	strd	r2, r3, [r1]
        Kalman_accel_y[i] = accelFilter.P;
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f9e0 	bl	8000548 <__aeabi_f2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	481c      	ldr	r0, [pc, #112]	; (8001200 <MPU6050_Read_Accel+0x1e0>)
 800118e:	6979      	ldr	r1, [r7, #20]
 8001190:	00c9      	lsls	r1, r1, #3
 8001192:	4401      	add	r1, r0
 8001194:	e9c1 2300 	strd	r2, r3, [r1]
        Kalman_accel_z[i] = Az;
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MPU6050_Read_Accel+0x1c8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9d3 	bl	8000548 <__aeabi_f2d>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4817      	ldr	r0, [pc, #92]	; (8001204 <MPU6050_Read_Accel+0x1e4>)
 80011a8:	6979      	ldr	r1, [r7, #20]
 80011aa:	00c9      	lsls	r1, r1, #3
 80011ac:	4401      	add	r1, r0
 80011ae:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < 100; i++)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3301      	adds	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	2b63      	cmp	r3, #99	; 0x63
 80011bc:	f77f af3b 	ble.w	8001036 <MPU6050_Read_Accel+0x16>
    }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000262c 	.word	0x2000262c
 80011d0:	20002620 	.word	0x20002620
 80011d4:	20002622 	.word	0x20002622
 80011d8:	20002624 	.word	0x20002624
 80011dc:	40d00000 	.word	0x40d00000
 80011e0:	20002608 	.word	0x20002608
 80011e4:	2000260c 	.word	0x2000260c
 80011e8:	20002610 	.word	0x20002610
 80011ec:	20001348 	.word	0x20001348
 80011f0:	20001668 	.word	0x20001668
 80011f4:	20001988 	.word	0x20001988
 80011f8:	3c23d70a 	.word	0x3c23d70a
 80011fc:	20000088 	.word	0x20000088
 8001200:	200003a8 	.word	0x200003a8
 8001204:	200006c8 	.word	0x200006c8

08001208 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af04      	add	r7, sp, #16
    KalmanFilterGyro gyroFilter;
    initKalmanFilterGyro(&gyroFilter);
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fe4a 	bl	8000eac <initKalmanFilterGyro>

    for (int i = 0; i < 100; i++)
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	e0c0      	b.n	80013a0 <MPU6050_Read_Gyro+0x198>
    {
        uint8_t Rec_Data[6];
        HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001222:	9302      	str	r3, [sp, #8]
 8001224:	2306      	movs	r3, #6
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2301      	movs	r3, #1
 800122e:	2243      	movs	r2, #67	; 0x43
 8001230:	21d0      	movs	r1, #208	; 0xd0
 8001232:	4863      	ldr	r0, [pc, #396]	; (80013c0 <MPU6050_Read_Gyro+0x1b8>)
 8001234:	f001 f8aa 	bl	800238c <HAL_I2C_Mem_Read>
        Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001238:	793b      	ldrb	r3, [r7, #4]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21a      	sxth	r2, r3
 800123e:	797b      	ldrb	r3, [r7, #5]
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21a      	sxth	r2, r3
 8001246:	4b5f      	ldr	r3, [pc, #380]	; (80013c4 <MPU6050_Read_Gyro+0x1bc>)
 8001248:	801a      	strh	r2, [r3, #0]
        Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800124a:	79bb      	ldrb	r3, [r7, #6]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21a      	sxth	r2, r3
 8001258:	4b5b      	ldr	r3, [pc, #364]	; (80013c8 <MPU6050_Read_Gyro+0x1c0>)
 800125a:	801a      	strh	r2, [r3, #0]
        Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800125c:	7a3b      	ldrb	r3, [r7, #8]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	7a7b      	ldrb	r3, [r7, #9]
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21a      	sxth	r2, r3
 800126a:	4b58      	ldr	r3, [pc, #352]	; (80013cc <MPU6050_Read_Gyro+0x1c4>)
 800126c:	801a      	strh	r2, [r3, #0]
        Gx = Gyro_X_RAW / 131.0;
 800126e:	4b55      	ldr	r3, [pc, #340]	; (80013c4 <MPU6050_Read_Gyro+0x1bc>)
 8001270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f955 	bl	8000524 <__aeabi_i2d>
 800127a:	a34f      	add	r3, pc, #316	; (adr r3, 80013b8 <MPU6050_Read_Gyro+0x1b0>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f7ff fae4 	bl	800084c <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fbc6 	bl	8000a1c <__aeabi_d2f>
 8001290:	4603      	mov	r3, r0
 8001292:	4a4f      	ldr	r2, [pc, #316]	; (80013d0 <MPU6050_Read_Gyro+0x1c8>)
 8001294:	6013      	str	r3, [r2, #0]
        Gy = Gyro_Y_RAW / 131.0;
 8001296:	4b4c      	ldr	r3, [pc, #304]	; (80013c8 <MPU6050_Read_Gyro+0x1c0>)
 8001298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f941 	bl	8000524 <__aeabi_i2d>
 80012a2:	a345      	add	r3, pc, #276	; (adr r3, 80013b8 <MPU6050_Read_Gyro+0x1b0>)
 80012a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a8:	f7ff fad0 	bl	800084c <__aeabi_ddiv>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4610      	mov	r0, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	f7ff fbb2 	bl	8000a1c <__aeabi_d2f>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a46      	ldr	r2, [pc, #280]	; (80013d4 <MPU6050_Read_Gyro+0x1cc>)
 80012bc:	6013      	str	r3, [r2, #0]
        Gz = Gyro_Z_RAW / 131.0;
 80012be:	4b43      	ldr	r3, [pc, #268]	; (80013cc <MPU6050_Read_Gyro+0x1c4>)
 80012c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f92d 	bl	8000524 <__aeabi_i2d>
 80012ca:	a33b      	add	r3, pc, #236	; (adr r3, 80013b8 <MPU6050_Read_Gyro+0x1b0>)
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	f7ff fabc 	bl	800084c <__aeabi_ddiv>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fb9e 	bl	8000a1c <__aeabi_d2f>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a3d      	ldr	r2, [pc, #244]	; (80013d8 <MPU6050_Read_Gyro+0x1d0>)
 80012e4:	6013      	str	r3, [r2, #0]

        arr_gyro_x[i] = Gx;
 80012e6:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <MPU6050_Read_Gyro+0x1c8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f92c 	bl	8000548 <__aeabi_f2d>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4839      	ldr	r0, [pc, #228]	; (80013dc <MPU6050_Read_Gyro+0x1d4>)
 80012f6:	6979      	ldr	r1, [r7, #20]
 80012f8:	00c9      	lsls	r1, r1, #3
 80012fa:	4401      	add	r1, r0
 80012fc:	e9c1 2300 	strd	r2, r3, [r1]
        arr_gyro_y[i] = Gy;
 8001300:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <MPU6050_Read_Gyro+0x1cc>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f91f 	bl	8000548 <__aeabi_f2d>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4834      	ldr	r0, [pc, #208]	; (80013e0 <MPU6050_Read_Gyro+0x1d8>)
 8001310:	6979      	ldr	r1, [r7, #20]
 8001312:	00c9      	lsls	r1, r1, #3
 8001314:	4401      	add	r1, r0
 8001316:	e9c1 2300 	strd	r2, r3, [r1]
        arr_gyro_z[i] = Gz;
 800131a:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <MPU6050_Read_Gyro+0x1d0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f912 	bl	8000548 <__aeabi_f2d>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	482e      	ldr	r0, [pc, #184]	; (80013e4 <MPU6050_Read_Gyro+0x1dc>)
 800132a:	6979      	ldr	r1, [r7, #20]
 800132c:	00c9      	lsls	r1, r1, #3
 800132e:	4401      	add	r1, r0
 8001330:	e9c1 2300 	strd	r2, r3, [r1]

        KalmanFilterUpdateGyro(&gyroFilter, Gz, R_GYRO, 1); // Apply Kalman filter to gyroscope data
 8001334:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <MPU6050_Read_Gyro+0x1d0>)
 8001336:	edd3 7a00 	vldr	s15, [r3]
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001342:	eddf 0a29 	vldr	s1, [pc, #164]	; 80013e8 <MPU6050_Read_Gyro+0x1e0>
 8001346:	eeb0 0a67 	vmov.f32	s0, s15
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fe14 	bl	8000f78 <KalmanFilterUpdateGyro>

        Kalman_gyro_x[i] = gyroFilter.x;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f8f8 	bl	8000548 <__aeabi_f2d>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4823      	ldr	r0, [pc, #140]	; (80013ec <MPU6050_Read_Gyro+0x1e4>)
 800135e:	6979      	ldr	r1, [r7, #20]
 8001360:	00c9      	lsls	r1, r1, #3
 8001362:	4401      	add	r1, r0
 8001364:	e9c1 2300 	strd	r2, r3, [r1]
        Kalman_gyro_y[i] = gyroFilter.P;
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f8ec 	bl	8000548 <__aeabi_f2d>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	481e      	ldr	r0, [pc, #120]	; (80013f0 <MPU6050_Read_Gyro+0x1e8>)
 8001376:	6979      	ldr	r1, [r7, #20]
 8001378:	00c9      	lsls	r1, r1, #3
 800137a:	4401      	add	r1, r0
 800137c:	e9c1 2300 	strd	r2, r3, [r1]
        Kalman_gyro_z[i] = Gz;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MPU6050_Read_Gyro+0x1d0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f8df 	bl	8000548 <__aeabi_f2d>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4819      	ldr	r0, [pc, #100]	; (80013f4 <MPU6050_Read_Gyro+0x1ec>)
 8001390:	6979      	ldr	r1, [r7, #20]
 8001392:	00c9      	lsls	r1, r1, #3
 8001394:	4401      	add	r1, r0
 8001396:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < 100; i++)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3301      	adds	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	2b63      	cmp	r3, #99	; 0x63
 80013a4:	f77f af3b 	ble.w	800121e <MPU6050_Read_Gyro+0x16>
    }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	f3af 8000 	nop.w
 80013b8:	00000000 	.word	0x00000000
 80013bc:	40606000 	.word	0x40606000
 80013c0:	2000262c 	.word	0x2000262c
 80013c4:	20002626 	.word	0x20002626
 80013c8:	20002628 	.word	0x20002628
 80013cc:	2000262a 	.word	0x2000262a
 80013d0:	20002614 	.word	0x20002614
 80013d4:	20002618 	.word	0x20002618
 80013d8:	2000261c 	.word	0x2000261c
 80013dc:	20001ca8 	.word	0x20001ca8
 80013e0:	20001fc8 	.word	0x20001fc8
 80013e4:	200022e8 	.word	0x200022e8
 80013e8:	3c23d70a 	.word	0x3c23d70a
 80013ec:	200009e8 	.word	0x200009e8
 80013f0:	20000d08 	.word	0x20000d08
 80013f4:	20001028 	.word	0x20001028

080013f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fe:	f000 faab 	bl	8001958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001402:	f000 f80f 	bl	8001424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001406:	f000 f8c9 	bl	800159c <MX_GPIO_Init>
  MX_I2C1_Init();
 800140a:	f000 f86b 	bl	80014e4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800140e:	f000 f897 	bl	8001540 <MX_I2C2_Init>
  while (1)
  {
	/* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_Accel();
 8001412:	f7ff fe05 	bl	8001020 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 8001416:	f7ff fef7 	bl	8001208 <MPU6050_Read_Gyro>

//	  BME280_ReadPressure(&pressure);
//	  BME280_ReadTemperature (&temperature);
//	  BME280_Height (&start_pressure, &start_temperature, &pressure, &temperature, &height);

	  BMP280_Pressure (&pressure);
 800141a:	463b      	mov	r3, r7
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fccb 	bl	8000db8 <BMP280_Pressure>
	  MPU6050_Read_Accel();
 8001422:	e7f6      	b.n	8001412 <main+0x1a>

08001424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b094      	sub	sp, #80	; 0x50
 8001428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142a:	f107 0320 	add.w	r3, r7, #32
 800142e:	2230      	movs	r2, #48	; 0x30
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f002 faeb 	bl	8003a0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	4b23      	ldr	r3, [pc, #140]	; (80014dc <SystemClock_Config+0xb8>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	4a22      	ldr	r2, [pc, #136]	; (80014dc <SystemClock_Config+0xb8>)
 8001452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001456:	6413      	str	r3, [r2, #64]	; 0x40
 8001458:	4b20      	ldr	r3, [pc, #128]	; (80014dc <SystemClock_Config+0xb8>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <SystemClock_Config+0xbc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001470:	4a1b      	ldr	r2, [pc, #108]	; (80014e0 <SystemClock_Config+0xbc>)
 8001472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <SystemClock_Config+0xbc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001484:	2302      	movs	r3, #2
 8001486:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001488:	2301      	movs	r3, #1
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800148c:	2310      	movs	r3, #16
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001490:	2300      	movs	r3, #0
 8001492:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001494:	f107 0320 	add.w	r3, r7, #32
 8001498:	4618      	mov	r0, r3
 800149a:	f001 fd5d 	bl	8002f58 <HAL_RCC_OscConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80014a4:	f000 f894 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a8:	230f      	movs	r3, #15
 80014aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f001 ffc0 	bl	8003448 <HAL_RCC_ClockConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80014ce:	f000 f87f 	bl	80015d0 <Error_Handler>
  }
}
 80014d2:	bf00      	nop
 80014d4:	3750      	adds	r7, #80	; 0x50
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40007000 	.word	0x40007000

080014e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_I2C1_Init+0x50>)
 80014ea:	4a13      	ldr	r2, [pc, #76]	; (8001538 <MX_I2C1_Init+0x54>)
 80014ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_I2C1_Init+0x50>)
 80014f0:	4a12      	ldr	r2, [pc, #72]	; (800153c <MX_I2C1_Init+0x58>)
 80014f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_I2C1_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_I2C1_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_I2C1_Init+0x50>)
 8001502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001506:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <MX_I2C1_Init+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_I2C1_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <MX_I2C1_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_I2C1_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_I2C1_Init+0x50>)
 8001522:	f000 fcf5 	bl	8001f10 <HAL_I2C_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800152c:	f000 f850 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	2000262c 	.word	0x2000262c
 8001538:	40005400 	.word	0x40005400
 800153c:	000186a0 	.word	0x000186a0

08001540 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_I2C2_Init+0x50>)
 8001546:	4a13      	ldr	r2, [pc, #76]	; (8001594 <MX_I2C2_Init+0x54>)
 8001548:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_I2C2_Init+0x50>)
 800154c:	4a12      	ldr	r2, [pc, #72]	; (8001598 <MX_I2C2_Init+0x58>)
 800154e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_I2C2_Init+0x50>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_I2C2_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_I2C2_Init+0x50>)
 800155e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001562:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <MX_I2C2_Init+0x50>)
 8001566:	2200      	movs	r2, #0
 8001568:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_I2C2_Init+0x50>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <MX_I2C2_Init+0x50>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_I2C2_Init+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <MX_I2C2_Init+0x50>)
 800157e:	f000 fcc7 	bl	8001f10 <HAL_I2C_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001588:	f000 f822 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20002680 	.word	0x20002680
 8001594:	40005800 	.word	0x40005800
 8001598:	000186a0 	.word	0x000186a0

0800159c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_GPIO_Init+0x30>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a08      	ldr	r2, [pc, #32]	; (80015cc <MX_GPIO_Init+0x30>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_GPIO_Init+0x30>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <Error_Handler+0x8>
	...

080015dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_MspInit+0x4c>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <HAL_MspInit+0x4c>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f0:	6453      	str	r3, [r2, #68]	; 0x44
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HAL_MspInit+0x4c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_MspInit+0x4c>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <HAL_MspInit+0x4c>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_MspInit+0x4c>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800

0800162c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08c      	sub	sp, #48	; 0x30
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 031c 	add.w	r3, r7, #28
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a3a      	ldr	r2, [pc, #232]	; (8001734 <HAL_I2C_MspInit+0x108>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d12c      	bne.n	80016a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	4b39      	ldr	r3, [pc, #228]	; (8001738 <HAL_I2C_MspInit+0x10c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a38      	ldr	r2, [pc, #224]	; (8001738 <HAL_I2C_MspInit+0x10c>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b36      	ldr	r3, [pc, #216]	; (8001738 <HAL_I2C_MspInit+0x10c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	61bb      	str	r3, [r7, #24]
 8001668:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800166a:	23c0      	movs	r3, #192	; 0xc0
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166e:	2312      	movs	r3, #18
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800167a:	2304      	movs	r3, #4
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	482d      	ldr	r0, [pc, #180]	; (800173c <HAL_I2C_MspInit+0x110>)
 8001686:	f000 fabf 	bl	8001c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <HAL_I2C_MspInit+0x10c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a29      	ldr	r2, [pc, #164]	; (8001738 <HAL_I2C_MspInit+0x10c>)
 8001694:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b27      	ldr	r3, [pc, #156]	; (8001738 <HAL_I2C_MspInit+0x10c>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016a6:	e041      	b.n	800172c <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a24      	ldr	r2, [pc, #144]	; (8001740 <HAL_I2C_MspInit+0x114>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d13c      	bne.n	800172c <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <HAL_I2C_MspInit+0x10c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <HAL_I2C_MspInit+0x10c>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <HAL_I2C_MspInit+0x10c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d4:	2312      	movs	r3, #18
 80016d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016e0:	2304      	movs	r3, #4
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	4814      	ldr	r0, [pc, #80]	; (800173c <HAL_I2C_MspInit+0x110>)
 80016ec:	f000 fa8c 	bl	8001c08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016f0:	2308      	movs	r3, #8
 80016f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f4:	2312      	movs	r3, #18
 80016f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fc:	2303      	movs	r3, #3
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001700:	2309      	movs	r3, #9
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	4619      	mov	r1, r3
 800170a:	480c      	ldr	r0, [pc, #48]	; (800173c <HAL_I2C_MspInit+0x110>)
 800170c:	f000 fa7c 	bl	8001c08 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <HAL_I2C_MspInit+0x10c>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	4a07      	ldr	r2, [pc, #28]	; (8001738 <HAL_I2C_MspInit+0x10c>)
 800171a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800171e:	6413      	str	r3, [r2, #64]	; 0x40
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_I2C_MspInit+0x10c>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	bf00      	nop
 800172e:	3730      	adds	r7, #48	; 0x30
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40005400 	.word	0x40005400
 8001738:	40023800 	.word	0x40023800
 800173c:	40020400 	.word	0x40020400
 8001740:	40005800 	.word	0x40005800

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001748:	e7fe      	b.n	8001748 <NMI_Handler+0x4>

0800174a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <HardFault_Handler+0x4>

08001750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <MemManage_Handler+0x4>

08001756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <UsageFault_Handler+0x4>

08001762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001790:	f000 f934 	bl	80019fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}

08001798 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	e00a      	b.n	80017c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017aa:	f3af 8000 	nop.w
 80017ae:	4601      	mov	r1, r0
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	60ba      	str	r2, [r7, #8]
 80017b6:	b2ca      	uxtb	r2, r1
 80017b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dbf0      	blt.n	80017aa <_read+0x12>
  }

  return len;
 80017c8:	687b      	ldr	r3, [r7, #4]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	e009      	b.n	80017f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	60ba      	str	r2, [r7, #8]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dbf1      	blt.n	80017e4 <_write+0x12>
  }
  return len;
 8001800:	687b      	ldr	r3, [r7, #4]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_close>:

int _close(int file)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001832:	605a      	str	r2, [r3, #4]
  return 0;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <_isatty>:

int _isatty(int file)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800184a:	2301      	movs	r3, #1
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800187c:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <_sbrk+0x5c>)
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <_sbrk+0x60>)
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <_sbrk+0x64>)
 8001892:	4a12      	ldr	r2, [pc, #72]	; (80018dc <_sbrk+0x68>)
 8001894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d207      	bcs.n	80018b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a4:	f002 f902 	bl	8003aac <__errno>
 80018a8:	4603      	mov	r3, r0
 80018aa:	220c      	movs	r2, #12
 80018ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	e009      	b.n	80018c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <_sbrk+0x64>)
 80018c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20018000 	.word	0x20018000
 80018d4:	00000400 	.word	0x00000400
 80018d8:	200026d4 	.word	0x200026d4
 80018dc:	20002828 	.word	0x20002828

080018e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <SystemInit+0x20>)
 80018e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <SystemInit+0x20>)
 80018ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8001904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800193c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001908:	f7ff ffea 	bl	80018e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800190c:	480c      	ldr	r0, [pc, #48]	; (8001940 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800190e:	490d      	ldr	r1, [pc, #52]	; (8001944 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001910:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001914:	e002      	b.n	800191c <LoopCopyDataInit>

08001916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191a:	3304      	adds	r3, #4

0800191c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800191c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001920:	d3f9      	bcc.n	8001916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001924:	4c0a      	ldr	r4, [pc, #40]	; (8001950 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001928:	e001      	b.n	800192e <LoopFillZerobss>

0800192a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800192c:	3204      	adds	r2, #4

0800192e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001930:	d3fb      	bcc.n	800192a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001932:	f002 f8c1 	bl	8003ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001936:	f7ff fd5f 	bl	80013f8 <main>
  bx  lr    
 800193a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800193c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001944:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001948:	080046cc 	.word	0x080046cc
  ldr r2, =_sbss
 800194c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001950:	20002828 	.word	0x20002828

08001954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001954:	e7fe      	b.n	8001954 <ADC_IRQHandler>
	...

08001958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800195c:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_Init+0x40>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <HAL_Init+0x40>)
 8001962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_Init+0x40>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <HAL_Init+0x40>)
 800196e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_Init+0x40>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a07      	ldr	r2, [pc, #28]	; (8001998 <HAL_Init+0x40>)
 800197a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001980:	2003      	movs	r0, #3
 8001982:	f000 f90d 	bl	8001ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001986:	200f      	movs	r0, #15
 8001988:	f000 f808 	bl	800199c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800198c:	f7ff fe26 	bl	80015dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023c00 	.word	0x40023c00

0800199c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_InitTick+0x54>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_InitTick+0x58>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f917 	bl	8001bee <HAL_SYSTICK_Config>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00e      	b.n	80019e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b0f      	cmp	r3, #15
 80019ce:	d80a      	bhi.n	80019e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d0:	2200      	movs	r2, #0
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f000 f8ed 	bl	8001bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019dc:	4a06      	ldr	r2, [pc, #24]	; (80019f8 <HAL_InitTick+0x5c>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e000      	b.n	80019e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000008 	.word	0x20000008
 80019f8:	20000004 	.word	0x20000004

080019fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_IncTick+0x20>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_IncTick+0x24>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <HAL_IncTick+0x24>)
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000008 	.word	0x20000008
 8001a20:	200026d8 	.word	0x200026d8

08001a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return uwTick;
 8001a28:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <HAL_GetTick+0x14>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	200026d8 	.word	0x200026d8

08001a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6e:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	60d3      	str	r3, [r2, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <__NVIC_GetPriorityGrouping+0x18>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	f003 0307 	and.w	r3, r3, #7
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	6039      	str	r1, [r7, #0]
 8001aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	db0a      	blt.n	8001aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	490c      	ldr	r1, [pc, #48]	; (8001aec <__NVIC_SetPriority+0x4c>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	0112      	lsls	r2, r2, #4
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac8:	e00a      	b.n	8001ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4908      	ldr	r1, [pc, #32]	; (8001af0 <__NVIC_SetPriority+0x50>)
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	3b04      	subs	r3, #4
 8001ad8:	0112      	lsls	r2, r2, #4
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	440b      	add	r3, r1
 8001ade:	761a      	strb	r2, [r3, #24]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000e100 	.word	0xe000e100
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f1c3 0307 	rsb	r3, r3, #7
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	bf28      	it	cs
 8001b12:	2304      	movcs	r3, #4
 8001b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d902      	bls.n	8001b24 <NVIC_EncodePriority+0x30>
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3b03      	subs	r3, #3
 8001b22:	e000      	b.n	8001b26 <NVIC_EncodePriority+0x32>
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	401a      	ands	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	43d9      	mvns	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	4313      	orrs	r3, r2
         );
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3724      	adds	r7, #36	; 0x24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b6c:	d301      	bcc.n	8001b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00f      	b.n	8001b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <SysTick_Config+0x40>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7a:	210f      	movs	r1, #15
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f7ff ff8e 	bl	8001aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <SysTick_Config+0x40>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8a:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <SysTick_Config+0x40>)
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	e000e010 	.word	0xe000e010

08001ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff47 	bl	8001a3c <__NVIC_SetPriorityGrouping>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc8:	f7ff ff5c 	bl	8001a84 <__NVIC_GetPriorityGrouping>
 8001bcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	6978      	ldr	r0, [r7, #20]
 8001bd4:	f7ff ff8e 	bl	8001af4 <NVIC_EncodePriority>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff5d 	bl	8001aa0 <__NVIC_SetPriority>
}
 8001be6:	bf00      	nop
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffb0 	bl	8001b5c <SysTick_Config>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	e159      	b.n	8001ed8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c24:	2201      	movs	r2, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	f040 8148 	bne.w	8001ed2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d005      	beq.n	8001c5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d130      	bne.n	8001cbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c90:	2201      	movs	r2, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 0201 	and.w	r2, r3, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d017      	beq.n	8001cf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d123      	bne.n	8001d4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	08da      	lsrs	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3208      	adds	r2, #8
 8001d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	220f      	movs	r2, #15
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	08da      	lsrs	r2, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3208      	adds	r2, #8
 8001d46:	69b9      	ldr	r1, [r7, #24]
 8001d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0203 	and.w	r2, r3, #3
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80a2 	beq.w	8001ed2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b57      	ldr	r3, [pc, #348]	; (8001ef0 <HAL_GPIO_Init+0x2e8>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	4a56      	ldr	r2, [pc, #344]	; (8001ef0 <HAL_GPIO_Init+0x2e8>)
 8001d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9e:	4b54      	ldr	r3, [pc, #336]	; (8001ef0 <HAL_GPIO_Init+0x2e8>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001daa:	4a52      	ldr	r2, [pc, #328]	; (8001ef4 <HAL_GPIO_Init+0x2ec>)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a49      	ldr	r2, [pc, #292]	; (8001ef8 <HAL_GPIO_Init+0x2f0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d019      	beq.n	8001e0a <HAL_GPIO_Init+0x202>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a48      	ldr	r2, [pc, #288]	; (8001efc <HAL_GPIO_Init+0x2f4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d013      	beq.n	8001e06 <HAL_GPIO_Init+0x1fe>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a47      	ldr	r2, [pc, #284]	; (8001f00 <HAL_GPIO_Init+0x2f8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00d      	beq.n	8001e02 <HAL_GPIO_Init+0x1fa>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a46      	ldr	r2, [pc, #280]	; (8001f04 <HAL_GPIO_Init+0x2fc>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d007      	beq.n	8001dfe <HAL_GPIO_Init+0x1f6>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a45      	ldr	r2, [pc, #276]	; (8001f08 <HAL_GPIO_Init+0x300>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d101      	bne.n	8001dfa <HAL_GPIO_Init+0x1f2>
 8001df6:	2304      	movs	r3, #4
 8001df8:	e008      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	e006      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e004      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e002      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	f002 0203 	and.w	r2, r2, #3
 8001e12:	0092      	lsls	r2, r2, #2
 8001e14:	4093      	lsls	r3, r2
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e1c:	4935      	ldr	r1, [pc, #212]	; (8001ef4 <HAL_GPIO_Init+0x2ec>)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	3302      	adds	r3, #2
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e2a:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e4e:	4a2f      	ldr	r2, [pc, #188]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e54:	4b2d      	ldr	r3, [pc, #180]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e78:	4a24      	ldr	r2, [pc, #144]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e7e:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea2:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea8:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ecc:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2b0f      	cmp	r3, #15
 8001edc:	f67f aea2 	bls.w	8001c24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3724      	adds	r7, #36	; 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40013800 	.word	0x40013800
 8001ef8:	40020000 	.word	0x40020000
 8001efc:	40020400 	.word	0x40020400
 8001f00:	40020800 	.word	0x40020800
 8001f04:	40020c00 	.word	0x40020c00
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40013c00 	.word	0x40013c00

08001f10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e12b      	b.n	800217a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff fb78 	bl	800162c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2224      	movs	r2, #36	; 0x24
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0201 	bic.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f74:	f001 fc20 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 8001f78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4a81      	ldr	r2, [pc, #516]	; (8002184 <HAL_I2C_Init+0x274>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d807      	bhi.n	8001f94 <HAL_I2C_Init+0x84>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a80      	ldr	r2, [pc, #512]	; (8002188 <HAL_I2C_Init+0x278>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	bf94      	ite	ls
 8001f8c:	2301      	movls	r3, #1
 8001f8e:	2300      	movhi	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	e006      	b.n	8001fa2 <HAL_I2C_Init+0x92>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4a7d      	ldr	r2, [pc, #500]	; (800218c <HAL_I2C_Init+0x27c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	bf94      	ite	ls
 8001f9c:	2301      	movls	r3, #1
 8001f9e:	2300      	movhi	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e0e7      	b.n	800217a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4a78      	ldr	r2, [pc, #480]	; (8002190 <HAL_I2C_Init+0x280>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	0c9b      	lsrs	r3, r3, #18
 8001fb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4a6a      	ldr	r2, [pc, #424]	; (8002184 <HAL_I2C_Init+0x274>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d802      	bhi.n	8001fe4 <HAL_I2C_Init+0xd4>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	e009      	b.n	8001ff8 <HAL_I2C_Init+0xe8>
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	4a69      	ldr	r2, [pc, #420]	; (8002194 <HAL_I2C_Init+0x284>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800200a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	495c      	ldr	r1, [pc, #368]	; (8002184 <HAL_I2C_Init+0x274>)
 8002014:	428b      	cmp	r3, r1
 8002016:	d819      	bhi.n	800204c <HAL_I2C_Init+0x13c>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1e59      	subs	r1, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fbb1 f3f3 	udiv	r3, r1, r3
 8002026:	1c59      	adds	r1, r3, #1
 8002028:	f640 73fc 	movw	r3, #4092	; 0xffc
 800202c:	400b      	ands	r3, r1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_I2C_Init+0x138>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1e59      	subs	r1, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002040:	3301      	adds	r3, #1
 8002042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002046:	e051      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 8002048:	2304      	movs	r3, #4
 800204a:	e04f      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d111      	bne.n	8002078 <HAL_I2C_Init+0x168>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1e58      	subs	r0, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	440b      	add	r3, r1
 8002062:	fbb0 f3f3 	udiv	r3, r0, r3
 8002066:	3301      	adds	r3, #1
 8002068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf0c      	ite	eq
 8002070:	2301      	moveq	r3, #1
 8002072:	2300      	movne	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	e012      	b.n	800209e <HAL_I2C_Init+0x18e>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1e58      	subs	r0, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	0099      	lsls	r1, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	fbb0 f3f3 	udiv	r3, r0, r3
 800208e:	3301      	adds	r3, #1
 8002090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf0c      	ite	eq
 8002098:	2301      	moveq	r3, #1
 800209a:	2300      	movne	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Init+0x196>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e022      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10e      	bne.n	80020cc <HAL_I2C_Init+0x1bc>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1e58      	subs	r0, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6859      	ldr	r1, [r3, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	440b      	add	r3, r1
 80020bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ca:	e00f      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1e58      	subs	r0, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	0099      	lsls	r1, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	6809      	ldr	r1, [r1, #0]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800211a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6911      	ldr	r1, [r2, #16]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68d2      	ldr	r2, [r2, #12]
 8002126:	4311      	orrs	r1, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	430b      	orrs	r3, r1
 800212e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	000186a0 	.word	0x000186a0
 8002188:	001e847f 	.word	0x001e847f
 800218c:	003d08ff 	.word	0x003d08ff
 8002190:	431bde83 	.word	0x431bde83
 8002194:	10624dd3 	.word	0x10624dd3

08002198 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	4608      	mov	r0, r1
 80021a2:	4611      	mov	r1, r2
 80021a4:	461a      	mov	r2, r3
 80021a6:	4603      	mov	r3, r0
 80021a8:	817b      	strh	r3, [r7, #10]
 80021aa:	460b      	mov	r3, r1
 80021ac:	813b      	strh	r3, [r7, #8]
 80021ae:	4613      	mov	r3, r2
 80021b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021b2:	f7ff fc37 	bl	8001a24 <HAL_GetTick>
 80021b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	f040 80d9 	bne.w	8002378 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2319      	movs	r3, #25
 80021cc:	2201      	movs	r2, #1
 80021ce:	496d      	ldr	r1, [pc, #436]	; (8002384 <HAL_I2C_Mem_Write+0x1ec>)
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 fc8b 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
 80021de:	e0cc      	b.n	800237a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_I2C_Mem_Write+0x56>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e0c5      	b.n	800237a <HAL_I2C_Mem_Write+0x1e2>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d007      	beq.n	8002214 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002222:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2221      	movs	r2, #33	; 0x21
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2240      	movs	r2, #64	; 0x40
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a3a      	ldr	r2, [r7, #32]
 800223e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002244:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4a4d      	ldr	r2, [pc, #308]	; (8002388 <HAL_I2C_Mem_Write+0x1f0>)
 8002254:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002256:	88f8      	ldrh	r0, [r7, #6]
 8002258:	893a      	ldrh	r2, [r7, #8]
 800225a:	8979      	ldrh	r1, [r7, #10]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	4603      	mov	r3, r0
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fac2 	bl	80027f0 <I2C_RequestMemoryWrite>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d052      	beq.n	8002318 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e081      	b.n	800237a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 fd50 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00d      	beq.n	80022a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	2b04      	cmp	r3, #4
 800228c:	d107      	bne.n	800229e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e06b      	b.n	800237a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d11b      	bne.n	8002318 <HAL_I2C_Mem_Write+0x180>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d017      	beq.n	8002318 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	781a      	ldrb	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1aa      	bne.n	8002276 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fd43 	bl	8002db0 <I2C_WaitOnBTFFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00d      	beq.n	800234c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	2b04      	cmp	r3, #4
 8002336:	d107      	bne.n	8002348 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002346:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e016      	b.n	800237a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	e000      	b.n	800237a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002378:	2302      	movs	r3, #2
  }
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	00100002 	.word	0x00100002
 8002388:	ffff0000 	.word	0xffff0000

0800238c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08c      	sub	sp, #48	; 0x30
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4603      	mov	r3, r0
 800239c:	817b      	strh	r3, [r7, #10]
 800239e:	460b      	mov	r3, r1
 80023a0:	813b      	strh	r3, [r7, #8]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023a6:	f7ff fb3d 	bl	8001a24 <HAL_GetTick>
 80023aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	f040 8214 	bne.w	80027e2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	2319      	movs	r3, #25
 80023c0:	2201      	movs	r2, #1
 80023c2:	497b      	ldr	r1, [pc, #492]	; (80025b0 <HAL_I2C_Mem_Read+0x224>)
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 fb91 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
 80023d2:	e207      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_I2C_Mem_Read+0x56>
 80023de:	2302      	movs	r3, #2
 80023e0:	e200      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d007      	beq.n	8002408 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002416:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2222      	movs	r2, #34	; 0x22
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2240      	movs	r2, #64	; 0x40
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002432:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002438:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4a5b      	ldr	r2, [pc, #364]	; (80025b4 <HAL_I2C_Mem_Read+0x228>)
 8002448:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800244a:	88f8      	ldrh	r0, [r7, #6]
 800244c:	893a      	ldrh	r2, [r7, #8]
 800244e:	8979      	ldrh	r1, [r7, #10]
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	4603      	mov	r3, r0
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fa5e 	bl	800291c <I2C_RequestMemoryRead>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e1bc      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246e:	2b00      	cmp	r3, #0
 8002470:	d113      	bne.n	800249a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002472:	2300      	movs	r3, #0
 8002474:	623b      	str	r3, [r7, #32]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	623b      	str	r3, [r7, #32]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	623b      	str	r3, [r7, #32]
 8002486:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	e190      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d11b      	bne.n	80024da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	e170      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d11b      	bne.n	800251a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002500:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	e150      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002530:	e144      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002536:	2b03      	cmp	r3, #3
 8002538:	f200 80f1 	bhi.w	800271e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	2b01      	cmp	r3, #1
 8002542:	d123      	bne.n	800258c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002546:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fc79 	bl	8002e40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e145      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	855a      	strh	r2, [r3, #42]	; 0x2a
 800258a:	e117      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002590:	2b02      	cmp	r3, #2
 8002592:	d14e      	bne.n	8002632 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259a:	2200      	movs	r2, #0
 800259c:	4906      	ldr	r1, [pc, #24]	; (80025b8 <HAL_I2C_Mem_Read+0x22c>)
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 faa4 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e11a      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
 80025ae:	bf00      	nop
 80025b0:	00100002 	.word	0x00100002
 80025b4:	ffff0000 	.word	0xffff0000
 80025b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002630:	e0c4      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002638:	2200      	movs	r2, #0
 800263a:	496c      	ldr	r1, [pc, #432]	; (80027ec <HAL_I2C_Mem_Read+0x460>)
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 fa55 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0cb      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800265a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002694:	2200      	movs	r2, #0
 8002696:	4955      	ldr	r1, [pc, #340]	; (80027ec <HAL_I2C_Mem_Read+0x460>)
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fa27 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e09d      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800271c:	e04e      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002720:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fb8c 	bl	8002e40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e058      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b04      	cmp	r3, #4
 8002770:	d124      	bne.n	80027bc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002776:	2b03      	cmp	r3, #3
 8002778:	d107      	bne.n	800278a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002788:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f47f aeb6 	bne.w	8002532 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
  }
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3728      	adds	r7, #40	; 0x28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	00010004 	.word	0x00010004

080027f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	4608      	mov	r0, r1
 80027fa:	4611      	mov	r1, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	817b      	strh	r3, [r7, #10]
 8002802:	460b      	mov	r3, r1
 8002804:	813b      	strh	r3, [r7, #8]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002818:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	2200      	movs	r2, #0
 8002822:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f960 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00d      	beq.n	800284e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002840:	d103      	bne.n	800284a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002848:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e05f      	b.n	800290e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800284e:	897b      	ldrh	r3, [r7, #10]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800285c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	6a3a      	ldr	r2, [r7, #32]
 8002862:	492d      	ldr	r1, [pc, #180]	; (8002918 <I2C_RequestMemoryWrite+0x128>)
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f9bb 	bl	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e04c      	b.n	800290e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800288a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288c:	6a39      	ldr	r1, [r7, #32]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 fa46 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00d      	beq.n	80028b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d107      	bne.n	80028b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e02b      	b.n	800290e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d105      	bne.n	80028c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028bc:	893b      	ldrh	r3, [r7, #8]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	611a      	str	r2, [r3, #16]
 80028c6:	e021      	b.n	800290c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028c8:	893b      	ldrh	r3, [r7, #8]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d8:	6a39      	ldr	r1, [r7, #32]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 fa20 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00d      	beq.n	8002902 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d107      	bne.n	80028fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e005      	b.n	800290e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002902:	893b      	ldrh	r3, [r7, #8]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	00010002 	.word	0x00010002

0800291c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af02      	add	r7, sp, #8
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	4608      	mov	r0, r1
 8002926:	4611      	mov	r1, r2
 8002928:	461a      	mov	r2, r3
 800292a:	4603      	mov	r3, r0
 800292c:	817b      	strh	r3, [r7, #10]
 800292e:	460b      	mov	r3, r1
 8002930:	813b      	strh	r3, [r7, #8]
 8002932:	4613      	mov	r3, r2
 8002934:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002944:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002954:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	2200      	movs	r2, #0
 800295e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f8c2 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00d      	beq.n	800298a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800297c:	d103      	bne.n	8002986 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002984:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e0aa      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800298a:	897b      	ldrh	r3, [r7, #10]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002998:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	6a3a      	ldr	r2, [r7, #32]
 800299e:	4952      	ldr	r1, [pc, #328]	; (8002ae8 <I2C_RequestMemoryRead+0x1cc>)
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f91d 	bl	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e097      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c8:	6a39      	ldr	r1, [r7, #32]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f9a8 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00d      	beq.n	80029f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d107      	bne.n	80029ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e076      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029f8:	893b      	ldrh	r3, [r7, #8]
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	611a      	str	r2, [r3, #16]
 8002a02:	e021      	b.n	8002a48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a04:	893b      	ldrh	r3, [r7, #8]
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a14:	6a39      	ldr	r1, [r7, #32]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f982 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00d      	beq.n	8002a3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d107      	bne.n	8002a3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e050      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a3e:	893b      	ldrh	r3, [r7, #8]
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4a:	6a39      	ldr	r1, [r7, #32]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f967 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00d      	beq.n	8002a74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d107      	bne.n	8002a70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e035      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f82b 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00d      	beq.n	8002ab8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aaa:	d103      	bne.n	8002ab4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ab2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e013      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ab8:	897b      	ldrh	r3, [r7, #10]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	6a3a      	ldr	r2, [r7, #32]
 8002acc:	4906      	ldr	r1, [pc, #24]	; (8002ae8 <I2C_RequestMemoryRead+0x1cc>)
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f886 	bl	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	00010002 	.word	0x00010002

08002aec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002afc:	e048      	b.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d044      	beq.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b06:	f7fe ff8d 	bl	8001a24 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d139      	bne.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	0c1b      	lsrs	r3, r3, #16
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d10d      	bne.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	43da      	mvns	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4013      	ands	r3, r2
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	e00c      	b.n	8002b5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d116      	bne.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f043 0220 	orr.w	r2, r3, #32
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e023      	b.n	8002bd8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	0c1b      	lsrs	r3, r3, #16
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d10d      	bne.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	e00c      	b.n	8002bd0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d093      	beq.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bee:	e071      	b.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfe:	d123      	bne.n	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e067      	b.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4e:	d041      	beq.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c50:	f7fe fee8 	bl	8001a24 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d302      	bcc.n	8002c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d136      	bne.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	0c1b      	lsrs	r3, r3, #16
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d10c      	bne.n	8002c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf14      	ite	ne
 8002c82:	2301      	movne	r3, #1
 8002c84:	2300      	moveq	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	e00b      	b.n	8002ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	43da      	mvns	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4013      	ands	r3, r2
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf14      	ite	ne
 8002c9c:	2301      	movne	r3, #1
 8002c9e:	2300      	moveq	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d016      	beq.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e021      	b.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	0c1b      	lsrs	r3, r3, #16
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d10c      	bne.n	8002cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	e00b      	b.n	8002d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4013      	ands	r3, r2
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf14      	ite	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	2300      	moveq	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f47f af6d 	bne.w	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d2c:	e034      	b.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f8e3 	bl	8002efa <I2C_IsAcknowledgeFailed>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e034      	b.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d028      	beq.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d46:	f7fe fe6d 	bl	8001a24 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d11d      	bne.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d66:	2b80      	cmp	r3, #128	; 0x80
 8002d68:	d016      	beq.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e007      	b.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da2:	2b80      	cmp	r3, #128	; 0x80
 8002da4:	d1c3      	bne.n	8002d2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dbc:	e034      	b.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f89b 	bl	8002efa <I2C_IsAcknowledgeFailed>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e034      	b.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd4:	d028      	beq.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd6:	f7fe fe25 	bl	8001a24 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d11d      	bne.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d016      	beq.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f043 0220 	orr.w	r2, r3, #32
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e007      	b.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d1c3      	bne.n	8002dbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e4c:	e049      	b.n	8002ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	2b10      	cmp	r3, #16
 8002e5a:	d119      	bne.n	8002e90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0210 	mvn.w	r2, #16
 8002e64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e030      	b.n	8002ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e90:	f7fe fdc8 	bl	8001a24 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d302      	bcc.n	8002ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d11d      	bne.n	8002ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb0:	2b40      	cmp	r3, #64	; 0x40
 8002eb2:	d016      	beq.n	8002ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f043 0220 	orr.w	r2, r3, #32
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e007      	b.n	8002ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eec:	2b40      	cmp	r3, #64	; 0x40
 8002eee:	d1ae      	bne.n	8002e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f10:	d11b      	bne.n	8002f4a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f1a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f043 0204 	orr.w	r2, r3, #4
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e267      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d075      	beq.n	8003062 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f76:	4b88      	ldr	r3, [pc, #544]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d00c      	beq.n	8002f9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f82:	4b85      	ldr	r3, [pc, #532]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d112      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f8e:	4b82      	ldr	r3, [pc, #520]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f9a:	d10b      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9c:	4b7e      	ldr	r3, [pc, #504]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d05b      	beq.n	8003060 <HAL_RCC_OscConfig+0x108>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d157      	bne.n	8003060 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e242      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbc:	d106      	bne.n	8002fcc <HAL_RCC_OscConfig+0x74>
 8002fbe:	4b76      	ldr	r3, [pc, #472]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a75      	ldr	r2, [pc, #468]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e01d      	b.n	8003008 <HAL_RCC_OscConfig+0xb0>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x98>
 8002fd6:	4b70      	ldr	r3, [pc, #448]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a6f      	ldr	r2, [pc, #444]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	4b6d      	ldr	r3, [pc, #436]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a6c      	ldr	r2, [pc, #432]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e00b      	b.n	8003008 <HAL_RCC_OscConfig+0xb0>
 8002ff0:	4b69      	ldr	r3, [pc, #420]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a68      	ldr	r2, [pc, #416]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	4b66      	ldr	r3, [pc, #408]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a65      	ldr	r2, [pc, #404]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8003002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d013      	beq.n	8003038 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7fe fd08 	bl	8001a24 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003018:	f7fe fd04 	bl	8001a24 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b64      	cmp	r3, #100	; 0x64
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e207      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302a:	4b5b      	ldr	r3, [pc, #364]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0xc0>
 8003036:	e014      	b.n	8003062 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe fcf4 	bl	8001a24 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003040:	f7fe fcf0 	bl	8001a24 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b64      	cmp	r3, #100	; 0x64
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e1f3      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003052:	4b51      	ldr	r3, [pc, #324]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0xe8>
 800305e:	e000      	b.n	8003062 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d063      	beq.n	8003136 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800306e:	4b4a      	ldr	r3, [pc, #296]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00b      	beq.n	8003092 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800307a:	4b47      	ldr	r3, [pc, #284]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003082:	2b08      	cmp	r3, #8
 8003084:	d11c      	bne.n	80030c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003086:	4b44      	ldr	r3, [pc, #272]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d116      	bne.n	80030c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003092:	4b41      	ldr	r3, [pc, #260]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <HAL_RCC_OscConfig+0x152>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d001      	beq.n	80030aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e1c7      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030aa:	4b3b      	ldr	r3, [pc, #236]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4937      	ldr	r1, [pc, #220]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030be:	e03a      	b.n	8003136 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d020      	beq.n	800310a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c8:	4b34      	ldr	r3, [pc, #208]	; (800319c <HAL_RCC_OscConfig+0x244>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ce:	f7fe fca9 	bl	8001a24 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d6:	f7fe fca5 	bl	8001a24 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e1a8      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e8:	4b2b      	ldr	r3, [pc, #172]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f4:	4b28      	ldr	r3, [pc, #160]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4925      	ldr	r1, [pc, #148]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 8003104:	4313      	orrs	r3, r2
 8003106:	600b      	str	r3, [r1, #0]
 8003108:	e015      	b.n	8003136 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800310a:	4b24      	ldr	r3, [pc, #144]	; (800319c <HAL_RCC_OscConfig+0x244>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fe fc88 	bl	8001a24 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003118:	f7fe fc84 	bl	8001a24 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e187      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800312a:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d036      	beq.n	80031b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d016      	beq.n	8003178 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800314a:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <HAL_RCC_OscConfig+0x248>)
 800314c:	2201      	movs	r2, #1
 800314e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7fe fc68 	bl	8001a24 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003158:	f7fe fc64 	bl	8001a24 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e167      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_RCC_OscConfig+0x240>)
 800316c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0x200>
 8003176:	e01b      	b.n	80031b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003178:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <HAL_RCC_OscConfig+0x248>)
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317e:	f7fe fc51 	bl	8001a24 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003184:	e00e      	b.n	80031a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003186:	f7fe fc4d 	bl	8001a24 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d907      	bls.n	80031a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e150      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
 8003198:	40023800 	.word	0x40023800
 800319c:	42470000 	.word	0x42470000
 80031a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a4:	4b88      	ldr	r3, [pc, #544]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80031a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1ea      	bne.n	8003186 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 8097 	beq.w	80032ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031be:	2300      	movs	r3, #0
 80031c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031c2:	4b81      	ldr	r3, [pc, #516]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10f      	bne.n	80031ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	4b7d      	ldr	r3, [pc, #500]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	4a7c      	ldr	r2, [pc, #496]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80031d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031dc:	6413      	str	r3, [r2, #64]	; 0x40
 80031de:	4b7a      	ldr	r3, [pc, #488]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ea:	2301      	movs	r3, #1
 80031ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ee:	4b77      	ldr	r3, [pc, #476]	; (80033cc <HAL_RCC_OscConfig+0x474>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d118      	bne.n	800322c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031fa:	4b74      	ldr	r3, [pc, #464]	; (80033cc <HAL_RCC_OscConfig+0x474>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a73      	ldr	r2, [pc, #460]	; (80033cc <HAL_RCC_OscConfig+0x474>)
 8003200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003206:	f7fe fc0d 	bl	8001a24 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320e:	f7fe fc09 	bl	8001a24 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e10c      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003220:	4b6a      	ldr	r3, [pc, #424]	; (80033cc <HAL_RCC_OscConfig+0x474>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x2ea>
 8003234:	4b64      	ldr	r3, [pc, #400]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	4a63      	ldr	r2, [pc, #396]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	6713      	str	r3, [r2, #112]	; 0x70
 8003240:	e01c      	b.n	800327c <HAL_RCC_OscConfig+0x324>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b05      	cmp	r3, #5
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x30c>
 800324a:	4b5f      	ldr	r3, [pc, #380]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	4a5e      	ldr	r2, [pc, #376]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 8003250:	f043 0304 	orr.w	r3, r3, #4
 8003254:	6713      	str	r3, [r2, #112]	; 0x70
 8003256:	4b5c      	ldr	r3, [pc, #368]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	4a5b      	ldr	r2, [pc, #364]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	6713      	str	r3, [r2, #112]	; 0x70
 8003262:	e00b      	b.n	800327c <HAL_RCC_OscConfig+0x324>
 8003264:	4b58      	ldr	r3, [pc, #352]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	4a57      	ldr	r2, [pc, #348]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 800326a:	f023 0301 	bic.w	r3, r3, #1
 800326e:	6713      	str	r3, [r2, #112]	; 0x70
 8003270:	4b55      	ldr	r3, [pc, #340]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 8003272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003274:	4a54      	ldr	r2, [pc, #336]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 8003276:	f023 0304 	bic.w	r3, r3, #4
 800327a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d015      	beq.n	80032b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003284:	f7fe fbce 	bl	8001a24 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800328c:	f7fe fbca 	bl	8001a24 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e0cb      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a2:	4b49      	ldr	r3, [pc, #292]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0ee      	beq.n	800328c <HAL_RCC_OscConfig+0x334>
 80032ae:	e014      	b.n	80032da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b0:	f7fe fbb8 	bl	8001a24 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b6:	e00a      	b.n	80032ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b8:	f7fe fbb4 	bl	8001a24 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e0b5      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ce:	4b3e      	ldr	r3, [pc, #248]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1ee      	bne.n	80032b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032da:	7dfb      	ldrb	r3, [r7, #23]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d105      	bne.n	80032ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e0:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	4a38      	ldr	r2, [pc, #224]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80032e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 80a1 	beq.w	8003438 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032f6:	4b34      	ldr	r3, [pc, #208]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d05c      	beq.n	80033bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d141      	bne.n	800338e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330a:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <HAL_RCC_OscConfig+0x478>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fe fb88 	bl	8001a24 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003318:	f7fe fb84 	bl	8001a24 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e087      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332a:	4b27      	ldr	r3, [pc, #156]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69da      	ldr	r2, [r3, #28]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	019b      	lsls	r3, r3, #6
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	085b      	lsrs	r3, r3, #1
 800334e:	3b01      	subs	r3, #1
 8003350:	041b      	lsls	r3, r3, #16
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	061b      	lsls	r3, r3, #24
 800335a:	491b      	ldr	r1, [pc, #108]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 800335c:	4313      	orrs	r3, r2
 800335e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003360:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <HAL_RCC_OscConfig+0x478>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7fe fb5d 	bl	8001a24 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336e:	f7fe fb59 	bl	8001a24 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e05c      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003380:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x416>
 800338c:	e054      	b.n	8003438 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338e:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <HAL_RCC_OscConfig+0x478>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fe fb46 	bl	8001a24 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339c:	f7fe fb42 	bl	8001a24 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e045      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ae:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <HAL_RCC_OscConfig+0x470>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x444>
 80033ba:	e03d      	b.n	8003438 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e038      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
 80033c8:	40023800 	.word	0x40023800
 80033cc:	40007000 	.word	0x40007000
 80033d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033d4:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <HAL_RCC_OscConfig+0x4ec>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d028      	beq.n	8003434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d121      	bne.n	8003434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d11a      	bne.n	8003434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003404:	4013      	ands	r3, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800340a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800340c:	4293      	cmp	r3, r2
 800340e:	d111      	bne.n	8003434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	085b      	lsrs	r3, r3, #1
 800341c:	3b01      	subs	r3, #1
 800341e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003420:	429a      	cmp	r2, r3
 8003422:	d107      	bne.n	8003434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003430:	429a      	cmp	r2, r3
 8003432:	d001      	beq.n	8003438 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e000      	b.n	800343a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40023800 	.word	0x40023800

08003448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0cc      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800345c:	4b68      	ldr	r3, [pc, #416]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d90c      	bls.n	8003484 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b65      	ldr	r3, [pc, #404]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b63      	ldr	r3, [pc, #396]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0b8      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d020      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800349c:	4b59      	ldr	r3, [pc, #356]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4a58      	ldr	r2, [pc, #352]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034b4:	4b53      	ldr	r3, [pc, #332]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4a52      	ldr	r2, [pc, #328]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c0:	4b50      	ldr	r3, [pc, #320]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	494d      	ldr	r1, [pc, #308]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d044      	beq.n	8003568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d107      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e6:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d119      	bne.n	8003526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e07f      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d003      	beq.n	8003506 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003502:	2b03      	cmp	r3, #3
 8003504:	d107      	bne.n	8003516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003506:	4b3f      	ldr	r3, [pc, #252]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e06f      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003516:	4b3b      	ldr	r3, [pc, #236]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e067      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003526:	4b37      	ldr	r3, [pc, #220]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f023 0203 	bic.w	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4934      	ldr	r1, [pc, #208]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	4313      	orrs	r3, r2
 8003536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003538:	f7fe fa74 	bl	8001a24 <HAL_GetTick>
 800353c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	e00a      	b.n	8003556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003540:	f7fe fa70 	bl	8001a24 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	; 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e04f      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003556:	4b2b      	ldr	r3, [pc, #172]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 020c 	and.w	r2, r3, #12
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	429a      	cmp	r2, r3
 8003566:	d1eb      	bne.n	8003540 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003568:	4b25      	ldr	r3, [pc, #148]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d20c      	bcs.n	8003590 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003576:	4b22      	ldr	r3, [pc, #136]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357e:	4b20      	ldr	r3, [pc, #128]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e032      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800359c:	4b19      	ldr	r3, [pc, #100]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4916      	ldr	r1, [pc, #88]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	490e      	ldr	r1, [pc, #56]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ce:	f000 f821 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 80035d2:	4602      	mov	r2, r0
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	091b      	lsrs	r3, r3, #4
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	490a      	ldr	r1, [pc, #40]	; (8003608 <HAL_RCC_ClockConfig+0x1c0>)
 80035e0:	5ccb      	ldrb	r3, [r1, r3]
 80035e2:	fa22 f303 	lsr.w	r3, r2, r3
 80035e6:	4a09      	ldr	r2, [pc, #36]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <HAL_RCC_ClockConfig+0x1c8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe f9d4 	bl	800199c <HAL_InitTick>

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40023c00 	.word	0x40023c00
 8003604:	40023800 	.word	0x40023800
 8003608:	08004670 	.word	0x08004670
 800360c:	20000000 	.word	0x20000000
 8003610:	20000004 	.word	0x20000004

08003614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003618:	b090      	sub	sp, #64	; 0x40
 800361a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	637b      	str	r3, [r7, #52]	; 0x34
 8003620:	2300      	movs	r3, #0
 8003622:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003624:	2300      	movs	r3, #0
 8003626:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800362c:	4b59      	ldr	r3, [pc, #356]	; (8003794 <HAL_RCC_GetSysClockFreq+0x180>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b08      	cmp	r3, #8
 8003636:	d00d      	beq.n	8003654 <HAL_RCC_GetSysClockFreq+0x40>
 8003638:	2b08      	cmp	r3, #8
 800363a:	f200 80a1 	bhi.w	8003780 <HAL_RCC_GetSysClockFreq+0x16c>
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x34>
 8003642:	2b04      	cmp	r3, #4
 8003644:	d003      	beq.n	800364e <HAL_RCC_GetSysClockFreq+0x3a>
 8003646:	e09b      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003648:	4b53      	ldr	r3, [pc, #332]	; (8003798 <HAL_RCC_GetSysClockFreq+0x184>)
 800364a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800364c:	e09b      	b.n	8003786 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800364e:	4b53      	ldr	r3, [pc, #332]	; (800379c <HAL_RCC_GetSysClockFreq+0x188>)
 8003650:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003652:	e098      	b.n	8003786 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003654:	4b4f      	ldr	r3, [pc, #316]	; (8003794 <HAL_RCC_GetSysClockFreq+0x180>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800365c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800365e:	4b4d      	ldr	r3, [pc, #308]	; (8003794 <HAL_RCC_GetSysClockFreq+0x180>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d028      	beq.n	80036bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800366a:	4b4a      	ldr	r3, [pc, #296]	; (8003794 <HAL_RCC_GetSysClockFreq+0x180>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	099b      	lsrs	r3, r3, #6
 8003670:	2200      	movs	r2, #0
 8003672:	623b      	str	r3, [r7, #32]
 8003674:	627a      	str	r2, [r7, #36]	; 0x24
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800367c:	2100      	movs	r1, #0
 800367e:	4b47      	ldr	r3, [pc, #284]	; (800379c <HAL_RCC_GetSysClockFreq+0x188>)
 8003680:	fb03 f201 	mul.w	r2, r3, r1
 8003684:	2300      	movs	r3, #0
 8003686:	fb00 f303 	mul.w	r3, r0, r3
 800368a:	4413      	add	r3, r2
 800368c:	4a43      	ldr	r2, [pc, #268]	; (800379c <HAL_RCC_GetSysClockFreq+0x188>)
 800368e:	fba0 1202 	umull	r1, r2, r0, r2
 8003692:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003694:	460a      	mov	r2, r1
 8003696:	62ba      	str	r2, [r7, #40]	; 0x28
 8003698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800369a:	4413      	add	r3, r2
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a0:	2200      	movs	r2, #0
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	61fa      	str	r2, [r7, #28]
 80036a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80036ae:	f7fd fa05 	bl	8000abc <__aeabi_uldivmod>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	4613      	mov	r3, r2
 80036b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ba:	e053      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036bc:	4b35      	ldr	r3, [pc, #212]	; (8003794 <HAL_RCC_GetSysClockFreq+0x180>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	099b      	lsrs	r3, r3, #6
 80036c2:	2200      	movs	r2, #0
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	617a      	str	r2, [r7, #20]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80036ce:	f04f 0b00 	mov.w	fp, #0
 80036d2:	4652      	mov	r2, sl
 80036d4:	465b      	mov	r3, fp
 80036d6:	f04f 0000 	mov.w	r0, #0
 80036da:	f04f 0100 	mov.w	r1, #0
 80036de:	0159      	lsls	r1, r3, #5
 80036e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036e4:	0150      	lsls	r0, r2, #5
 80036e6:	4602      	mov	r2, r0
 80036e8:	460b      	mov	r3, r1
 80036ea:	ebb2 080a 	subs.w	r8, r2, sl
 80036ee:	eb63 090b 	sbc.w	r9, r3, fp
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003702:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003706:	ebb2 0408 	subs.w	r4, r2, r8
 800370a:	eb63 0509 	sbc.w	r5, r3, r9
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	00eb      	lsls	r3, r5, #3
 8003718:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800371c:	00e2      	lsls	r2, r4, #3
 800371e:	4614      	mov	r4, r2
 8003720:	461d      	mov	r5, r3
 8003722:	eb14 030a 	adds.w	r3, r4, sl
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	eb45 030b 	adc.w	r3, r5, fp
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	e9d7 4500 	ldrd	r4, r5, [r7]
 800373a:	4629      	mov	r1, r5
 800373c:	028b      	lsls	r3, r1, #10
 800373e:	4621      	mov	r1, r4
 8003740:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003744:	4621      	mov	r1, r4
 8003746:	028a      	lsls	r2, r1, #10
 8003748:	4610      	mov	r0, r2
 800374a:	4619      	mov	r1, r3
 800374c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374e:	2200      	movs	r2, #0
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	60fa      	str	r2, [r7, #12]
 8003754:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003758:	f7fd f9b0 	bl	8000abc <__aeabi_uldivmod>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4613      	mov	r3, r2
 8003762:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <HAL_RCC_GetSysClockFreq+0x180>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	0c1b      	lsrs	r3, r3, #16
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	3301      	adds	r3, #1
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003774:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	fbb2 f3f3 	udiv	r3, r2, r3
 800377c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800377e:	e002      	b.n	8003786 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003780:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RCC_GetSysClockFreq+0x184>)
 8003782:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003788:	4618      	mov	r0, r3
 800378a:	3740      	adds	r7, #64	; 0x40
 800378c:	46bd      	mov	sp, r7
 800378e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800
 8003798:	00f42400 	.word	0x00f42400
 800379c:	017d7840 	.word	0x017d7840

080037a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a4:	4b03      	ldr	r3, [pc, #12]	; (80037b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037a6:	681b      	ldr	r3, [r3, #0]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20000000 	.word	0x20000000

080037b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037bc:	f7ff fff0 	bl	80037a0 <HAL_RCC_GetHCLKFreq>
 80037c0:	4602      	mov	r2, r0
 80037c2:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	0a9b      	lsrs	r3, r3, #10
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	4903      	ldr	r1, [pc, #12]	; (80037dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ce:	5ccb      	ldrb	r3, [r1, r3]
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40023800 	.word	0x40023800
 80037dc:	08004680 	.word	0x08004680

080037e0 <std>:
 80037e0:	2300      	movs	r3, #0
 80037e2:	b510      	push	{r4, lr}
 80037e4:	4604      	mov	r4, r0
 80037e6:	e9c0 3300 	strd	r3, r3, [r0]
 80037ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037ee:	6083      	str	r3, [r0, #8]
 80037f0:	8181      	strh	r1, [r0, #12]
 80037f2:	6643      	str	r3, [r0, #100]	; 0x64
 80037f4:	81c2      	strh	r2, [r0, #14]
 80037f6:	6183      	str	r3, [r0, #24]
 80037f8:	4619      	mov	r1, r3
 80037fa:	2208      	movs	r2, #8
 80037fc:	305c      	adds	r0, #92	; 0x5c
 80037fe:	f000 f906 	bl	8003a0e <memset>
 8003802:	4b0d      	ldr	r3, [pc, #52]	; (8003838 <std+0x58>)
 8003804:	6263      	str	r3, [r4, #36]	; 0x24
 8003806:	4b0d      	ldr	r3, [pc, #52]	; (800383c <std+0x5c>)
 8003808:	62a3      	str	r3, [r4, #40]	; 0x28
 800380a:	4b0d      	ldr	r3, [pc, #52]	; (8003840 <std+0x60>)
 800380c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <std+0x64>)
 8003810:	6323      	str	r3, [r4, #48]	; 0x30
 8003812:	4b0d      	ldr	r3, [pc, #52]	; (8003848 <std+0x68>)
 8003814:	6224      	str	r4, [r4, #32]
 8003816:	429c      	cmp	r4, r3
 8003818:	d006      	beq.n	8003828 <std+0x48>
 800381a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800381e:	4294      	cmp	r4, r2
 8003820:	d002      	beq.n	8003828 <std+0x48>
 8003822:	33d0      	adds	r3, #208	; 0xd0
 8003824:	429c      	cmp	r4, r3
 8003826:	d105      	bne.n	8003834 <std+0x54>
 8003828:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800382c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003830:	f000 b966 	b.w	8003b00 <__retarget_lock_init_recursive>
 8003834:	bd10      	pop	{r4, pc}
 8003836:	bf00      	nop
 8003838:	08003989 	.word	0x08003989
 800383c:	080039ab 	.word	0x080039ab
 8003840:	080039e3 	.word	0x080039e3
 8003844:	08003a07 	.word	0x08003a07
 8003848:	200026dc 	.word	0x200026dc

0800384c <stdio_exit_handler>:
 800384c:	4a02      	ldr	r2, [pc, #8]	; (8003858 <stdio_exit_handler+0xc>)
 800384e:	4903      	ldr	r1, [pc, #12]	; (800385c <stdio_exit_handler+0x10>)
 8003850:	4803      	ldr	r0, [pc, #12]	; (8003860 <stdio_exit_handler+0x14>)
 8003852:	f000 b869 	b.w	8003928 <_fwalk_sglue>
 8003856:	bf00      	nop
 8003858:	2000000c 	.word	0x2000000c
 800385c:	080043ad 	.word	0x080043ad
 8003860:	20000018 	.word	0x20000018

08003864 <cleanup_stdio>:
 8003864:	6841      	ldr	r1, [r0, #4]
 8003866:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <cleanup_stdio+0x34>)
 8003868:	4299      	cmp	r1, r3
 800386a:	b510      	push	{r4, lr}
 800386c:	4604      	mov	r4, r0
 800386e:	d001      	beq.n	8003874 <cleanup_stdio+0x10>
 8003870:	f000 fd9c 	bl	80043ac <_fflush_r>
 8003874:	68a1      	ldr	r1, [r4, #8]
 8003876:	4b09      	ldr	r3, [pc, #36]	; (800389c <cleanup_stdio+0x38>)
 8003878:	4299      	cmp	r1, r3
 800387a:	d002      	beq.n	8003882 <cleanup_stdio+0x1e>
 800387c:	4620      	mov	r0, r4
 800387e:	f000 fd95 	bl	80043ac <_fflush_r>
 8003882:	68e1      	ldr	r1, [r4, #12]
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <cleanup_stdio+0x3c>)
 8003886:	4299      	cmp	r1, r3
 8003888:	d004      	beq.n	8003894 <cleanup_stdio+0x30>
 800388a:	4620      	mov	r0, r4
 800388c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003890:	f000 bd8c 	b.w	80043ac <_fflush_r>
 8003894:	bd10      	pop	{r4, pc}
 8003896:	bf00      	nop
 8003898:	200026dc 	.word	0x200026dc
 800389c:	20002744 	.word	0x20002744
 80038a0:	200027ac 	.word	0x200027ac

080038a4 <global_stdio_init.part.0>:
 80038a4:	b510      	push	{r4, lr}
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <global_stdio_init.part.0+0x30>)
 80038a8:	4c0b      	ldr	r4, [pc, #44]	; (80038d8 <global_stdio_init.part.0+0x34>)
 80038aa:	4a0c      	ldr	r2, [pc, #48]	; (80038dc <global_stdio_init.part.0+0x38>)
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	4620      	mov	r0, r4
 80038b0:	2200      	movs	r2, #0
 80038b2:	2104      	movs	r1, #4
 80038b4:	f7ff ff94 	bl	80037e0 <std>
 80038b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80038bc:	2201      	movs	r2, #1
 80038be:	2109      	movs	r1, #9
 80038c0:	f7ff ff8e 	bl	80037e0 <std>
 80038c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80038c8:	2202      	movs	r2, #2
 80038ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038ce:	2112      	movs	r1, #18
 80038d0:	f7ff bf86 	b.w	80037e0 <std>
 80038d4:	20002814 	.word	0x20002814
 80038d8:	200026dc 	.word	0x200026dc
 80038dc:	0800384d 	.word	0x0800384d

080038e0 <__sfp_lock_acquire>:
 80038e0:	4801      	ldr	r0, [pc, #4]	; (80038e8 <__sfp_lock_acquire+0x8>)
 80038e2:	f000 b90e 	b.w	8003b02 <__retarget_lock_acquire_recursive>
 80038e6:	bf00      	nop
 80038e8:	2000281d 	.word	0x2000281d

080038ec <__sfp_lock_release>:
 80038ec:	4801      	ldr	r0, [pc, #4]	; (80038f4 <__sfp_lock_release+0x8>)
 80038ee:	f000 b909 	b.w	8003b04 <__retarget_lock_release_recursive>
 80038f2:	bf00      	nop
 80038f4:	2000281d 	.word	0x2000281d

080038f8 <__sinit>:
 80038f8:	b510      	push	{r4, lr}
 80038fa:	4604      	mov	r4, r0
 80038fc:	f7ff fff0 	bl	80038e0 <__sfp_lock_acquire>
 8003900:	6a23      	ldr	r3, [r4, #32]
 8003902:	b11b      	cbz	r3, 800390c <__sinit+0x14>
 8003904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003908:	f7ff bff0 	b.w	80038ec <__sfp_lock_release>
 800390c:	4b04      	ldr	r3, [pc, #16]	; (8003920 <__sinit+0x28>)
 800390e:	6223      	str	r3, [r4, #32]
 8003910:	4b04      	ldr	r3, [pc, #16]	; (8003924 <__sinit+0x2c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f5      	bne.n	8003904 <__sinit+0xc>
 8003918:	f7ff ffc4 	bl	80038a4 <global_stdio_init.part.0>
 800391c:	e7f2      	b.n	8003904 <__sinit+0xc>
 800391e:	bf00      	nop
 8003920:	08003865 	.word	0x08003865
 8003924:	20002814 	.word	0x20002814

08003928 <_fwalk_sglue>:
 8003928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800392c:	4607      	mov	r7, r0
 800392e:	4688      	mov	r8, r1
 8003930:	4614      	mov	r4, r2
 8003932:	2600      	movs	r6, #0
 8003934:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003938:	f1b9 0901 	subs.w	r9, r9, #1
 800393c:	d505      	bpl.n	800394a <_fwalk_sglue+0x22>
 800393e:	6824      	ldr	r4, [r4, #0]
 8003940:	2c00      	cmp	r4, #0
 8003942:	d1f7      	bne.n	8003934 <_fwalk_sglue+0xc>
 8003944:	4630      	mov	r0, r6
 8003946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800394a:	89ab      	ldrh	r3, [r5, #12]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d907      	bls.n	8003960 <_fwalk_sglue+0x38>
 8003950:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003954:	3301      	adds	r3, #1
 8003956:	d003      	beq.n	8003960 <_fwalk_sglue+0x38>
 8003958:	4629      	mov	r1, r5
 800395a:	4638      	mov	r0, r7
 800395c:	47c0      	blx	r8
 800395e:	4306      	orrs	r6, r0
 8003960:	3568      	adds	r5, #104	; 0x68
 8003962:	e7e9      	b.n	8003938 <_fwalk_sglue+0x10>

08003964 <iprintf>:
 8003964:	b40f      	push	{r0, r1, r2, r3}
 8003966:	b507      	push	{r0, r1, r2, lr}
 8003968:	4906      	ldr	r1, [pc, #24]	; (8003984 <iprintf+0x20>)
 800396a:	ab04      	add	r3, sp, #16
 800396c:	6808      	ldr	r0, [r1, #0]
 800396e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003972:	6881      	ldr	r1, [r0, #8]
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	f000 f9e9 	bl	8003d4c <_vfiprintf_r>
 800397a:	b003      	add	sp, #12
 800397c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003980:	b004      	add	sp, #16
 8003982:	4770      	bx	lr
 8003984:	20000064 	.word	0x20000064

08003988 <__sread>:
 8003988:	b510      	push	{r4, lr}
 800398a:	460c      	mov	r4, r1
 800398c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003990:	f000 f868 	bl	8003a64 <_read_r>
 8003994:	2800      	cmp	r0, #0
 8003996:	bfab      	itete	ge
 8003998:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800399a:	89a3      	ldrhlt	r3, [r4, #12]
 800399c:	181b      	addge	r3, r3, r0
 800399e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039a2:	bfac      	ite	ge
 80039a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80039a6:	81a3      	strhlt	r3, [r4, #12]
 80039a8:	bd10      	pop	{r4, pc}

080039aa <__swrite>:
 80039aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ae:	461f      	mov	r7, r3
 80039b0:	898b      	ldrh	r3, [r1, #12]
 80039b2:	05db      	lsls	r3, r3, #23
 80039b4:	4605      	mov	r5, r0
 80039b6:	460c      	mov	r4, r1
 80039b8:	4616      	mov	r6, r2
 80039ba:	d505      	bpl.n	80039c8 <__swrite+0x1e>
 80039bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039c0:	2302      	movs	r3, #2
 80039c2:	2200      	movs	r2, #0
 80039c4:	f000 f83c 	bl	8003a40 <_lseek_r>
 80039c8:	89a3      	ldrh	r3, [r4, #12]
 80039ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039d2:	81a3      	strh	r3, [r4, #12]
 80039d4:	4632      	mov	r2, r6
 80039d6:	463b      	mov	r3, r7
 80039d8:	4628      	mov	r0, r5
 80039da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039de:	f000 b853 	b.w	8003a88 <_write_r>

080039e2 <__sseek>:
 80039e2:	b510      	push	{r4, lr}
 80039e4:	460c      	mov	r4, r1
 80039e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039ea:	f000 f829 	bl	8003a40 <_lseek_r>
 80039ee:	1c43      	adds	r3, r0, #1
 80039f0:	89a3      	ldrh	r3, [r4, #12]
 80039f2:	bf15      	itete	ne
 80039f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80039f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80039fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80039fe:	81a3      	strheq	r3, [r4, #12]
 8003a00:	bf18      	it	ne
 8003a02:	81a3      	strhne	r3, [r4, #12]
 8003a04:	bd10      	pop	{r4, pc}

08003a06 <__sclose>:
 8003a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a0a:	f000 b809 	b.w	8003a20 <_close_r>

08003a0e <memset>:
 8003a0e:	4402      	add	r2, r0
 8003a10:	4603      	mov	r3, r0
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d100      	bne.n	8003a18 <memset+0xa>
 8003a16:	4770      	bx	lr
 8003a18:	f803 1b01 	strb.w	r1, [r3], #1
 8003a1c:	e7f9      	b.n	8003a12 <memset+0x4>
	...

08003a20 <_close_r>:
 8003a20:	b538      	push	{r3, r4, r5, lr}
 8003a22:	4d06      	ldr	r5, [pc, #24]	; (8003a3c <_close_r+0x1c>)
 8003a24:	2300      	movs	r3, #0
 8003a26:	4604      	mov	r4, r0
 8003a28:	4608      	mov	r0, r1
 8003a2a:	602b      	str	r3, [r5, #0]
 8003a2c:	f7fd feed 	bl	800180a <_close>
 8003a30:	1c43      	adds	r3, r0, #1
 8003a32:	d102      	bne.n	8003a3a <_close_r+0x1a>
 8003a34:	682b      	ldr	r3, [r5, #0]
 8003a36:	b103      	cbz	r3, 8003a3a <_close_r+0x1a>
 8003a38:	6023      	str	r3, [r4, #0]
 8003a3a:	bd38      	pop	{r3, r4, r5, pc}
 8003a3c:	20002818 	.word	0x20002818

08003a40 <_lseek_r>:
 8003a40:	b538      	push	{r3, r4, r5, lr}
 8003a42:	4d07      	ldr	r5, [pc, #28]	; (8003a60 <_lseek_r+0x20>)
 8003a44:	4604      	mov	r4, r0
 8003a46:	4608      	mov	r0, r1
 8003a48:	4611      	mov	r1, r2
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	602a      	str	r2, [r5, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f7fd ff02 	bl	8001858 <_lseek>
 8003a54:	1c43      	adds	r3, r0, #1
 8003a56:	d102      	bne.n	8003a5e <_lseek_r+0x1e>
 8003a58:	682b      	ldr	r3, [r5, #0]
 8003a5a:	b103      	cbz	r3, 8003a5e <_lseek_r+0x1e>
 8003a5c:	6023      	str	r3, [r4, #0]
 8003a5e:	bd38      	pop	{r3, r4, r5, pc}
 8003a60:	20002818 	.word	0x20002818

08003a64 <_read_r>:
 8003a64:	b538      	push	{r3, r4, r5, lr}
 8003a66:	4d07      	ldr	r5, [pc, #28]	; (8003a84 <_read_r+0x20>)
 8003a68:	4604      	mov	r4, r0
 8003a6a:	4608      	mov	r0, r1
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	2200      	movs	r2, #0
 8003a70:	602a      	str	r2, [r5, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	f7fd fe90 	bl	8001798 <_read>
 8003a78:	1c43      	adds	r3, r0, #1
 8003a7a:	d102      	bne.n	8003a82 <_read_r+0x1e>
 8003a7c:	682b      	ldr	r3, [r5, #0]
 8003a7e:	b103      	cbz	r3, 8003a82 <_read_r+0x1e>
 8003a80:	6023      	str	r3, [r4, #0]
 8003a82:	bd38      	pop	{r3, r4, r5, pc}
 8003a84:	20002818 	.word	0x20002818

08003a88 <_write_r>:
 8003a88:	b538      	push	{r3, r4, r5, lr}
 8003a8a:	4d07      	ldr	r5, [pc, #28]	; (8003aa8 <_write_r+0x20>)
 8003a8c:	4604      	mov	r4, r0
 8003a8e:	4608      	mov	r0, r1
 8003a90:	4611      	mov	r1, r2
 8003a92:	2200      	movs	r2, #0
 8003a94:	602a      	str	r2, [r5, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	f7fd fe9b 	bl	80017d2 <_write>
 8003a9c:	1c43      	adds	r3, r0, #1
 8003a9e:	d102      	bne.n	8003aa6 <_write_r+0x1e>
 8003aa0:	682b      	ldr	r3, [r5, #0]
 8003aa2:	b103      	cbz	r3, 8003aa6 <_write_r+0x1e>
 8003aa4:	6023      	str	r3, [r4, #0]
 8003aa6:	bd38      	pop	{r3, r4, r5, pc}
 8003aa8:	20002818 	.word	0x20002818

08003aac <__errno>:
 8003aac:	4b01      	ldr	r3, [pc, #4]	; (8003ab4 <__errno+0x8>)
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000064 	.word	0x20000064

08003ab8 <__libc_init_array>:
 8003ab8:	b570      	push	{r4, r5, r6, lr}
 8003aba:	4d0d      	ldr	r5, [pc, #52]	; (8003af0 <__libc_init_array+0x38>)
 8003abc:	4c0d      	ldr	r4, [pc, #52]	; (8003af4 <__libc_init_array+0x3c>)
 8003abe:	1b64      	subs	r4, r4, r5
 8003ac0:	10a4      	asrs	r4, r4, #2
 8003ac2:	2600      	movs	r6, #0
 8003ac4:	42a6      	cmp	r6, r4
 8003ac6:	d109      	bne.n	8003adc <__libc_init_array+0x24>
 8003ac8:	4d0b      	ldr	r5, [pc, #44]	; (8003af8 <__libc_init_array+0x40>)
 8003aca:	4c0c      	ldr	r4, [pc, #48]	; (8003afc <__libc_init_array+0x44>)
 8003acc:	f000 fdc0 	bl	8004650 <_init>
 8003ad0:	1b64      	subs	r4, r4, r5
 8003ad2:	10a4      	asrs	r4, r4, #2
 8003ad4:	2600      	movs	r6, #0
 8003ad6:	42a6      	cmp	r6, r4
 8003ad8:	d105      	bne.n	8003ae6 <__libc_init_array+0x2e>
 8003ada:	bd70      	pop	{r4, r5, r6, pc}
 8003adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae0:	4798      	blx	r3
 8003ae2:	3601      	adds	r6, #1
 8003ae4:	e7ee      	b.n	8003ac4 <__libc_init_array+0xc>
 8003ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aea:	4798      	blx	r3
 8003aec:	3601      	adds	r6, #1
 8003aee:	e7f2      	b.n	8003ad6 <__libc_init_array+0x1e>
 8003af0:	080046c4 	.word	0x080046c4
 8003af4:	080046c4 	.word	0x080046c4
 8003af8:	080046c4 	.word	0x080046c4
 8003afc:	080046c8 	.word	0x080046c8

08003b00 <__retarget_lock_init_recursive>:
 8003b00:	4770      	bx	lr

08003b02 <__retarget_lock_acquire_recursive>:
 8003b02:	4770      	bx	lr

08003b04 <__retarget_lock_release_recursive>:
 8003b04:	4770      	bx	lr
	...

08003b08 <_free_r>:
 8003b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b0a:	2900      	cmp	r1, #0
 8003b0c:	d044      	beq.n	8003b98 <_free_r+0x90>
 8003b0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b12:	9001      	str	r0, [sp, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f1a1 0404 	sub.w	r4, r1, #4
 8003b1a:	bfb8      	it	lt
 8003b1c:	18e4      	addlt	r4, r4, r3
 8003b1e:	f000 f8df 	bl	8003ce0 <__malloc_lock>
 8003b22:	4a1e      	ldr	r2, [pc, #120]	; (8003b9c <_free_r+0x94>)
 8003b24:	9801      	ldr	r0, [sp, #4]
 8003b26:	6813      	ldr	r3, [r2, #0]
 8003b28:	b933      	cbnz	r3, 8003b38 <_free_r+0x30>
 8003b2a:	6063      	str	r3, [r4, #4]
 8003b2c:	6014      	str	r4, [r2, #0]
 8003b2e:	b003      	add	sp, #12
 8003b30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b34:	f000 b8da 	b.w	8003cec <__malloc_unlock>
 8003b38:	42a3      	cmp	r3, r4
 8003b3a:	d908      	bls.n	8003b4e <_free_r+0x46>
 8003b3c:	6825      	ldr	r5, [r4, #0]
 8003b3e:	1961      	adds	r1, r4, r5
 8003b40:	428b      	cmp	r3, r1
 8003b42:	bf01      	itttt	eq
 8003b44:	6819      	ldreq	r1, [r3, #0]
 8003b46:	685b      	ldreq	r3, [r3, #4]
 8003b48:	1949      	addeq	r1, r1, r5
 8003b4a:	6021      	streq	r1, [r4, #0]
 8003b4c:	e7ed      	b.n	8003b2a <_free_r+0x22>
 8003b4e:	461a      	mov	r2, r3
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	b10b      	cbz	r3, 8003b58 <_free_r+0x50>
 8003b54:	42a3      	cmp	r3, r4
 8003b56:	d9fa      	bls.n	8003b4e <_free_r+0x46>
 8003b58:	6811      	ldr	r1, [r2, #0]
 8003b5a:	1855      	adds	r5, r2, r1
 8003b5c:	42a5      	cmp	r5, r4
 8003b5e:	d10b      	bne.n	8003b78 <_free_r+0x70>
 8003b60:	6824      	ldr	r4, [r4, #0]
 8003b62:	4421      	add	r1, r4
 8003b64:	1854      	adds	r4, r2, r1
 8003b66:	42a3      	cmp	r3, r4
 8003b68:	6011      	str	r1, [r2, #0]
 8003b6a:	d1e0      	bne.n	8003b2e <_free_r+0x26>
 8003b6c:	681c      	ldr	r4, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	6053      	str	r3, [r2, #4]
 8003b72:	440c      	add	r4, r1
 8003b74:	6014      	str	r4, [r2, #0]
 8003b76:	e7da      	b.n	8003b2e <_free_r+0x26>
 8003b78:	d902      	bls.n	8003b80 <_free_r+0x78>
 8003b7a:	230c      	movs	r3, #12
 8003b7c:	6003      	str	r3, [r0, #0]
 8003b7e:	e7d6      	b.n	8003b2e <_free_r+0x26>
 8003b80:	6825      	ldr	r5, [r4, #0]
 8003b82:	1961      	adds	r1, r4, r5
 8003b84:	428b      	cmp	r3, r1
 8003b86:	bf04      	itt	eq
 8003b88:	6819      	ldreq	r1, [r3, #0]
 8003b8a:	685b      	ldreq	r3, [r3, #4]
 8003b8c:	6063      	str	r3, [r4, #4]
 8003b8e:	bf04      	itt	eq
 8003b90:	1949      	addeq	r1, r1, r5
 8003b92:	6021      	streq	r1, [r4, #0]
 8003b94:	6054      	str	r4, [r2, #4]
 8003b96:	e7ca      	b.n	8003b2e <_free_r+0x26>
 8003b98:	b003      	add	sp, #12
 8003b9a:	bd30      	pop	{r4, r5, pc}
 8003b9c:	20002820 	.word	0x20002820

08003ba0 <sbrk_aligned>:
 8003ba0:	b570      	push	{r4, r5, r6, lr}
 8003ba2:	4e0e      	ldr	r6, [pc, #56]	; (8003bdc <sbrk_aligned+0x3c>)
 8003ba4:	460c      	mov	r4, r1
 8003ba6:	6831      	ldr	r1, [r6, #0]
 8003ba8:	4605      	mov	r5, r0
 8003baa:	b911      	cbnz	r1, 8003bb2 <sbrk_aligned+0x12>
 8003bac:	f000 fcbc 	bl	8004528 <_sbrk_r>
 8003bb0:	6030      	str	r0, [r6, #0]
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	4628      	mov	r0, r5
 8003bb6:	f000 fcb7 	bl	8004528 <_sbrk_r>
 8003bba:	1c43      	adds	r3, r0, #1
 8003bbc:	d00a      	beq.n	8003bd4 <sbrk_aligned+0x34>
 8003bbe:	1cc4      	adds	r4, r0, #3
 8003bc0:	f024 0403 	bic.w	r4, r4, #3
 8003bc4:	42a0      	cmp	r0, r4
 8003bc6:	d007      	beq.n	8003bd8 <sbrk_aligned+0x38>
 8003bc8:	1a21      	subs	r1, r4, r0
 8003bca:	4628      	mov	r0, r5
 8003bcc:	f000 fcac 	bl	8004528 <_sbrk_r>
 8003bd0:	3001      	adds	r0, #1
 8003bd2:	d101      	bne.n	8003bd8 <sbrk_aligned+0x38>
 8003bd4:	f04f 34ff 	mov.w	r4, #4294967295
 8003bd8:	4620      	mov	r0, r4
 8003bda:	bd70      	pop	{r4, r5, r6, pc}
 8003bdc:	20002824 	.word	0x20002824

08003be0 <_malloc_r>:
 8003be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003be4:	1ccd      	adds	r5, r1, #3
 8003be6:	f025 0503 	bic.w	r5, r5, #3
 8003bea:	3508      	adds	r5, #8
 8003bec:	2d0c      	cmp	r5, #12
 8003bee:	bf38      	it	cc
 8003bf0:	250c      	movcc	r5, #12
 8003bf2:	2d00      	cmp	r5, #0
 8003bf4:	4607      	mov	r7, r0
 8003bf6:	db01      	blt.n	8003bfc <_malloc_r+0x1c>
 8003bf8:	42a9      	cmp	r1, r5
 8003bfa:	d905      	bls.n	8003c08 <_malloc_r+0x28>
 8003bfc:	230c      	movs	r3, #12
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	2600      	movs	r6, #0
 8003c02:	4630      	mov	r0, r6
 8003c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003cdc <_malloc_r+0xfc>
 8003c0c:	f000 f868 	bl	8003ce0 <__malloc_lock>
 8003c10:	f8d8 3000 	ldr.w	r3, [r8]
 8003c14:	461c      	mov	r4, r3
 8003c16:	bb5c      	cbnz	r4, 8003c70 <_malloc_r+0x90>
 8003c18:	4629      	mov	r1, r5
 8003c1a:	4638      	mov	r0, r7
 8003c1c:	f7ff ffc0 	bl	8003ba0 <sbrk_aligned>
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	4604      	mov	r4, r0
 8003c24:	d155      	bne.n	8003cd2 <_malloc_r+0xf2>
 8003c26:	f8d8 4000 	ldr.w	r4, [r8]
 8003c2a:	4626      	mov	r6, r4
 8003c2c:	2e00      	cmp	r6, #0
 8003c2e:	d145      	bne.n	8003cbc <_malloc_r+0xdc>
 8003c30:	2c00      	cmp	r4, #0
 8003c32:	d048      	beq.n	8003cc6 <_malloc_r+0xe6>
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	4631      	mov	r1, r6
 8003c38:	4638      	mov	r0, r7
 8003c3a:	eb04 0903 	add.w	r9, r4, r3
 8003c3e:	f000 fc73 	bl	8004528 <_sbrk_r>
 8003c42:	4581      	cmp	r9, r0
 8003c44:	d13f      	bne.n	8003cc6 <_malloc_r+0xe6>
 8003c46:	6821      	ldr	r1, [r4, #0]
 8003c48:	1a6d      	subs	r5, r5, r1
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	4638      	mov	r0, r7
 8003c4e:	f7ff ffa7 	bl	8003ba0 <sbrk_aligned>
 8003c52:	3001      	adds	r0, #1
 8003c54:	d037      	beq.n	8003cc6 <_malloc_r+0xe6>
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	442b      	add	r3, r5
 8003c5a:	6023      	str	r3, [r4, #0]
 8003c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d038      	beq.n	8003cd6 <_malloc_r+0xf6>
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	42a2      	cmp	r2, r4
 8003c68:	d12b      	bne.n	8003cc2 <_malloc_r+0xe2>
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	605a      	str	r2, [r3, #4]
 8003c6e:	e00f      	b.n	8003c90 <_malloc_r+0xb0>
 8003c70:	6822      	ldr	r2, [r4, #0]
 8003c72:	1b52      	subs	r2, r2, r5
 8003c74:	d41f      	bmi.n	8003cb6 <_malloc_r+0xd6>
 8003c76:	2a0b      	cmp	r2, #11
 8003c78:	d917      	bls.n	8003caa <_malloc_r+0xca>
 8003c7a:	1961      	adds	r1, r4, r5
 8003c7c:	42a3      	cmp	r3, r4
 8003c7e:	6025      	str	r5, [r4, #0]
 8003c80:	bf18      	it	ne
 8003c82:	6059      	strne	r1, [r3, #4]
 8003c84:	6863      	ldr	r3, [r4, #4]
 8003c86:	bf08      	it	eq
 8003c88:	f8c8 1000 	streq.w	r1, [r8]
 8003c8c:	5162      	str	r2, [r4, r5]
 8003c8e:	604b      	str	r3, [r1, #4]
 8003c90:	4638      	mov	r0, r7
 8003c92:	f104 060b 	add.w	r6, r4, #11
 8003c96:	f000 f829 	bl	8003cec <__malloc_unlock>
 8003c9a:	f026 0607 	bic.w	r6, r6, #7
 8003c9e:	1d23      	adds	r3, r4, #4
 8003ca0:	1af2      	subs	r2, r6, r3
 8003ca2:	d0ae      	beq.n	8003c02 <_malloc_r+0x22>
 8003ca4:	1b9b      	subs	r3, r3, r6
 8003ca6:	50a3      	str	r3, [r4, r2]
 8003ca8:	e7ab      	b.n	8003c02 <_malloc_r+0x22>
 8003caa:	42a3      	cmp	r3, r4
 8003cac:	6862      	ldr	r2, [r4, #4]
 8003cae:	d1dd      	bne.n	8003c6c <_malloc_r+0x8c>
 8003cb0:	f8c8 2000 	str.w	r2, [r8]
 8003cb4:	e7ec      	b.n	8003c90 <_malloc_r+0xb0>
 8003cb6:	4623      	mov	r3, r4
 8003cb8:	6864      	ldr	r4, [r4, #4]
 8003cba:	e7ac      	b.n	8003c16 <_malloc_r+0x36>
 8003cbc:	4634      	mov	r4, r6
 8003cbe:	6876      	ldr	r6, [r6, #4]
 8003cc0:	e7b4      	b.n	8003c2c <_malloc_r+0x4c>
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	e7cc      	b.n	8003c60 <_malloc_r+0x80>
 8003cc6:	230c      	movs	r3, #12
 8003cc8:	603b      	str	r3, [r7, #0]
 8003cca:	4638      	mov	r0, r7
 8003ccc:	f000 f80e 	bl	8003cec <__malloc_unlock>
 8003cd0:	e797      	b.n	8003c02 <_malloc_r+0x22>
 8003cd2:	6025      	str	r5, [r4, #0]
 8003cd4:	e7dc      	b.n	8003c90 <_malloc_r+0xb0>
 8003cd6:	605b      	str	r3, [r3, #4]
 8003cd8:	deff      	udf	#255	; 0xff
 8003cda:	bf00      	nop
 8003cdc:	20002820 	.word	0x20002820

08003ce0 <__malloc_lock>:
 8003ce0:	4801      	ldr	r0, [pc, #4]	; (8003ce8 <__malloc_lock+0x8>)
 8003ce2:	f7ff bf0e 	b.w	8003b02 <__retarget_lock_acquire_recursive>
 8003ce6:	bf00      	nop
 8003ce8:	2000281c 	.word	0x2000281c

08003cec <__malloc_unlock>:
 8003cec:	4801      	ldr	r0, [pc, #4]	; (8003cf4 <__malloc_unlock+0x8>)
 8003cee:	f7ff bf09 	b.w	8003b04 <__retarget_lock_release_recursive>
 8003cf2:	bf00      	nop
 8003cf4:	2000281c 	.word	0x2000281c

08003cf8 <__sfputc_r>:
 8003cf8:	6893      	ldr	r3, [r2, #8]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	b410      	push	{r4}
 8003d00:	6093      	str	r3, [r2, #8]
 8003d02:	da08      	bge.n	8003d16 <__sfputc_r+0x1e>
 8003d04:	6994      	ldr	r4, [r2, #24]
 8003d06:	42a3      	cmp	r3, r4
 8003d08:	db01      	blt.n	8003d0e <__sfputc_r+0x16>
 8003d0a:	290a      	cmp	r1, #10
 8003d0c:	d103      	bne.n	8003d16 <__sfputc_r+0x1e>
 8003d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d12:	f000 bb73 	b.w	80043fc <__swbuf_r>
 8003d16:	6813      	ldr	r3, [r2, #0]
 8003d18:	1c58      	adds	r0, r3, #1
 8003d1a:	6010      	str	r0, [r2, #0]
 8003d1c:	7019      	strb	r1, [r3, #0]
 8003d1e:	4608      	mov	r0, r1
 8003d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <__sfputs_r>:
 8003d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d28:	4606      	mov	r6, r0
 8003d2a:	460f      	mov	r7, r1
 8003d2c:	4614      	mov	r4, r2
 8003d2e:	18d5      	adds	r5, r2, r3
 8003d30:	42ac      	cmp	r4, r5
 8003d32:	d101      	bne.n	8003d38 <__sfputs_r+0x12>
 8003d34:	2000      	movs	r0, #0
 8003d36:	e007      	b.n	8003d48 <__sfputs_r+0x22>
 8003d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d3c:	463a      	mov	r2, r7
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f7ff ffda 	bl	8003cf8 <__sfputc_r>
 8003d44:	1c43      	adds	r3, r0, #1
 8003d46:	d1f3      	bne.n	8003d30 <__sfputs_r+0xa>
 8003d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d4c <_vfiprintf_r>:
 8003d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d50:	460d      	mov	r5, r1
 8003d52:	b09d      	sub	sp, #116	; 0x74
 8003d54:	4614      	mov	r4, r2
 8003d56:	4698      	mov	r8, r3
 8003d58:	4606      	mov	r6, r0
 8003d5a:	b118      	cbz	r0, 8003d64 <_vfiprintf_r+0x18>
 8003d5c:	6a03      	ldr	r3, [r0, #32]
 8003d5e:	b90b      	cbnz	r3, 8003d64 <_vfiprintf_r+0x18>
 8003d60:	f7ff fdca 	bl	80038f8 <__sinit>
 8003d64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d66:	07d9      	lsls	r1, r3, #31
 8003d68:	d405      	bmi.n	8003d76 <_vfiprintf_r+0x2a>
 8003d6a:	89ab      	ldrh	r3, [r5, #12]
 8003d6c:	059a      	lsls	r2, r3, #22
 8003d6e:	d402      	bmi.n	8003d76 <_vfiprintf_r+0x2a>
 8003d70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d72:	f7ff fec6 	bl	8003b02 <__retarget_lock_acquire_recursive>
 8003d76:	89ab      	ldrh	r3, [r5, #12]
 8003d78:	071b      	lsls	r3, r3, #28
 8003d7a:	d501      	bpl.n	8003d80 <_vfiprintf_r+0x34>
 8003d7c:	692b      	ldr	r3, [r5, #16]
 8003d7e:	b99b      	cbnz	r3, 8003da8 <_vfiprintf_r+0x5c>
 8003d80:	4629      	mov	r1, r5
 8003d82:	4630      	mov	r0, r6
 8003d84:	f000 fb78 	bl	8004478 <__swsetup_r>
 8003d88:	b170      	cbz	r0, 8003da8 <_vfiprintf_r+0x5c>
 8003d8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d8c:	07dc      	lsls	r4, r3, #31
 8003d8e:	d504      	bpl.n	8003d9a <_vfiprintf_r+0x4e>
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295
 8003d94:	b01d      	add	sp, #116	; 0x74
 8003d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d9a:	89ab      	ldrh	r3, [r5, #12]
 8003d9c:	0598      	lsls	r0, r3, #22
 8003d9e:	d4f7      	bmi.n	8003d90 <_vfiprintf_r+0x44>
 8003da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003da2:	f7ff feaf 	bl	8003b04 <__retarget_lock_release_recursive>
 8003da6:	e7f3      	b.n	8003d90 <_vfiprintf_r+0x44>
 8003da8:	2300      	movs	r3, #0
 8003daa:	9309      	str	r3, [sp, #36]	; 0x24
 8003dac:	2320      	movs	r3, #32
 8003dae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003db2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003db6:	2330      	movs	r3, #48	; 0x30
 8003db8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003f6c <_vfiprintf_r+0x220>
 8003dbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dc0:	f04f 0901 	mov.w	r9, #1
 8003dc4:	4623      	mov	r3, r4
 8003dc6:	469a      	mov	sl, r3
 8003dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dcc:	b10a      	cbz	r2, 8003dd2 <_vfiprintf_r+0x86>
 8003dce:	2a25      	cmp	r2, #37	; 0x25
 8003dd0:	d1f9      	bne.n	8003dc6 <_vfiprintf_r+0x7a>
 8003dd2:	ebba 0b04 	subs.w	fp, sl, r4
 8003dd6:	d00b      	beq.n	8003df0 <_vfiprintf_r+0xa4>
 8003dd8:	465b      	mov	r3, fp
 8003dda:	4622      	mov	r2, r4
 8003ddc:	4629      	mov	r1, r5
 8003dde:	4630      	mov	r0, r6
 8003de0:	f7ff ffa1 	bl	8003d26 <__sfputs_r>
 8003de4:	3001      	adds	r0, #1
 8003de6:	f000 80a9 	beq.w	8003f3c <_vfiprintf_r+0x1f0>
 8003dea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dec:	445a      	add	r2, fp
 8003dee:	9209      	str	r2, [sp, #36]	; 0x24
 8003df0:	f89a 3000 	ldrb.w	r3, [sl]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80a1 	beq.w	8003f3c <_vfiprintf_r+0x1f0>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003e00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e04:	f10a 0a01 	add.w	sl, sl, #1
 8003e08:	9304      	str	r3, [sp, #16]
 8003e0a:	9307      	str	r3, [sp, #28]
 8003e0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e10:	931a      	str	r3, [sp, #104]	; 0x68
 8003e12:	4654      	mov	r4, sl
 8003e14:	2205      	movs	r2, #5
 8003e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e1a:	4854      	ldr	r0, [pc, #336]	; (8003f6c <_vfiprintf_r+0x220>)
 8003e1c:	f7fc f9e0 	bl	80001e0 <memchr>
 8003e20:	9a04      	ldr	r2, [sp, #16]
 8003e22:	b9d8      	cbnz	r0, 8003e5c <_vfiprintf_r+0x110>
 8003e24:	06d1      	lsls	r1, r2, #27
 8003e26:	bf44      	itt	mi
 8003e28:	2320      	movmi	r3, #32
 8003e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e2e:	0713      	lsls	r3, r2, #28
 8003e30:	bf44      	itt	mi
 8003e32:	232b      	movmi	r3, #43	; 0x2b
 8003e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e38:	f89a 3000 	ldrb.w	r3, [sl]
 8003e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e3e:	d015      	beq.n	8003e6c <_vfiprintf_r+0x120>
 8003e40:	9a07      	ldr	r2, [sp, #28]
 8003e42:	4654      	mov	r4, sl
 8003e44:	2000      	movs	r0, #0
 8003e46:	f04f 0c0a 	mov.w	ip, #10
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e50:	3b30      	subs	r3, #48	; 0x30
 8003e52:	2b09      	cmp	r3, #9
 8003e54:	d94d      	bls.n	8003ef2 <_vfiprintf_r+0x1a6>
 8003e56:	b1b0      	cbz	r0, 8003e86 <_vfiprintf_r+0x13a>
 8003e58:	9207      	str	r2, [sp, #28]
 8003e5a:	e014      	b.n	8003e86 <_vfiprintf_r+0x13a>
 8003e5c:	eba0 0308 	sub.w	r3, r0, r8
 8003e60:	fa09 f303 	lsl.w	r3, r9, r3
 8003e64:	4313      	orrs	r3, r2
 8003e66:	9304      	str	r3, [sp, #16]
 8003e68:	46a2      	mov	sl, r4
 8003e6a:	e7d2      	b.n	8003e12 <_vfiprintf_r+0xc6>
 8003e6c:	9b03      	ldr	r3, [sp, #12]
 8003e6e:	1d19      	adds	r1, r3, #4
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	9103      	str	r1, [sp, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bfbb      	ittet	lt
 8003e78:	425b      	neglt	r3, r3
 8003e7a:	f042 0202 	orrlt.w	r2, r2, #2
 8003e7e:	9307      	strge	r3, [sp, #28]
 8003e80:	9307      	strlt	r3, [sp, #28]
 8003e82:	bfb8      	it	lt
 8003e84:	9204      	strlt	r2, [sp, #16]
 8003e86:	7823      	ldrb	r3, [r4, #0]
 8003e88:	2b2e      	cmp	r3, #46	; 0x2e
 8003e8a:	d10c      	bne.n	8003ea6 <_vfiprintf_r+0x15a>
 8003e8c:	7863      	ldrb	r3, [r4, #1]
 8003e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e90:	d134      	bne.n	8003efc <_vfiprintf_r+0x1b0>
 8003e92:	9b03      	ldr	r3, [sp, #12]
 8003e94:	1d1a      	adds	r2, r3, #4
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	9203      	str	r2, [sp, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	bfb8      	it	lt
 8003e9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ea2:	3402      	adds	r4, #2
 8003ea4:	9305      	str	r3, [sp, #20]
 8003ea6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003f7c <_vfiprintf_r+0x230>
 8003eaa:	7821      	ldrb	r1, [r4, #0]
 8003eac:	2203      	movs	r2, #3
 8003eae:	4650      	mov	r0, sl
 8003eb0:	f7fc f996 	bl	80001e0 <memchr>
 8003eb4:	b138      	cbz	r0, 8003ec6 <_vfiprintf_r+0x17a>
 8003eb6:	9b04      	ldr	r3, [sp, #16]
 8003eb8:	eba0 000a 	sub.w	r0, r0, sl
 8003ebc:	2240      	movs	r2, #64	; 0x40
 8003ebe:	4082      	lsls	r2, r0
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	3401      	adds	r4, #1
 8003ec4:	9304      	str	r3, [sp, #16]
 8003ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eca:	4829      	ldr	r0, [pc, #164]	; (8003f70 <_vfiprintf_r+0x224>)
 8003ecc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ed0:	2206      	movs	r2, #6
 8003ed2:	f7fc f985 	bl	80001e0 <memchr>
 8003ed6:	2800      	cmp	r0, #0
 8003ed8:	d03f      	beq.n	8003f5a <_vfiprintf_r+0x20e>
 8003eda:	4b26      	ldr	r3, [pc, #152]	; (8003f74 <_vfiprintf_r+0x228>)
 8003edc:	bb1b      	cbnz	r3, 8003f26 <_vfiprintf_r+0x1da>
 8003ede:	9b03      	ldr	r3, [sp, #12]
 8003ee0:	3307      	adds	r3, #7
 8003ee2:	f023 0307 	bic.w	r3, r3, #7
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	9303      	str	r3, [sp, #12]
 8003eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eec:	443b      	add	r3, r7
 8003eee:	9309      	str	r3, [sp, #36]	; 0x24
 8003ef0:	e768      	b.n	8003dc4 <_vfiprintf_r+0x78>
 8003ef2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ef6:	460c      	mov	r4, r1
 8003ef8:	2001      	movs	r0, #1
 8003efa:	e7a6      	b.n	8003e4a <_vfiprintf_r+0xfe>
 8003efc:	2300      	movs	r3, #0
 8003efe:	3401      	adds	r4, #1
 8003f00:	9305      	str	r3, [sp, #20]
 8003f02:	4619      	mov	r1, r3
 8003f04:	f04f 0c0a 	mov.w	ip, #10
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f0e:	3a30      	subs	r2, #48	; 0x30
 8003f10:	2a09      	cmp	r2, #9
 8003f12:	d903      	bls.n	8003f1c <_vfiprintf_r+0x1d0>
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0c6      	beq.n	8003ea6 <_vfiprintf_r+0x15a>
 8003f18:	9105      	str	r1, [sp, #20]
 8003f1a:	e7c4      	b.n	8003ea6 <_vfiprintf_r+0x15a>
 8003f1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f20:	4604      	mov	r4, r0
 8003f22:	2301      	movs	r3, #1
 8003f24:	e7f0      	b.n	8003f08 <_vfiprintf_r+0x1bc>
 8003f26:	ab03      	add	r3, sp, #12
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	462a      	mov	r2, r5
 8003f2c:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <_vfiprintf_r+0x22c>)
 8003f2e:	a904      	add	r1, sp, #16
 8003f30:	4630      	mov	r0, r6
 8003f32:	f3af 8000 	nop.w
 8003f36:	4607      	mov	r7, r0
 8003f38:	1c78      	adds	r0, r7, #1
 8003f3a:	d1d6      	bne.n	8003eea <_vfiprintf_r+0x19e>
 8003f3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f3e:	07d9      	lsls	r1, r3, #31
 8003f40:	d405      	bmi.n	8003f4e <_vfiprintf_r+0x202>
 8003f42:	89ab      	ldrh	r3, [r5, #12]
 8003f44:	059a      	lsls	r2, r3, #22
 8003f46:	d402      	bmi.n	8003f4e <_vfiprintf_r+0x202>
 8003f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f4a:	f7ff fddb 	bl	8003b04 <__retarget_lock_release_recursive>
 8003f4e:	89ab      	ldrh	r3, [r5, #12]
 8003f50:	065b      	lsls	r3, r3, #25
 8003f52:	f53f af1d 	bmi.w	8003d90 <_vfiprintf_r+0x44>
 8003f56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f58:	e71c      	b.n	8003d94 <_vfiprintf_r+0x48>
 8003f5a:	ab03      	add	r3, sp, #12
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	462a      	mov	r2, r5
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <_vfiprintf_r+0x22c>)
 8003f62:	a904      	add	r1, sp, #16
 8003f64:	4630      	mov	r0, r6
 8003f66:	f000 f879 	bl	800405c <_printf_i>
 8003f6a:	e7e4      	b.n	8003f36 <_vfiprintf_r+0x1ea>
 8003f6c:	08004688 	.word	0x08004688
 8003f70:	08004692 	.word	0x08004692
 8003f74:	00000000 	.word	0x00000000
 8003f78:	08003d27 	.word	0x08003d27
 8003f7c:	0800468e 	.word	0x0800468e

08003f80 <_printf_common>:
 8003f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f84:	4616      	mov	r6, r2
 8003f86:	4699      	mov	r9, r3
 8003f88:	688a      	ldr	r2, [r1, #8]
 8003f8a:	690b      	ldr	r3, [r1, #16]
 8003f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f90:	4293      	cmp	r3, r2
 8003f92:	bfb8      	it	lt
 8003f94:	4613      	movlt	r3, r2
 8003f96:	6033      	str	r3, [r6, #0]
 8003f98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f9c:	4607      	mov	r7, r0
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	b10a      	cbz	r2, 8003fa6 <_printf_common+0x26>
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	6033      	str	r3, [r6, #0]
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	0699      	lsls	r1, r3, #26
 8003faa:	bf42      	ittt	mi
 8003fac:	6833      	ldrmi	r3, [r6, #0]
 8003fae:	3302      	addmi	r3, #2
 8003fb0:	6033      	strmi	r3, [r6, #0]
 8003fb2:	6825      	ldr	r5, [r4, #0]
 8003fb4:	f015 0506 	ands.w	r5, r5, #6
 8003fb8:	d106      	bne.n	8003fc8 <_printf_common+0x48>
 8003fba:	f104 0a19 	add.w	sl, r4, #25
 8003fbe:	68e3      	ldr	r3, [r4, #12]
 8003fc0:	6832      	ldr	r2, [r6, #0]
 8003fc2:	1a9b      	subs	r3, r3, r2
 8003fc4:	42ab      	cmp	r3, r5
 8003fc6:	dc26      	bgt.n	8004016 <_printf_common+0x96>
 8003fc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fcc:	1e13      	subs	r3, r2, #0
 8003fce:	6822      	ldr	r2, [r4, #0]
 8003fd0:	bf18      	it	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	0692      	lsls	r2, r2, #26
 8003fd6:	d42b      	bmi.n	8004030 <_printf_common+0xb0>
 8003fd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fdc:	4649      	mov	r1, r9
 8003fde:	4638      	mov	r0, r7
 8003fe0:	47c0      	blx	r8
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	d01e      	beq.n	8004024 <_printf_common+0xa4>
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	6922      	ldr	r2, [r4, #16]
 8003fea:	f003 0306 	and.w	r3, r3, #6
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	bf02      	ittt	eq
 8003ff2:	68e5      	ldreq	r5, [r4, #12]
 8003ff4:	6833      	ldreq	r3, [r6, #0]
 8003ff6:	1aed      	subeq	r5, r5, r3
 8003ff8:	68a3      	ldr	r3, [r4, #8]
 8003ffa:	bf0c      	ite	eq
 8003ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004000:	2500      	movne	r5, #0
 8004002:	4293      	cmp	r3, r2
 8004004:	bfc4      	itt	gt
 8004006:	1a9b      	subgt	r3, r3, r2
 8004008:	18ed      	addgt	r5, r5, r3
 800400a:	2600      	movs	r6, #0
 800400c:	341a      	adds	r4, #26
 800400e:	42b5      	cmp	r5, r6
 8004010:	d11a      	bne.n	8004048 <_printf_common+0xc8>
 8004012:	2000      	movs	r0, #0
 8004014:	e008      	b.n	8004028 <_printf_common+0xa8>
 8004016:	2301      	movs	r3, #1
 8004018:	4652      	mov	r2, sl
 800401a:	4649      	mov	r1, r9
 800401c:	4638      	mov	r0, r7
 800401e:	47c0      	blx	r8
 8004020:	3001      	adds	r0, #1
 8004022:	d103      	bne.n	800402c <_printf_common+0xac>
 8004024:	f04f 30ff 	mov.w	r0, #4294967295
 8004028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800402c:	3501      	adds	r5, #1
 800402e:	e7c6      	b.n	8003fbe <_printf_common+0x3e>
 8004030:	18e1      	adds	r1, r4, r3
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	2030      	movs	r0, #48	; 0x30
 8004036:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800403a:	4422      	add	r2, r4
 800403c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004040:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004044:	3302      	adds	r3, #2
 8004046:	e7c7      	b.n	8003fd8 <_printf_common+0x58>
 8004048:	2301      	movs	r3, #1
 800404a:	4622      	mov	r2, r4
 800404c:	4649      	mov	r1, r9
 800404e:	4638      	mov	r0, r7
 8004050:	47c0      	blx	r8
 8004052:	3001      	adds	r0, #1
 8004054:	d0e6      	beq.n	8004024 <_printf_common+0xa4>
 8004056:	3601      	adds	r6, #1
 8004058:	e7d9      	b.n	800400e <_printf_common+0x8e>
	...

0800405c <_printf_i>:
 800405c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004060:	7e0f      	ldrb	r7, [r1, #24]
 8004062:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004064:	2f78      	cmp	r7, #120	; 0x78
 8004066:	4691      	mov	r9, r2
 8004068:	4680      	mov	r8, r0
 800406a:	460c      	mov	r4, r1
 800406c:	469a      	mov	sl, r3
 800406e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004072:	d807      	bhi.n	8004084 <_printf_i+0x28>
 8004074:	2f62      	cmp	r7, #98	; 0x62
 8004076:	d80a      	bhi.n	800408e <_printf_i+0x32>
 8004078:	2f00      	cmp	r7, #0
 800407a:	f000 80d4 	beq.w	8004226 <_printf_i+0x1ca>
 800407e:	2f58      	cmp	r7, #88	; 0x58
 8004080:	f000 80c0 	beq.w	8004204 <_printf_i+0x1a8>
 8004084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800408c:	e03a      	b.n	8004104 <_printf_i+0xa8>
 800408e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004092:	2b15      	cmp	r3, #21
 8004094:	d8f6      	bhi.n	8004084 <_printf_i+0x28>
 8004096:	a101      	add	r1, pc, #4	; (adr r1, 800409c <_printf_i+0x40>)
 8004098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800409c:	080040f5 	.word	0x080040f5
 80040a0:	08004109 	.word	0x08004109
 80040a4:	08004085 	.word	0x08004085
 80040a8:	08004085 	.word	0x08004085
 80040ac:	08004085 	.word	0x08004085
 80040b0:	08004085 	.word	0x08004085
 80040b4:	08004109 	.word	0x08004109
 80040b8:	08004085 	.word	0x08004085
 80040bc:	08004085 	.word	0x08004085
 80040c0:	08004085 	.word	0x08004085
 80040c4:	08004085 	.word	0x08004085
 80040c8:	0800420d 	.word	0x0800420d
 80040cc:	08004135 	.word	0x08004135
 80040d0:	080041c7 	.word	0x080041c7
 80040d4:	08004085 	.word	0x08004085
 80040d8:	08004085 	.word	0x08004085
 80040dc:	0800422f 	.word	0x0800422f
 80040e0:	08004085 	.word	0x08004085
 80040e4:	08004135 	.word	0x08004135
 80040e8:	08004085 	.word	0x08004085
 80040ec:	08004085 	.word	0x08004085
 80040f0:	080041cf 	.word	0x080041cf
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	1d1a      	adds	r2, r3, #4
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	602a      	str	r2, [r5, #0]
 80040fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004104:	2301      	movs	r3, #1
 8004106:	e09f      	b.n	8004248 <_printf_i+0x1ec>
 8004108:	6820      	ldr	r0, [r4, #0]
 800410a:	682b      	ldr	r3, [r5, #0]
 800410c:	0607      	lsls	r7, r0, #24
 800410e:	f103 0104 	add.w	r1, r3, #4
 8004112:	6029      	str	r1, [r5, #0]
 8004114:	d501      	bpl.n	800411a <_printf_i+0xbe>
 8004116:	681e      	ldr	r6, [r3, #0]
 8004118:	e003      	b.n	8004122 <_printf_i+0xc6>
 800411a:	0646      	lsls	r6, r0, #25
 800411c:	d5fb      	bpl.n	8004116 <_printf_i+0xba>
 800411e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004122:	2e00      	cmp	r6, #0
 8004124:	da03      	bge.n	800412e <_printf_i+0xd2>
 8004126:	232d      	movs	r3, #45	; 0x2d
 8004128:	4276      	negs	r6, r6
 800412a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800412e:	485a      	ldr	r0, [pc, #360]	; (8004298 <_printf_i+0x23c>)
 8004130:	230a      	movs	r3, #10
 8004132:	e012      	b.n	800415a <_printf_i+0xfe>
 8004134:	682b      	ldr	r3, [r5, #0]
 8004136:	6820      	ldr	r0, [r4, #0]
 8004138:	1d19      	adds	r1, r3, #4
 800413a:	6029      	str	r1, [r5, #0]
 800413c:	0605      	lsls	r5, r0, #24
 800413e:	d501      	bpl.n	8004144 <_printf_i+0xe8>
 8004140:	681e      	ldr	r6, [r3, #0]
 8004142:	e002      	b.n	800414a <_printf_i+0xee>
 8004144:	0641      	lsls	r1, r0, #25
 8004146:	d5fb      	bpl.n	8004140 <_printf_i+0xe4>
 8004148:	881e      	ldrh	r6, [r3, #0]
 800414a:	4853      	ldr	r0, [pc, #332]	; (8004298 <_printf_i+0x23c>)
 800414c:	2f6f      	cmp	r7, #111	; 0x6f
 800414e:	bf0c      	ite	eq
 8004150:	2308      	moveq	r3, #8
 8004152:	230a      	movne	r3, #10
 8004154:	2100      	movs	r1, #0
 8004156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800415a:	6865      	ldr	r5, [r4, #4]
 800415c:	60a5      	str	r5, [r4, #8]
 800415e:	2d00      	cmp	r5, #0
 8004160:	bfa2      	ittt	ge
 8004162:	6821      	ldrge	r1, [r4, #0]
 8004164:	f021 0104 	bicge.w	r1, r1, #4
 8004168:	6021      	strge	r1, [r4, #0]
 800416a:	b90e      	cbnz	r6, 8004170 <_printf_i+0x114>
 800416c:	2d00      	cmp	r5, #0
 800416e:	d04b      	beq.n	8004208 <_printf_i+0x1ac>
 8004170:	4615      	mov	r5, r2
 8004172:	fbb6 f1f3 	udiv	r1, r6, r3
 8004176:	fb03 6711 	mls	r7, r3, r1, r6
 800417a:	5dc7      	ldrb	r7, [r0, r7]
 800417c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004180:	4637      	mov	r7, r6
 8004182:	42bb      	cmp	r3, r7
 8004184:	460e      	mov	r6, r1
 8004186:	d9f4      	bls.n	8004172 <_printf_i+0x116>
 8004188:	2b08      	cmp	r3, #8
 800418a:	d10b      	bne.n	80041a4 <_printf_i+0x148>
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	07de      	lsls	r6, r3, #31
 8004190:	d508      	bpl.n	80041a4 <_printf_i+0x148>
 8004192:	6923      	ldr	r3, [r4, #16]
 8004194:	6861      	ldr	r1, [r4, #4]
 8004196:	4299      	cmp	r1, r3
 8004198:	bfde      	ittt	le
 800419a:	2330      	movle	r3, #48	; 0x30
 800419c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041a4:	1b52      	subs	r2, r2, r5
 80041a6:	6122      	str	r2, [r4, #16]
 80041a8:	f8cd a000 	str.w	sl, [sp]
 80041ac:	464b      	mov	r3, r9
 80041ae:	aa03      	add	r2, sp, #12
 80041b0:	4621      	mov	r1, r4
 80041b2:	4640      	mov	r0, r8
 80041b4:	f7ff fee4 	bl	8003f80 <_printf_common>
 80041b8:	3001      	adds	r0, #1
 80041ba:	d14a      	bne.n	8004252 <_printf_i+0x1f6>
 80041bc:	f04f 30ff 	mov.w	r0, #4294967295
 80041c0:	b004      	add	sp, #16
 80041c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	f043 0320 	orr.w	r3, r3, #32
 80041cc:	6023      	str	r3, [r4, #0]
 80041ce:	4833      	ldr	r0, [pc, #204]	; (800429c <_printf_i+0x240>)
 80041d0:	2778      	movs	r7, #120	; 0x78
 80041d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	6829      	ldr	r1, [r5, #0]
 80041da:	061f      	lsls	r7, r3, #24
 80041dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80041e0:	d402      	bmi.n	80041e8 <_printf_i+0x18c>
 80041e2:	065f      	lsls	r7, r3, #25
 80041e4:	bf48      	it	mi
 80041e6:	b2b6      	uxthmi	r6, r6
 80041e8:	07df      	lsls	r7, r3, #31
 80041ea:	bf48      	it	mi
 80041ec:	f043 0320 	orrmi.w	r3, r3, #32
 80041f0:	6029      	str	r1, [r5, #0]
 80041f2:	bf48      	it	mi
 80041f4:	6023      	strmi	r3, [r4, #0]
 80041f6:	b91e      	cbnz	r6, 8004200 <_printf_i+0x1a4>
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	f023 0320 	bic.w	r3, r3, #32
 80041fe:	6023      	str	r3, [r4, #0]
 8004200:	2310      	movs	r3, #16
 8004202:	e7a7      	b.n	8004154 <_printf_i+0xf8>
 8004204:	4824      	ldr	r0, [pc, #144]	; (8004298 <_printf_i+0x23c>)
 8004206:	e7e4      	b.n	80041d2 <_printf_i+0x176>
 8004208:	4615      	mov	r5, r2
 800420a:	e7bd      	b.n	8004188 <_printf_i+0x12c>
 800420c:	682b      	ldr	r3, [r5, #0]
 800420e:	6826      	ldr	r6, [r4, #0]
 8004210:	6961      	ldr	r1, [r4, #20]
 8004212:	1d18      	adds	r0, r3, #4
 8004214:	6028      	str	r0, [r5, #0]
 8004216:	0635      	lsls	r5, r6, #24
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	d501      	bpl.n	8004220 <_printf_i+0x1c4>
 800421c:	6019      	str	r1, [r3, #0]
 800421e:	e002      	b.n	8004226 <_printf_i+0x1ca>
 8004220:	0670      	lsls	r0, r6, #25
 8004222:	d5fb      	bpl.n	800421c <_printf_i+0x1c0>
 8004224:	8019      	strh	r1, [r3, #0]
 8004226:	2300      	movs	r3, #0
 8004228:	6123      	str	r3, [r4, #16]
 800422a:	4615      	mov	r5, r2
 800422c:	e7bc      	b.n	80041a8 <_printf_i+0x14c>
 800422e:	682b      	ldr	r3, [r5, #0]
 8004230:	1d1a      	adds	r2, r3, #4
 8004232:	602a      	str	r2, [r5, #0]
 8004234:	681d      	ldr	r5, [r3, #0]
 8004236:	6862      	ldr	r2, [r4, #4]
 8004238:	2100      	movs	r1, #0
 800423a:	4628      	mov	r0, r5
 800423c:	f7fb ffd0 	bl	80001e0 <memchr>
 8004240:	b108      	cbz	r0, 8004246 <_printf_i+0x1ea>
 8004242:	1b40      	subs	r0, r0, r5
 8004244:	6060      	str	r0, [r4, #4]
 8004246:	6863      	ldr	r3, [r4, #4]
 8004248:	6123      	str	r3, [r4, #16]
 800424a:	2300      	movs	r3, #0
 800424c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004250:	e7aa      	b.n	80041a8 <_printf_i+0x14c>
 8004252:	6923      	ldr	r3, [r4, #16]
 8004254:	462a      	mov	r2, r5
 8004256:	4649      	mov	r1, r9
 8004258:	4640      	mov	r0, r8
 800425a:	47d0      	blx	sl
 800425c:	3001      	adds	r0, #1
 800425e:	d0ad      	beq.n	80041bc <_printf_i+0x160>
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	079b      	lsls	r3, r3, #30
 8004264:	d413      	bmi.n	800428e <_printf_i+0x232>
 8004266:	68e0      	ldr	r0, [r4, #12]
 8004268:	9b03      	ldr	r3, [sp, #12]
 800426a:	4298      	cmp	r0, r3
 800426c:	bfb8      	it	lt
 800426e:	4618      	movlt	r0, r3
 8004270:	e7a6      	b.n	80041c0 <_printf_i+0x164>
 8004272:	2301      	movs	r3, #1
 8004274:	4632      	mov	r2, r6
 8004276:	4649      	mov	r1, r9
 8004278:	4640      	mov	r0, r8
 800427a:	47d0      	blx	sl
 800427c:	3001      	adds	r0, #1
 800427e:	d09d      	beq.n	80041bc <_printf_i+0x160>
 8004280:	3501      	adds	r5, #1
 8004282:	68e3      	ldr	r3, [r4, #12]
 8004284:	9903      	ldr	r1, [sp, #12]
 8004286:	1a5b      	subs	r3, r3, r1
 8004288:	42ab      	cmp	r3, r5
 800428a:	dcf2      	bgt.n	8004272 <_printf_i+0x216>
 800428c:	e7eb      	b.n	8004266 <_printf_i+0x20a>
 800428e:	2500      	movs	r5, #0
 8004290:	f104 0619 	add.w	r6, r4, #25
 8004294:	e7f5      	b.n	8004282 <_printf_i+0x226>
 8004296:	bf00      	nop
 8004298:	08004699 	.word	0x08004699
 800429c:	080046aa 	.word	0x080046aa

080042a0 <__sflush_r>:
 80042a0:	898a      	ldrh	r2, [r1, #12]
 80042a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042a6:	4605      	mov	r5, r0
 80042a8:	0710      	lsls	r0, r2, #28
 80042aa:	460c      	mov	r4, r1
 80042ac:	d458      	bmi.n	8004360 <__sflush_r+0xc0>
 80042ae:	684b      	ldr	r3, [r1, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	dc05      	bgt.n	80042c0 <__sflush_r+0x20>
 80042b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	dc02      	bgt.n	80042c0 <__sflush_r+0x20>
 80042ba:	2000      	movs	r0, #0
 80042bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042c2:	2e00      	cmp	r6, #0
 80042c4:	d0f9      	beq.n	80042ba <__sflush_r+0x1a>
 80042c6:	2300      	movs	r3, #0
 80042c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042cc:	682f      	ldr	r7, [r5, #0]
 80042ce:	6a21      	ldr	r1, [r4, #32]
 80042d0:	602b      	str	r3, [r5, #0]
 80042d2:	d032      	beq.n	800433a <__sflush_r+0x9a>
 80042d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042d6:	89a3      	ldrh	r3, [r4, #12]
 80042d8:	075a      	lsls	r2, r3, #29
 80042da:	d505      	bpl.n	80042e8 <__sflush_r+0x48>
 80042dc:	6863      	ldr	r3, [r4, #4]
 80042de:	1ac0      	subs	r0, r0, r3
 80042e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042e2:	b10b      	cbz	r3, 80042e8 <__sflush_r+0x48>
 80042e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042e6:	1ac0      	subs	r0, r0, r3
 80042e8:	2300      	movs	r3, #0
 80042ea:	4602      	mov	r2, r0
 80042ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042ee:	6a21      	ldr	r1, [r4, #32]
 80042f0:	4628      	mov	r0, r5
 80042f2:	47b0      	blx	r6
 80042f4:	1c43      	adds	r3, r0, #1
 80042f6:	89a3      	ldrh	r3, [r4, #12]
 80042f8:	d106      	bne.n	8004308 <__sflush_r+0x68>
 80042fa:	6829      	ldr	r1, [r5, #0]
 80042fc:	291d      	cmp	r1, #29
 80042fe:	d82b      	bhi.n	8004358 <__sflush_r+0xb8>
 8004300:	4a29      	ldr	r2, [pc, #164]	; (80043a8 <__sflush_r+0x108>)
 8004302:	410a      	asrs	r2, r1
 8004304:	07d6      	lsls	r6, r2, #31
 8004306:	d427      	bmi.n	8004358 <__sflush_r+0xb8>
 8004308:	2200      	movs	r2, #0
 800430a:	6062      	str	r2, [r4, #4]
 800430c:	04d9      	lsls	r1, r3, #19
 800430e:	6922      	ldr	r2, [r4, #16]
 8004310:	6022      	str	r2, [r4, #0]
 8004312:	d504      	bpl.n	800431e <__sflush_r+0x7e>
 8004314:	1c42      	adds	r2, r0, #1
 8004316:	d101      	bne.n	800431c <__sflush_r+0x7c>
 8004318:	682b      	ldr	r3, [r5, #0]
 800431a:	b903      	cbnz	r3, 800431e <__sflush_r+0x7e>
 800431c:	6560      	str	r0, [r4, #84]	; 0x54
 800431e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004320:	602f      	str	r7, [r5, #0]
 8004322:	2900      	cmp	r1, #0
 8004324:	d0c9      	beq.n	80042ba <__sflush_r+0x1a>
 8004326:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800432a:	4299      	cmp	r1, r3
 800432c:	d002      	beq.n	8004334 <__sflush_r+0x94>
 800432e:	4628      	mov	r0, r5
 8004330:	f7ff fbea 	bl	8003b08 <_free_r>
 8004334:	2000      	movs	r0, #0
 8004336:	6360      	str	r0, [r4, #52]	; 0x34
 8004338:	e7c0      	b.n	80042bc <__sflush_r+0x1c>
 800433a:	2301      	movs	r3, #1
 800433c:	4628      	mov	r0, r5
 800433e:	47b0      	blx	r6
 8004340:	1c41      	adds	r1, r0, #1
 8004342:	d1c8      	bne.n	80042d6 <__sflush_r+0x36>
 8004344:	682b      	ldr	r3, [r5, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0c5      	beq.n	80042d6 <__sflush_r+0x36>
 800434a:	2b1d      	cmp	r3, #29
 800434c:	d001      	beq.n	8004352 <__sflush_r+0xb2>
 800434e:	2b16      	cmp	r3, #22
 8004350:	d101      	bne.n	8004356 <__sflush_r+0xb6>
 8004352:	602f      	str	r7, [r5, #0]
 8004354:	e7b1      	b.n	80042ba <__sflush_r+0x1a>
 8004356:	89a3      	ldrh	r3, [r4, #12]
 8004358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800435c:	81a3      	strh	r3, [r4, #12]
 800435e:	e7ad      	b.n	80042bc <__sflush_r+0x1c>
 8004360:	690f      	ldr	r7, [r1, #16]
 8004362:	2f00      	cmp	r7, #0
 8004364:	d0a9      	beq.n	80042ba <__sflush_r+0x1a>
 8004366:	0793      	lsls	r3, r2, #30
 8004368:	680e      	ldr	r6, [r1, #0]
 800436a:	bf08      	it	eq
 800436c:	694b      	ldreq	r3, [r1, #20]
 800436e:	600f      	str	r7, [r1, #0]
 8004370:	bf18      	it	ne
 8004372:	2300      	movne	r3, #0
 8004374:	eba6 0807 	sub.w	r8, r6, r7
 8004378:	608b      	str	r3, [r1, #8]
 800437a:	f1b8 0f00 	cmp.w	r8, #0
 800437e:	dd9c      	ble.n	80042ba <__sflush_r+0x1a>
 8004380:	6a21      	ldr	r1, [r4, #32]
 8004382:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004384:	4643      	mov	r3, r8
 8004386:	463a      	mov	r2, r7
 8004388:	4628      	mov	r0, r5
 800438a:	47b0      	blx	r6
 800438c:	2800      	cmp	r0, #0
 800438e:	dc06      	bgt.n	800439e <__sflush_r+0xfe>
 8004390:	89a3      	ldrh	r3, [r4, #12]
 8004392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004396:	81a3      	strh	r3, [r4, #12]
 8004398:	f04f 30ff 	mov.w	r0, #4294967295
 800439c:	e78e      	b.n	80042bc <__sflush_r+0x1c>
 800439e:	4407      	add	r7, r0
 80043a0:	eba8 0800 	sub.w	r8, r8, r0
 80043a4:	e7e9      	b.n	800437a <__sflush_r+0xda>
 80043a6:	bf00      	nop
 80043a8:	dfbffffe 	.word	0xdfbffffe

080043ac <_fflush_r>:
 80043ac:	b538      	push	{r3, r4, r5, lr}
 80043ae:	690b      	ldr	r3, [r1, #16]
 80043b0:	4605      	mov	r5, r0
 80043b2:	460c      	mov	r4, r1
 80043b4:	b913      	cbnz	r3, 80043bc <_fflush_r+0x10>
 80043b6:	2500      	movs	r5, #0
 80043b8:	4628      	mov	r0, r5
 80043ba:	bd38      	pop	{r3, r4, r5, pc}
 80043bc:	b118      	cbz	r0, 80043c6 <_fflush_r+0x1a>
 80043be:	6a03      	ldr	r3, [r0, #32]
 80043c0:	b90b      	cbnz	r3, 80043c6 <_fflush_r+0x1a>
 80043c2:	f7ff fa99 	bl	80038f8 <__sinit>
 80043c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f3      	beq.n	80043b6 <_fflush_r+0xa>
 80043ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043d0:	07d0      	lsls	r0, r2, #31
 80043d2:	d404      	bmi.n	80043de <_fflush_r+0x32>
 80043d4:	0599      	lsls	r1, r3, #22
 80043d6:	d402      	bmi.n	80043de <_fflush_r+0x32>
 80043d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043da:	f7ff fb92 	bl	8003b02 <__retarget_lock_acquire_recursive>
 80043de:	4628      	mov	r0, r5
 80043e0:	4621      	mov	r1, r4
 80043e2:	f7ff ff5d 	bl	80042a0 <__sflush_r>
 80043e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043e8:	07da      	lsls	r2, r3, #31
 80043ea:	4605      	mov	r5, r0
 80043ec:	d4e4      	bmi.n	80043b8 <_fflush_r+0xc>
 80043ee:	89a3      	ldrh	r3, [r4, #12]
 80043f0:	059b      	lsls	r3, r3, #22
 80043f2:	d4e1      	bmi.n	80043b8 <_fflush_r+0xc>
 80043f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043f6:	f7ff fb85 	bl	8003b04 <__retarget_lock_release_recursive>
 80043fa:	e7dd      	b.n	80043b8 <_fflush_r+0xc>

080043fc <__swbuf_r>:
 80043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fe:	460e      	mov	r6, r1
 8004400:	4614      	mov	r4, r2
 8004402:	4605      	mov	r5, r0
 8004404:	b118      	cbz	r0, 800440e <__swbuf_r+0x12>
 8004406:	6a03      	ldr	r3, [r0, #32]
 8004408:	b90b      	cbnz	r3, 800440e <__swbuf_r+0x12>
 800440a:	f7ff fa75 	bl	80038f8 <__sinit>
 800440e:	69a3      	ldr	r3, [r4, #24]
 8004410:	60a3      	str	r3, [r4, #8]
 8004412:	89a3      	ldrh	r3, [r4, #12]
 8004414:	071a      	lsls	r2, r3, #28
 8004416:	d525      	bpl.n	8004464 <__swbuf_r+0x68>
 8004418:	6923      	ldr	r3, [r4, #16]
 800441a:	b31b      	cbz	r3, 8004464 <__swbuf_r+0x68>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	6922      	ldr	r2, [r4, #16]
 8004420:	1a98      	subs	r0, r3, r2
 8004422:	6963      	ldr	r3, [r4, #20]
 8004424:	b2f6      	uxtb	r6, r6
 8004426:	4283      	cmp	r3, r0
 8004428:	4637      	mov	r7, r6
 800442a:	dc04      	bgt.n	8004436 <__swbuf_r+0x3a>
 800442c:	4621      	mov	r1, r4
 800442e:	4628      	mov	r0, r5
 8004430:	f7ff ffbc 	bl	80043ac <_fflush_r>
 8004434:	b9e0      	cbnz	r0, 8004470 <__swbuf_r+0x74>
 8004436:	68a3      	ldr	r3, [r4, #8]
 8004438:	3b01      	subs	r3, #1
 800443a:	60a3      	str	r3, [r4, #8]
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	6022      	str	r2, [r4, #0]
 8004442:	701e      	strb	r6, [r3, #0]
 8004444:	6962      	ldr	r2, [r4, #20]
 8004446:	1c43      	adds	r3, r0, #1
 8004448:	429a      	cmp	r2, r3
 800444a:	d004      	beq.n	8004456 <__swbuf_r+0x5a>
 800444c:	89a3      	ldrh	r3, [r4, #12]
 800444e:	07db      	lsls	r3, r3, #31
 8004450:	d506      	bpl.n	8004460 <__swbuf_r+0x64>
 8004452:	2e0a      	cmp	r6, #10
 8004454:	d104      	bne.n	8004460 <__swbuf_r+0x64>
 8004456:	4621      	mov	r1, r4
 8004458:	4628      	mov	r0, r5
 800445a:	f7ff ffa7 	bl	80043ac <_fflush_r>
 800445e:	b938      	cbnz	r0, 8004470 <__swbuf_r+0x74>
 8004460:	4638      	mov	r0, r7
 8004462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004464:	4621      	mov	r1, r4
 8004466:	4628      	mov	r0, r5
 8004468:	f000 f806 	bl	8004478 <__swsetup_r>
 800446c:	2800      	cmp	r0, #0
 800446e:	d0d5      	beq.n	800441c <__swbuf_r+0x20>
 8004470:	f04f 37ff 	mov.w	r7, #4294967295
 8004474:	e7f4      	b.n	8004460 <__swbuf_r+0x64>
	...

08004478 <__swsetup_r>:
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	4b2a      	ldr	r3, [pc, #168]	; (8004524 <__swsetup_r+0xac>)
 800447c:	4605      	mov	r5, r0
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	460c      	mov	r4, r1
 8004482:	b118      	cbz	r0, 800448c <__swsetup_r+0x14>
 8004484:	6a03      	ldr	r3, [r0, #32]
 8004486:	b90b      	cbnz	r3, 800448c <__swsetup_r+0x14>
 8004488:	f7ff fa36 	bl	80038f8 <__sinit>
 800448c:	89a3      	ldrh	r3, [r4, #12]
 800448e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004492:	0718      	lsls	r0, r3, #28
 8004494:	d422      	bmi.n	80044dc <__swsetup_r+0x64>
 8004496:	06d9      	lsls	r1, r3, #27
 8004498:	d407      	bmi.n	80044aa <__swsetup_r+0x32>
 800449a:	2309      	movs	r3, #9
 800449c:	602b      	str	r3, [r5, #0]
 800449e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80044a2:	81a3      	strh	r3, [r4, #12]
 80044a4:	f04f 30ff 	mov.w	r0, #4294967295
 80044a8:	e034      	b.n	8004514 <__swsetup_r+0x9c>
 80044aa:	0758      	lsls	r0, r3, #29
 80044ac:	d512      	bpl.n	80044d4 <__swsetup_r+0x5c>
 80044ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044b0:	b141      	cbz	r1, 80044c4 <__swsetup_r+0x4c>
 80044b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044b6:	4299      	cmp	r1, r3
 80044b8:	d002      	beq.n	80044c0 <__swsetup_r+0x48>
 80044ba:	4628      	mov	r0, r5
 80044bc:	f7ff fb24 	bl	8003b08 <_free_r>
 80044c0:	2300      	movs	r3, #0
 80044c2:	6363      	str	r3, [r4, #52]	; 0x34
 80044c4:	89a3      	ldrh	r3, [r4, #12]
 80044c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044ca:	81a3      	strh	r3, [r4, #12]
 80044cc:	2300      	movs	r3, #0
 80044ce:	6063      	str	r3, [r4, #4]
 80044d0:	6923      	ldr	r3, [r4, #16]
 80044d2:	6023      	str	r3, [r4, #0]
 80044d4:	89a3      	ldrh	r3, [r4, #12]
 80044d6:	f043 0308 	orr.w	r3, r3, #8
 80044da:	81a3      	strh	r3, [r4, #12]
 80044dc:	6923      	ldr	r3, [r4, #16]
 80044de:	b94b      	cbnz	r3, 80044f4 <__swsetup_r+0x7c>
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ea:	d003      	beq.n	80044f4 <__swsetup_r+0x7c>
 80044ec:	4621      	mov	r1, r4
 80044ee:	4628      	mov	r0, r5
 80044f0:	f000 f850 	bl	8004594 <__smakebuf_r>
 80044f4:	89a0      	ldrh	r0, [r4, #12]
 80044f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044fa:	f010 0301 	ands.w	r3, r0, #1
 80044fe:	d00a      	beq.n	8004516 <__swsetup_r+0x9e>
 8004500:	2300      	movs	r3, #0
 8004502:	60a3      	str	r3, [r4, #8]
 8004504:	6963      	ldr	r3, [r4, #20]
 8004506:	425b      	negs	r3, r3
 8004508:	61a3      	str	r3, [r4, #24]
 800450a:	6923      	ldr	r3, [r4, #16]
 800450c:	b943      	cbnz	r3, 8004520 <__swsetup_r+0xa8>
 800450e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004512:	d1c4      	bne.n	800449e <__swsetup_r+0x26>
 8004514:	bd38      	pop	{r3, r4, r5, pc}
 8004516:	0781      	lsls	r1, r0, #30
 8004518:	bf58      	it	pl
 800451a:	6963      	ldrpl	r3, [r4, #20]
 800451c:	60a3      	str	r3, [r4, #8]
 800451e:	e7f4      	b.n	800450a <__swsetup_r+0x92>
 8004520:	2000      	movs	r0, #0
 8004522:	e7f7      	b.n	8004514 <__swsetup_r+0x9c>
 8004524:	20000064 	.word	0x20000064

08004528 <_sbrk_r>:
 8004528:	b538      	push	{r3, r4, r5, lr}
 800452a:	4d06      	ldr	r5, [pc, #24]	; (8004544 <_sbrk_r+0x1c>)
 800452c:	2300      	movs	r3, #0
 800452e:	4604      	mov	r4, r0
 8004530:	4608      	mov	r0, r1
 8004532:	602b      	str	r3, [r5, #0]
 8004534:	f7fd f99e 	bl	8001874 <_sbrk>
 8004538:	1c43      	adds	r3, r0, #1
 800453a:	d102      	bne.n	8004542 <_sbrk_r+0x1a>
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	b103      	cbz	r3, 8004542 <_sbrk_r+0x1a>
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	bd38      	pop	{r3, r4, r5, pc}
 8004544:	20002818 	.word	0x20002818

08004548 <__swhatbuf_r>:
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	460c      	mov	r4, r1
 800454c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004550:	2900      	cmp	r1, #0
 8004552:	b096      	sub	sp, #88	; 0x58
 8004554:	4615      	mov	r5, r2
 8004556:	461e      	mov	r6, r3
 8004558:	da0d      	bge.n	8004576 <__swhatbuf_r+0x2e>
 800455a:	89a3      	ldrh	r3, [r4, #12]
 800455c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004560:	f04f 0100 	mov.w	r1, #0
 8004564:	bf0c      	ite	eq
 8004566:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800456a:	2340      	movne	r3, #64	; 0x40
 800456c:	2000      	movs	r0, #0
 800456e:	6031      	str	r1, [r6, #0]
 8004570:	602b      	str	r3, [r5, #0]
 8004572:	b016      	add	sp, #88	; 0x58
 8004574:	bd70      	pop	{r4, r5, r6, pc}
 8004576:	466a      	mov	r2, sp
 8004578:	f000 f848 	bl	800460c <_fstat_r>
 800457c:	2800      	cmp	r0, #0
 800457e:	dbec      	blt.n	800455a <__swhatbuf_r+0x12>
 8004580:	9901      	ldr	r1, [sp, #4]
 8004582:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004586:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800458a:	4259      	negs	r1, r3
 800458c:	4159      	adcs	r1, r3
 800458e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004592:	e7eb      	b.n	800456c <__swhatbuf_r+0x24>

08004594 <__smakebuf_r>:
 8004594:	898b      	ldrh	r3, [r1, #12]
 8004596:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004598:	079d      	lsls	r5, r3, #30
 800459a:	4606      	mov	r6, r0
 800459c:	460c      	mov	r4, r1
 800459e:	d507      	bpl.n	80045b0 <__smakebuf_r+0x1c>
 80045a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	6123      	str	r3, [r4, #16]
 80045a8:	2301      	movs	r3, #1
 80045aa:	6163      	str	r3, [r4, #20]
 80045ac:	b002      	add	sp, #8
 80045ae:	bd70      	pop	{r4, r5, r6, pc}
 80045b0:	ab01      	add	r3, sp, #4
 80045b2:	466a      	mov	r2, sp
 80045b4:	f7ff ffc8 	bl	8004548 <__swhatbuf_r>
 80045b8:	9900      	ldr	r1, [sp, #0]
 80045ba:	4605      	mov	r5, r0
 80045bc:	4630      	mov	r0, r6
 80045be:	f7ff fb0f 	bl	8003be0 <_malloc_r>
 80045c2:	b948      	cbnz	r0, 80045d8 <__smakebuf_r+0x44>
 80045c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045c8:	059a      	lsls	r2, r3, #22
 80045ca:	d4ef      	bmi.n	80045ac <__smakebuf_r+0x18>
 80045cc:	f023 0303 	bic.w	r3, r3, #3
 80045d0:	f043 0302 	orr.w	r3, r3, #2
 80045d4:	81a3      	strh	r3, [r4, #12]
 80045d6:	e7e3      	b.n	80045a0 <__smakebuf_r+0xc>
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	6020      	str	r0, [r4, #0]
 80045dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e0:	81a3      	strh	r3, [r4, #12]
 80045e2:	9b00      	ldr	r3, [sp, #0]
 80045e4:	6163      	str	r3, [r4, #20]
 80045e6:	9b01      	ldr	r3, [sp, #4]
 80045e8:	6120      	str	r0, [r4, #16]
 80045ea:	b15b      	cbz	r3, 8004604 <__smakebuf_r+0x70>
 80045ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045f0:	4630      	mov	r0, r6
 80045f2:	f000 f81d 	bl	8004630 <_isatty_r>
 80045f6:	b128      	cbz	r0, 8004604 <__smakebuf_r+0x70>
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	f023 0303 	bic.w	r3, r3, #3
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	81a3      	strh	r3, [r4, #12]
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	431d      	orrs	r5, r3
 8004608:	81a5      	strh	r5, [r4, #12]
 800460a:	e7cf      	b.n	80045ac <__smakebuf_r+0x18>

0800460c <_fstat_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	4d07      	ldr	r5, [pc, #28]	; (800462c <_fstat_r+0x20>)
 8004610:	2300      	movs	r3, #0
 8004612:	4604      	mov	r4, r0
 8004614:	4608      	mov	r0, r1
 8004616:	4611      	mov	r1, r2
 8004618:	602b      	str	r3, [r5, #0]
 800461a:	f7fd f902 	bl	8001822 <_fstat>
 800461e:	1c43      	adds	r3, r0, #1
 8004620:	d102      	bne.n	8004628 <_fstat_r+0x1c>
 8004622:	682b      	ldr	r3, [r5, #0]
 8004624:	b103      	cbz	r3, 8004628 <_fstat_r+0x1c>
 8004626:	6023      	str	r3, [r4, #0]
 8004628:	bd38      	pop	{r3, r4, r5, pc}
 800462a:	bf00      	nop
 800462c:	20002818 	.word	0x20002818

08004630 <_isatty_r>:
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	4d06      	ldr	r5, [pc, #24]	; (800464c <_isatty_r+0x1c>)
 8004634:	2300      	movs	r3, #0
 8004636:	4604      	mov	r4, r0
 8004638:	4608      	mov	r0, r1
 800463a:	602b      	str	r3, [r5, #0]
 800463c:	f7fd f901 	bl	8001842 <_isatty>
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	d102      	bne.n	800464a <_isatty_r+0x1a>
 8004644:	682b      	ldr	r3, [r5, #0]
 8004646:	b103      	cbz	r3, 800464a <_isatty_r+0x1a>
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	bd38      	pop	{r3, r4, r5, pc}
 800464c:	20002818 	.word	0x20002818

08004650 <_init>:
 8004650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004652:	bf00      	nop
 8004654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004656:	bc08      	pop	{r3}
 8004658:	469e      	mov	lr, r3
 800465a:	4770      	bx	lr

0800465c <_fini>:
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465e:	bf00      	nop
 8004660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004662:	bc08      	pop	{r3}
 8004664:	469e      	mov	lr, r3
 8004666:	4770      	bx	lr
