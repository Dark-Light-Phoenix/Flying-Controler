
Flying controler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005968  08005968  00015968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059f0  080059f0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080059f0  080059f0  000159f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059f8  080059f8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059f8  080059f8  000159f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059fc  080059fc  000159fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005a00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027c0  20000078  08005a78  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002838  08005a78  00022838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000081da  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019b3  00000000  00000000  000282c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000828  00000000  00000000  00029c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000629  00000000  00000000  0002a4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016a57  00000000  00000000  0002aac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b617  00000000  00000000  00041520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087666  00000000  00000000  0004cb37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c58  00000000  00000000  000d41a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d6df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005950 	.word	0x08005950

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005950 	.word	0x08005950

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <BME280_First_Scan>:
#include "stdio.h"

extern I2C_HandleTypeDef hi2c2;

void BME280_First_Scan (double *start_pressure, double *start_temperature)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08e      	sub	sp, #56	; 0x38
 8000ef8:	af04      	add	r7, sp, #16
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef checkT;
	uint32_t pressure0;
	uint8_t PRES_data [3];
	uint8_t TEM_data [3];

	checkP = HAL_I2C_Mem_Read (&hi2c2, BME280_ADDRESS << 1, PRESS_MSB_REG, I2C_MEMADD_SIZE_8BIT, PRES_data, 3, 1000); // Reading pressure data from register
 8000efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f02:	9302      	str	r3, [sp, #8]
 8000f04:	2303      	movs	r3, #3
 8000f06:	9301      	str	r3, [sp, #4]
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	22f7      	movs	r2, #247	; 0xf7
 8000f12:	21ec      	movs	r1, #236	; 0xec
 8000f14:	4840      	ldr	r0, [pc, #256]	; (8001018 <BME280_First_Scan+0x124>)
 8000f16:	f001 fc7f 	bl	8002818 <HAL_I2C_Mem_Read>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (checkP != HAL_OK)
 8000f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <BME280_First_Scan+0x3a>
	{
 		printf ("Error");
 8000f28:	483c      	ldr	r0, [pc, #240]	; (800101c <BME280_First_Scan+0x128>)
 8000f2a:	f002 ff61 	bl	8003df0 <iprintf>
	}
	HAL_Delay (1000);
 8000f2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f32:	f000 ffa5 	bl	8001e80 <HAL_Delay>
	checkT = HAL_I2C_Mem_Read (&hi2c2, BME280_ADDRESS << 1, BME280_TEMPERATURE_MSB_REG, I2C_MEMADD_SIZE_8BIT, TEM_data, 3, 1000); // Reading temperature data from register
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	9302      	str	r3, [sp, #8]
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	f107 0308 	add.w	r3, r7, #8
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2301      	movs	r3, #1
 8000f48:	22fa      	movs	r2, #250	; 0xfa
 8000f4a:	21ec      	movs	r1, #236	; 0xec
 8000f4c:	4832      	ldr	r0, [pc, #200]	; (8001018 <BME280_First_Scan+0x124>)
 8000f4e:	f001 fc63 	bl	8002818 <HAL_I2C_Mem_Read>
 8000f52:	4603      	mov	r3, r0
 8000f54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (checkT != HAL_OK)
 8000f58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d002      	beq.n	8000f66 <BME280_First_Scan+0x72>
		{
			printf ("Error");
 8000f60:	482e      	ldr	r0, [pc, #184]	; (800101c <BME280_First_Scan+0x128>)
 8000f62:	f002 ff45 	bl	8003df0 <iprintf>
		}
	HAL_Delay (1000);
 8000f66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f6a:	f000 ff89 	bl	8001e80 <HAL_Delay>

	pressure0 = ((uint32_t) PRES_data [0] << 12 | (uint32_t) PRES_data [1] << 4 | (uint32_t) PRES_data [2] >> 4);
 8000f6e:	7b3b      	ldrb	r3, [r7, #12]
 8000f70:	031a      	lsls	r2, r3, #12
 8000f72:	7b7b      	ldrb	r3, [r7, #13]
 8000f74:	011b      	lsls	r3, r3, #4
 8000f76:	4313      	orrs	r3, r2
 8000f78:	7bba      	ldrb	r2, [r7, #14]
 8000f7a:	0912      	lsrs	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	623b      	str	r3, [r7, #32]

	int32_t adc_T = ((uint32_t) TEM_data [0] << 12) | ((uint32_t) TEM_data [1] << 4) | (TEM_data [2] >> 4);
 8000f82:	7a3b      	ldrb	r3, [r7, #8]
 8000f84:	031a      	lsls	r2, r3, #12
 8000f86:	7a7b      	ldrb	r3, [r7, #9]
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	7aba      	ldrb	r2, [r7, #10]
 8000f8e:	0912      	lsrs	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61fb      	str	r3, [r7, #28]
	int32_t t1, t2, T;

	t1 = ((((adc_T >> 3) - ((int32_t)((uint32_t) TEM_data [0] << 8))) * ((int32_t)*((uint32_t *)0x400001E8))) >> 12);
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	10db      	asrs	r3, r3, #3
 8000f9a:	7a3a      	ldrb	r2, [r7, #8]
 8000f9c:	0212      	lsls	r2, r2, #8
 8000f9e:	1a9b      	subs	r3, r3, r2
 8000fa0:	4a1f      	ldr	r2, [pc, #124]	; (8001020 <BME280_First_Scan+0x12c>)
 8000fa2:	6812      	ldr	r2, [r2, #0]
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	131b      	asrs	r3, r3, #12
 8000faa:	61bb      	str	r3, [r7, #24]
	t2 = (((((adc_T >> 4) - ((int32_t)((uint32_t) TEM_data [0] << 8))) * ((adc_T >> 4) - ((int32_t)((uint32_t) TEM_data [0] << 8)))) >> 12) * ((int32_t)*((uint32_t *)0x400001EC))) >> 14;
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	111b      	asrs	r3, r3, #4
 8000fb0:	7a3a      	ldrb	r2, [r7, #8]
 8000fb2:	0212      	lsls	r2, r2, #8
 8000fb4:	1a9b      	subs	r3, r3, r2
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	1112      	asrs	r2, r2, #4
 8000fba:	7a39      	ldrb	r1, [r7, #8]
 8000fbc:	0209      	lsls	r1, r1, #8
 8000fbe:	1a52      	subs	r2, r2, r1
 8000fc0:	fb02 f303 	mul.w	r3, r2, r3
 8000fc4:	131b      	asrs	r3, r3, #12
 8000fc6:	4a17      	ldr	r2, [pc, #92]	; (8001024 <BME280_First_Scan+0x130>)
 8000fc8:	6812      	ldr	r2, [r2, #0]
 8000fca:	fb02 f303 	mul.w	r3, r2, r3
 8000fce:	139b      	asrs	r3, r3, #14
 8000fd0:	617b      	str	r3, [r7, #20]

	T = t1 + t2;
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]

	*start_pressure = pressure0 / 256.0;
 8000fda:	6a38      	ldr	r0, [r7, #32]
 8000fdc:	f7ff fa92 	bl	8000504 <__aeabi_ui2d>
 8000fe0:	f04f 0200 	mov.w	r2, #0
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <BME280_First_Scan+0x134>)
 8000fe6:	f7ff fc31 	bl	800084c <__aeabi_ddiv>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	e9c1 2300 	strd	r2, r3, [r1]
	*start_temperature = (T / 16384.0);
 8000ff4:	6938      	ldr	r0, [r7, #16]
 8000ff6:	f7ff fa95 	bl	8000524 <__aeabi_i2d>
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <BME280_First_Scan+0x138>)
 8001000:	f7ff fc24 	bl	800084c <__aeabi_ddiv>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	6839      	ldr	r1, [r7, #0]
 800100a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800100e:	bf00      	nop
 8001010:	3728      	adds	r7, #40	; 0x28
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20002690 	.word	0x20002690
 800101c:	08005968 	.word	0x08005968
 8001020:	400001e8 	.word	0x400001e8
 8001024:	400001ec 	.word	0x400001ec
 8001028:	40700000 	.word	0x40700000
 800102c:	40d00000 	.word	0x40d00000

08001030 <BME280_ReadPressure>:

void BME280_ReadPressure (double *pressure)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af04      	add	r7, sp, #16
 8001036:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef checkP;
	uint8_t pressure_data [3];

	checkP = HAL_I2C_Mem_Read (&hi2c2, BME280_ADDRESS << 1, PRESS_MSB_REG, I2C_MEMADD_SIZE_8BIT, pressure_data, 3, 1000);
 8001038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	2303      	movs	r3, #3
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	22f7      	movs	r2, #247	; 0xf7
 800104c:	21ec      	movs	r1, #236	; 0xec
 800104e:	4816      	ldr	r0, [pc, #88]	; (80010a8 <BME280_ReadPressure+0x78>)
 8001050:	f001 fbe2 	bl	8002818 <HAL_I2C_Mem_Read>
 8001054:	4603      	mov	r3, r0
 8001056:	73fb      	strb	r3, [r7, #15]
	if (checkP != HAL_OK)
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <BME280_ReadPressure+0x34>
	{
		printf ("Error");
 800105e:	4813      	ldr	r0, [pc, #76]	; (80010ac <BME280_ReadPressure+0x7c>)
 8001060:	f002 fec6 	bl	8003df0 <iprintf>
	}
	*pressure = ((uint32_t) pressure_data [0] << 12 | (uint32_t) pressure_data [1] << 4 | (uint32_t) pressure_data [2] >> 4);
 8001064:	7b3b      	ldrb	r3, [r7, #12]
 8001066:	031a      	lsls	r2, r3, #12
 8001068:	7b7b      	ldrb	r3, [r7, #13]
 800106a:	011b      	lsls	r3, r3, #4
 800106c:	4313      	orrs	r3, r2
 800106e:	7bba      	ldrb	r2, [r7, #14]
 8001070:	0912      	lsrs	r2, r2, #4
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	4313      	orrs	r3, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa44 	bl	8000504 <__aeabi_ui2d>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	e9c1 2300 	strd	r2, r3, [r1]
	*pressure = (*pressure / 256.0); // Convert to Pascal
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	e9d3 0100 	ldrd	r0, r1, [r3]
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <BME280_ReadPressure+0x80>)
 8001092:	f7ff fbdb 	bl	800084c <__aeabi_ddiv>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	e9c1 2300 	strd	r2, r3, [r1]
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20002690 	.word	0x20002690
 80010ac:	08005968 	.word	0x08005968
 80010b0:	40700000 	.word	0x40700000

080010b4 <BME280_ReadTemperature>:

void BME280_ReadTemperature (double *temperature)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af04      	add	r7, sp, #16
 80010ba:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef checkT;
	uint8_t temperature_data [3];

	checkT = HAL_I2C_Mem_Read(&hi2c2, BME280_ADDRESS << 1, BME280_TEMPERATURE_MSB_REG, I2C_MEMADD_SIZE_8BIT, temperature_data, 3, 1000);
 80010bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	2303      	movs	r3, #3
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	22fa      	movs	r2, #250	; 0xfa
 80010d0:	21ec      	movs	r1, #236	; 0xec
 80010d2:	4824      	ldr	r0, [pc, #144]	; (8001164 <BME280_ReadTemperature+0xb0>)
 80010d4:	f001 fba0 	bl	8002818 <HAL_I2C_Mem_Read>
 80010d8:	4603      	mov	r3, r0
 80010da:	77fb      	strb	r3, [r7, #31]
	if (checkT != HAL_OK)
 80010dc:	7ffb      	ldrb	r3, [r7, #31]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d002      	beq.n	80010e8 <BME280_ReadTemperature+0x34>
	{
		printf ("Error");
 80010e2:	4821      	ldr	r0, [pc, #132]	; (8001168 <BME280_ReadTemperature+0xb4>)
 80010e4:	f002 fe84 	bl	8003df0 <iprintf>
	}
	int32_t adc_T = ((uint32_t) temperature_data [0] << 12) | ((uint32_t) temperature_data [1] << 4) | (temperature_data [2] >> 4);
 80010e8:	7a3b      	ldrb	r3, [r7, #8]
 80010ea:	031a      	lsls	r2, r3, #12
 80010ec:	7a7b      	ldrb	r3, [r7, #9]
 80010ee:	011b      	lsls	r3, r3, #4
 80010f0:	4313      	orrs	r3, r2
 80010f2:	7aba      	ldrb	r2, [r7, #10]
 80010f4:	0912      	lsrs	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
	int32_t t1, t2, T;

	t1 = ((((adc_T >> 3) - ((int32_t)((uint32_t) temperature_data [0] << 8))) * ((int32_t)*((uint32_t *)0x400001E8))) >> 12);
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	10db      	asrs	r3, r3, #3
 8001100:	7a3a      	ldrb	r2, [r7, #8]
 8001102:	0212      	lsls	r2, r2, #8
 8001104:	1a9b      	subs	r3, r3, r2
 8001106:	4a19      	ldr	r2, [pc, #100]	; (800116c <BME280_ReadTemperature+0xb8>)
 8001108:	6812      	ldr	r2, [r2, #0]
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	131b      	asrs	r3, r3, #12
 8001110:	617b      	str	r3, [r7, #20]
	t2 = (((((adc_T >> 4) - ((int32_t)((uint32_t) temperature_data [0] << 8))) * ((adc_T >> 4) - ((int32_t)((uint32_t) temperature_data [0] << 8)))) >> 12) * ((int32_t)*((uint32_t *)0x400001EC))) >> 14;
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	111b      	asrs	r3, r3, #4
 8001116:	7a3a      	ldrb	r2, [r7, #8]
 8001118:	0212      	lsls	r2, r2, #8
 800111a:	1a9b      	subs	r3, r3, r2
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	1112      	asrs	r2, r2, #4
 8001120:	7a39      	ldrb	r1, [r7, #8]
 8001122:	0209      	lsls	r1, r1, #8
 8001124:	1a52      	subs	r2, r2, r1
 8001126:	fb02 f303 	mul.w	r3, r2, r3
 800112a:	131b      	asrs	r3, r3, #12
 800112c:	4a10      	ldr	r2, [pc, #64]	; (8001170 <BME280_ReadTemperature+0xbc>)
 800112e:	6812      	ldr	r2, [r2, #0]
 8001130:	fb02 f303 	mul.w	r3, r2, r3
 8001134:	139b      	asrs	r3, r3, #14
 8001136:	613b      	str	r3, [r7, #16]

	T = t1 + t2;
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4413      	add	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]

	*temperature = (T / 16384.0);
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f7ff f9ef 	bl	8000524 <__aeabi_i2d>
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <BME280_ReadTemperature+0xc0>)
 800114c:	f7ff fb7e 	bl	800084c <__aeabi_ddiv>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	e9c1 2300 	strd	r2, r3, [r1]
}
 800115a:	bf00      	nop
 800115c:	3720      	adds	r7, #32
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20002690 	.word	0x20002690
 8001168:	08005968 	.word	0x08005968
 800116c:	400001e8 	.word	0x400001e8
 8001170:	400001ec 	.word	0x400001ec
 8001174:	40d00000 	.word	0x40d00000

08001178 <BME280_Height>:

void BME280_Height(double *start_pressure, double *start_temperature, double *pressure, double *temperature, double *height)
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	603b      	str	r3, [r7, #0]
	double L = 0.0065; // Temperature gradient
 8001186:	a31f      	add	r3, pc, #124	; (adr r3, 8001204 <BME280_Height+0x8c>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double exp = 1 / 5.255; // Variable of exponent
 8001190:	a31e      	add	r3, pc, #120	; (adr r3, 800120c <BME280_Height+0x94>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double DeltaP = 1 - (*pressure / *start_pressure); // Variable that means difference between start_pressure and pressure that we take during flight
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	f7ff fb51 	bl	800084c <__aeabi_ddiv>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	f04f 0000 	mov.w	r0, #0
 80011b2:	4913      	ldr	r1, [pc, #76]	; (8001200 <BME280_Height+0x88>)
 80011b4:	f7ff f868 	bl	8000288 <__aeabi_dsub>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	e9c7 2304 	strd	r2, r3, [r7, #16]

	*height = (*temperature / L) * pow (DeltaP, exp);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011ca:	f7ff fb3f 	bl	800084c <__aeabi_ddiv>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4614      	mov	r4, r2
 80011d4:	461d      	mov	r5, r3
 80011d6:	ed97 1b06 	vldr	d1, [r7, #24]
 80011da:	ed97 0b04 	vldr	d0, [r7, #16]
 80011de:	f003 fc7d 	bl	8004adc <pow>
 80011e2:	ec53 2b10 	vmov	r2, r3, d0
 80011e6:	4620      	mov	r0, r4
 80011e8:	4629      	mov	r1, r5
 80011ea:	f7ff fa05 	bl	80005f8 <__aeabi_dmul>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80011f4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	; 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001200:	3ff00000 	.word	0x3ff00000
 8001204:	76c8b439 	.word	0x76c8b439
 8001208:	3f7a9fbe 	.word	0x3f7a9fbe
 800120c:	ccd9456c 	.word	0xccd9456c
 8001210:	3fc85b95 	.word	0x3fc85b95

08001214 <initKalmanFilterAccel>:

float x_gyro = 0;
float P_gyro = 1;

void initKalmanFilterAccel(KalmanFilterAccel *filter) // Function to initialize Kalman filter for accelerometer
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
    filter->x = 0;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
    filter->P = 1;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800122a:	605a      	str	r2, [r3, #4]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <initKalmanFilterGyro>:

void initKalmanFilterGyro(KalmanFilterGyro *filter) // Function to initialize Kalman filter for gyroscope
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    filter->x = 0;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
    filter->P = 1;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800124e:	605a      	str	r2, [r3, #4]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <KalmanFilterUpdateAccel>:

void KalmanFilterUpdateAccel(KalmanFilterAccel *filter, float z, float R, float H) // Function to update Kalman filter for accelerometer
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	ed87 0a02 	vstr	s0, [r7, #8]
 8001268:	edc7 0a01 	vstr	s1, [r7, #4]
 800126c:	ed87 1a00 	vstr	s2, [r7]
    float x_pred = filter->x;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	61fb      	str	r3, [r7, #28]
    float P_pred = filter->P;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	61bb      	str	r3, [r7, #24]

    float K = P_pred * H / (H * P_pred * H + R);
 800127c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001280:	edd7 7a00 	vldr	s15, [r7]
 8001284:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001288:	ed97 7a00 	vldr	s14, [r7]
 800128c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001290:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001294:	edd7 7a00 	vldr	s15, [r7]
 8001298:	ee27 7a27 	vmul.f32	s14, s14, s15
 800129c:	edd7 7a01 	vldr	s15, [r7, #4]
 80012a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012a8:	edc7 7a05 	vstr	s15, [r7, #20]
    filter->x = x_pred + K * (z - H * x_pred);
 80012ac:	ed97 7a00 	vldr	s14, [r7]
 80012b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80012bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80012cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	edc3 7a00 	vstr	s15, [r3]
    filter->P = (1 - K * H) * P_pred;
 80012d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80012da:	edd7 7a00 	vldr	s15, [r7]
 80012de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80012ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80012f8:	bf00      	nop
 80012fa:	3724      	adds	r7, #36	; 0x24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <KalmanFilterUpdateGyro>:

void KalmanFilterUpdateGyro(KalmanFilterGyro *filter, float z, float R, float H) // Function to update Kalman filter for gyroscope
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001310:	edc7 0a01 	vstr	s1, [r7, #4]
 8001314:	ed87 1a00 	vstr	s2, [r7]
    float x_pred = filter->x;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61fb      	str	r3, [r7, #28]
    float P_pred = filter->P;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	61bb      	str	r3, [r7, #24]

    float K = P_pred * H / (H * P_pred * H + R);
 8001324:	ed97 7a06 	vldr	s14, [r7, #24]
 8001328:	edd7 7a00 	vldr	s15, [r7]
 800132c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001330:	ed97 7a00 	vldr	s14, [r7]
 8001334:	edd7 7a06 	vldr	s15, [r7, #24]
 8001338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800133c:	edd7 7a00 	vldr	s15, [r7]
 8001340:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001344:	edd7 7a01 	vldr	s15, [r7, #4]
 8001348:	ee37 7a27 	vadd.f32	s14, s14, s15
 800134c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001350:	edc7 7a05 	vstr	s15, [r7, #20]
    filter->x = x_pred + K * (z - H * x_pred);
 8001354:	ed97 7a00 	vldr	s14, [r7]
 8001358:	edd7 7a07 	vldr	s15, [r7, #28]
 800135c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001360:	ed97 7a02 	vldr	s14, [r7, #8]
 8001364:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001368:	edd7 7a05 	vldr	s15, [r7, #20]
 800136c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001370:	edd7 7a07 	vldr	s15, [r7, #28]
 8001374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	edc3 7a00 	vstr	s15, [r3]
    filter->P = (1 - K * H) * P_pred;
 800137e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001382:	edd7 7a00 	vldr	s15, [r7]
 8001386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800138e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001392:	edd7 7a06 	vldr	s15, [r7, #24]
 8001396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80013a0:	bf00      	nop
 80013a2:	3724      	adds	r7, #36	; 0x24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <MPU6050_Init>:
int16_t Gyro_X_RAW = 0; // Initialization variables for 3 coordinates X, Y, Z of gyroscope
int16_t Gyro_Y_RAW = 0;
int16_t Gyro_Z_RAW = 0;

void MPU6050_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af04      	add	r7, sp, #16
    uint8_t check, Data;
    HAL_Delay(1000);
 80013b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013b6:	f000 fd63 	bl	8001e80 <HAL_Delay>
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	9302      	str	r3, [sp, #8]
 80013c0:	2301      	movs	r3, #1
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	1dfb      	adds	r3, r7, #7
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2301      	movs	r3, #1
 80013ca:	2275      	movs	r2, #117	; 0x75
 80013cc:	21d0      	movs	r1, #208	; 0xd0
 80013ce:	4814      	ldr	r0, [pc, #80]	; (8001420 <MPU6050_Init+0x74>)
 80013d0:	f001 fa22 	bl	8002818 <HAL_I2C_Mem_Read>

    if (check == 0x68)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	2b68      	cmp	r3, #104	; 0x68
 80013d8:	d11d      	bne.n	8001416 <MPU6050_Init+0x6a>
    {
        Data = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	2301      	movs	r3, #1
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	1dbb      	adds	r3, r7, #6
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2301      	movs	r3, #1
 80013ee:	226b      	movs	r2, #107	; 0x6b
 80013f0:	21d0      	movs	r1, #208	; 0xd0
 80013f2:	480b      	ldr	r0, [pc, #44]	; (8001420 <MPU6050_Init+0x74>)
 80013f4:	f001 f916 	bl	8002624 <HAL_I2C_Mem_Write>
        Data = 0x07;
 80013f8:	2307      	movs	r3, #7
 80013fa:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80013fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	2301      	movs	r3, #1
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	1dbb      	adds	r3, r7, #6
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	2301      	movs	r3, #1
 800140c:	2219      	movs	r2, #25
 800140e:	21d0      	movs	r1, #208	; 0xd0
 8001410:	4803      	ldr	r0, [pc, #12]	; (8001420 <MPU6050_Init+0x74>)
 8001412:	f001 f907 	bl	8002624 <HAL_I2C_Mem_Write>
    }
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000263c 	.word	0x2000263c

08001424 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af04      	add	r7, sp, #16
    KalmanFilterAccel accelFilter;
    initKalmanFilterAccel(&accelFilter);
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fef0 	bl	8001214 <initKalmanFilterAccel>

    for (int i = 0; i < 100; i++)
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	e0c0      	b.n	80015bc <MPU6050_Read_Accel+0x198>
    {
        uint8_t Rec_Data[6];
        HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800143a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143e:	9302      	str	r3, [sp, #8]
 8001440:	2306      	movs	r3, #6
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2301      	movs	r3, #1
 800144a:	223b      	movs	r2, #59	; 0x3b
 800144c:	21d0      	movs	r1, #208	; 0xd0
 800144e:	4860      	ldr	r0, [pc, #384]	; (80015d0 <MPU6050_Read_Accel+0x1ac>)
 8001450:	f001 f9e2 	bl	8002818 <HAL_I2C_Mem_Read>

        Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001454:	793b      	ldrb	r3, [r7, #4]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	b21a      	sxth	r2, r3
 800145a:	797b      	ldrb	r3, [r7, #5]
 800145c:	b21b      	sxth	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	b21a      	sxth	r2, r3
 8001462:	4b5c      	ldr	r3, [pc, #368]	; (80015d4 <MPU6050_Read_Accel+0x1b0>)
 8001464:	801a      	strh	r2, [r3, #0]
        Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001466:	79bb      	ldrb	r3, [r7, #6]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	b21a      	sxth	r2, r3
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	b21b      	sxth	r3, r3
 8001470:	4313      	orrs	r3, r2
 8001472:	b21a      	sxth	r2, r3
 8001474:	4b58      	ldr	r3, [pc, #352]	; (80015d8 <MPU6050_Read_Accel+0x1b4>)
 8001476:	801a      	strh	r2, [r3, #0]
        Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001478:	7a3b      	ldrb	r3, [r7, #8]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	b21a      	sxth	r2, r3
 800147e:	7a7b      	ldrb	r3, [r7, #9]
 8001480:	b21b      	sxth	r3, r3
 8001482:	4313      	orrs	r3, r2
 8001484:	b21a      	sxth	r2, r3
 8001486:	4b55      	ldr	r3, [pc, #340]	; (80015dc <MPU6050_Read_Accel+0x1b8>)
 8001488:	801a      	strh	r2, [r3, #0]
        Ax = Accel_X_RAW / 16384.0;
 800148a:	4b52      	ldr	r3, [pc, #328]	; (80015d4 <MPU6050_Read_Accel+0x1b0>)
 800148c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f847 	bl	8000524 <__aeabi_i2d>
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	4b51      	ldr	r3, [pc, #324]	; (80015e0 <MPU6050_Read_Accel+0x1bc>)
 800149c:	f7ff f9d6 	bl	800084c <__aeabi_ddiv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff fb56 	bl	8000b58 <__aeabi_d2f>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4a4d      	ldr	r2, [pc, #308]	; (80015e4 <MPU6050_Read_Accel+0x1c0>)
 80014b0:	6013      	str	r3, [r2, #0]
        Ay = Accel_Y_RAW / 16384.0;
 80014b2:	4b49      	ldr	r3, [pc, #292]	; (80015d8 <MPU6050_Read_Accel+0x1b4>)
 80014b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f833 	bl	8000524 <__aeabi_i2d>
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <MPU6050_Read_Accel+0x1bc>)
 80014c4:	f7ff f9c2 	bl	800084c <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff fb42 	bl	8000b58 <__aeabi_d2f>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4a44      	ldr	r2, [pc, #272]	; (80015e8 <MPU6050_Read_Accel+0x1c4>)
 80014d8:	6013      	str	r3, [r2, #0]
        Az = Accel_Z_RAW / 16384.0;
 80014da:	4b40      	ldr	r3, [pc, #256]	; (80015dc <MPU6050_Read_Accel+0x1b8>)
 80014dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f81f 	bl	8000524 <__aeabi_i2d>
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	4b3d      	ldr	r3, [pc, #244]	; (80015e0 <MPU6050_Read_Accel+0x1bc>)
 80014ec:	f7ff f9ae 	bl	800084c <__aeabi_ddiv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fb2e 	bl	8000b58 <__aeabi_d2f>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a3b      	ldr	r2, [pc, #236]	; (80015ec <MPU6050_Read_Accel+0x1c8>)
 8001500:	6013      	str	r3, [r2, #0]

        arr_accel_x[i] = Ax;
 8001502:	4b38      	ldr	r3, [pc, #224]	; (80015e4 <MPU6050_Read_Accel+0x1c0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f81e 	bl	8000548 <__aeabi_f2d>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4837      	ldr	r0, [pc, #220]	; (80015f0 <MPU6050_Read_Accel+0x1cc>)
 8001512:	6979      	ldr	r1, [r7, #20]
 8001514:	00c9      	lsls	r1, r1, #3
 8001516:	4401      	add	r1, r0
 8001518:	e9c1 2300 	strd	r2, r3, [r1]
        arr_accel_y[i] = Ay;
 800151c:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <MPU6050_Read_Accel+0x1c4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f811 	bl	8000548 <__aeabi_f2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4832      	ldr	r0, [pc, #200]	; (80015f4 <MPU6050_Read_Accel+0x1d0>)
 800152c:	6979      	ldr	r1, [r7, #20]
 800152e:	00c9      	lsls	r1, r1, #3
 8001530:	4401      	add	r1, r0
 8001532:	e9c1 2300 	strd	r2, r3, [r1]
        arr_accel_z[i] = Az;
 8001536:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <MPU6050_Read_Accel+0x1c8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f804 	bl	8000548 <__aeabi_f2d>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	482c      	ldr	r0, [pc, #176]	; (80015f8 <MPU6050_Read_Accel+0x1d4>)
 8001546:	6979      	ldr	r1, [r7, #20]
 8001548:	00c9      	lsls	r1, r1, #3
 800154a:	4401      	add	r1, r0
 800154c:	e9c1 2300 	strd	r2, r3, [r1]

        KalmanFilterUpdateAccel(&accelFilter, Ax, R_ACCEL, 1); // Apply Kalman filter to accelerometer data
 8001550:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <MPU6050_Read_Accel+0x1c0>)
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800155e:	eddf 0a27 	vldr	s1, [pc, #156]	; 80015fc <MPU6050_Read_Accel+0x1d8>
 8001562:	eeb0 0a67 	vmov.f32	s0, s15
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fe78 	bl	800125c <KalmanFilterUpdateAccel>

        Kalman_accel_x[i] = accelFilter.x;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffea 	bl	8000548 <__aeabi_f2d>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4821      	ldr	r0, [pc, #132]	; (8001600 <MPU6050_Read_Accel+0x1dc>)
 800157a:	6979      	ldr	r1, [r7, #20]
 800157c:	00c9      	lsls	r1, r1, #3
 800157e:	4401      	add	r1, r0
 8001580:	e9c1 2300 	strd	r2, r3, [r1]
        Kalman_accel_y[i] = accelFilter.P;
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe ffde 	bl	8000548 <__aeabi_f2d>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	481c      	ldr	r0, [pc, #112]	; (8001604 <MPU6050_Read_Accel+0x1e0>)
 8001592:	6979      	ldr	r1, [r7, #20]
 8001594:	00c9      	lsls	r1, r1, #3
 8001596:	4401      	add	r1, r0
 8001598:	e9c1 2300 	strd	r2, r3, [r1]
        Kalman_accel_z[i] = Az;
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <MPU6050_Read_Accel+0x1c8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffd1 	bl	8000548 <__aeabi_f2d>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4817      	ldr	r0, [pc, #92]	; (8001608 <MPU6050_Read_Accel+0x1e4>)
 80015ac:	6979      	ldr	r1, [r7, #20]
 80015ae:	00c9      	lsls	r1, r1, #3
 80015b0:	4401      	add	r1, r0
 80015b2:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < 100; i++)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3301      	adds	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	2b63      	cmp	r3, #99	; 0x63
 80015c0:	f77f af3b 	ble.w	800143a <MPU6050_Read_Accel+0x16>
    }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000263c 	.word	0x2000263c
 80015d4:	20002630 	.word	0x20002630
 80015d8:	20002632 	.word	0x20002632
 80015dc:	20002634 	.word	0x20002634
 80015e0:	40d00000 	.word	0x40d00000
 80015e4:	20002618 	.word	0x20002618
 80015e8:	2000261c 	.word	0x2000261c
 80015ec:	20002620 	.word	0x20002620
 80015f0:	20001358 	.word	0x20001358
 80015f4:	20001678 	.word	0x20001678
 80015f8:	20001998 	.word	0x20001998
 80015fc:	3c23d70a 	.word	0x3c23d70a
 8001600:	20000098 	.word	0x20000098
 8001604:	200003b8 	.word	0x200003b8
 8001608:	200006d8 	.word	0x200006d8
 800160c:	00000000 	.word	0x00000000

08001610 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af04      	add	r7, sp, #16
    KalmanFilterGyro gyroFilter;
    initKalmanFilterGyro(&gyroFilter);
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fe0c 	bl	8001238 <initKalmanFilterGyro>

    for (int i = 0; i < 100; i++)
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	e0c0      	b.n	80017a8 <MPU6050_Read_Gyro+0x198>
    {
        uint8_t Rec_Data[6];
        HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162a:	9302      	str	r3, [sp, #8]
 800162c:	2306      	movs	r3, #6
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2301      	movs	r3, #1
 8001636:	2243      	movs	r2, #67	; 0x43
 8001638:	21d0      	movs	r1, #208	; 0xd0
 800163a:	4863      	ldr	r0, [pc, #396]	; (80017c8 <MPU6050_Read_Gyro+0x1b8>)
 800163c:	f001 f8ec 	bl	8002818 <HAL_I2C_Mem_Read>
        Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001640:	793b      	ldrb	r3, [r7, #4]
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	b21a      	sxth	r2, r3
 8001646:	797b      	ldrb	r3, [r7, #5]
 8001648:	b21b      	sxth	r3, r3
 800164a:	4313      	orrs	r3, r2
 800164c:	b21a      	sxth	r2, r3
 800164e:	4b5f      	ldr	r3, [pc, #380]	; (80017cc <MPU6050_Read_Gyro+0x1bc>)
 8001650:	801a      	strh	r2, [r3, #0]
        Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001652:	79bb      	ldrb	r3, [r7, #6]
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	b21a      	sxth	r2, r3
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	b21b      	sxth	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	b21a      	sxth	r2, r3
 8001660:	4b5b      	ldr	r3, [pc, #364]	; (80017d0 <MPU6050_Read_Gyro+0x1c0>)
 8001662:	801a      	strh	r2, [r3, #0]
        Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001664:	7a3b      	ldrb	r3, [r7, #8]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	b21a      	sxth	r2, r3
 800166a:	7a7b      	ldrb	r3, [r7, #9]
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21a      	sxth	r2, r3
 8001672:	4b58      	ldr	r3, [pc, #352]	; (80017d4 <MPU6050_Read_Gyro+0x1c4>)
 8001674:	801a      	strh	r2, [r3, #0]
        Gx = Gyro_X_RAW / 131.0;
 8001676:	4b55      	ldr	r3, [pc, #340]	; (80017cc <MPU6050_Read_Gyro+0x1bc>)
 8001678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff51 	bl	8000524 <__aeabi_i2d>
 8001682:	a34f      	add	r3, pc, #316	; (adr r3, 80017c0 <MPU6050_Read_Gyro+0x1b0>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7ff f8e0 	bl	800084c <__aeabi_ddiv>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fa60 	bl	8000b58 <__aeabi_d2f>
 8001698:	4603      	mov	r3, r0
 800169a:	4a4f      	ldr	r2, [pc, #316]	; (80017d8 <MPU6050_Read_Gyro+0x1c8>)
 800169c:	6013      	str	r3, [r2, #0]
        Gy = Gyro_Y_RAW / 131.0;
 800169e:	4b4c      	ldr	r3, [pc, #304]	; (80017d0 <MPU6050_Read_Gyro+0x1c0>)
 80016a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff3d 	bl	8000524 <__aeabi_i2d>
 80016aa:	a345      	add	r3, pc, #276	; (adr r3, 80017c0 <MPU6050_Read_Gyro+0x1b0>)
 80016ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b0:	f7ff f8cc 	bl	800084c <__aeabi_ddiv>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	f7ff fa4c 	bl	8000b58 <__aeabi_d2f>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4a46      	ldr	r2, [pc, #280]	; (80017dc <MPU6050_Read_Gyro+0x1cc>)
 80016c4:	6013      	str	r3, [r2, #0]
        Gz = Gyro_Z_RAW / 131.0;
 80016c6:	4b43      	ldr	r3, [pc, #268]	; (80017d4 <MPU6050_Read_Gyro+0x1c4>)
 80016c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe ff29 	bl	8000524 <__aeabi_i2d>
 80016d2:	a33b      	add	r3, pc, #236	; (adr r3, 80017c0 <MPU6050_Read_Gyro+0x1b0>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	f7ff f8b8 	bl	800084c <__aeabi_ddiv>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff fa38 	bl	8000b58 <__aeabi_d2f>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a3d      	ldr	r2, [pc, #244]	; (80017e0 <MPU6050_Read_Gyro+0x1d0>)
 80016ec:	6013      	str	r3, [r2, #0]

        arr_gyro_x[i] = Gx;
 80016ee:	4b3a      	ldr	r3, [pc, #232]	; (80017d8 <MPU6050_Read_Gyro+0x1c8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ff28 	bl	8000548 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4839      	ldr	r0, [pc, #228]	; (80017e4 <MPU6050_Read_Gyro+0x1d4>)
 80016fe:	6979      	ldr	r1, [r7, #20]
 8001700:	00c9      	lsls	r1, r1, #3
 8001702:	4401      	add	r1, r0
 8001704:	e9c1 2300 	strd	r2, r3, [r1]
        arr_gyro_y[i] = Gy;
 8001708:	4b34      	ldr	r3, [pc, #208]	; (80017dc <MPU6050_Read_Gyro+0x1cc>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe ff1b 	bl	8000548 <__aeabi_f2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4834      	ldr	r0, [pc, #208]	; (80017e8 <MPU6050_Read_Gyro+0x1d8>)
 8001718:	6979      	ldr	r1, [r7, #20]
 800171a:	00c9      	lsls	r1, r1, #3
 800171c:	4401      	add	r1, r0
 800171e:	e9c1 2300 	strd	r2, r3, [r1]
        arr_gyro_z[i] = Gz;
 8001722:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <MPU6050_Read_Gyro+0x1d0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe ff0e 	bl	8000548 <__aeabi_f2d>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	482e      	ldr	r0, [pc, #184]	; (80017ec <MPU6050_Read_Gyro+0x1dc>)
 8001732:	6979      	ldr	r1, [r7, #20]
 8001734:	00c9      	lsls	r1, r1, #3
 8001736:	4401      	add	r1, r0
 8001738:	e9c1 2300 	strd	r2, r3, [r1]

        KalmanFilterUpdateGyro(&gyroFilter, Gz, R_GYRO, 1); // Apply Kalman filter to gyroscope data
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <MPU6050_Read_Gyro+0x1d0>)
 800173e:	edd3 7a00 	vldr	s15, [r3]
 8001742:	f107 030c 	add.w	r3, r7, #12
 8001746:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800174a:	eddf 0a29 	vldr	s1, [pc, #164]	; 80017f0 <MPU6050_Read_Gyro+0x1e0>
 800174e:	eeb0 0a67 	vmov.f32	s0, s15
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fdd6 	bl	8001304 <KalmanFilterUpdateGyro>

        Kalman_gyro_x[i] = gyroFilter.x;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fef4 	bl	8000548 <__aeabi_f2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4823      	ldr	r0, [pc, #140]	; (80017f4 <MPU6050_Read_Gyro+0x1e4>)
 8001766:	6979      	ldr	r1, [r7, #20]
 8001768:	00c9      	lsls	r1, r1, #3
 800176a:	4401      	add	r1, r0
 800176c:	e9c1 2300 	strd	r2, r3, [r1]
        Kalman_gyro_y[i] = gyroFilter.P;
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fee8 	bl	8000548 <__aeabi_f2d>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	481e      	ldr	r0, [pc, #120]	; (80017f8 <MPU6050_Read_Gyro+0x1e8>)
 800177e:	6979      	ldr	r1, [r7, #20]
 8001780:	00c9      	lsls	r1, r1, #3
 8001782:	4401      	add	r1, r0
 8001784:	e9c1 2300 	strd	r2, r3, [r1]
        Kalman_gyro_z[i] = Gz;
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <MPU6050_Read_Gyro+0x1d0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fedb 	bl	8000548 <__aeabi_f2d>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4819      	ldr	r0, [pc, #100]	; (80017fc <MPU6050_Read_Gyro+0x1ec>)
 8001798:	6979      	ldr	r1, [r7, #20]
 800179a:	00c9      	lsls	r1, r1, #3
 800179c:	4401      	add	r1, r0
 800179e:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < 100; i++)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	3301      	adds	r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	2b63      	cmp	r3, #99	; 0x63
 80017ac:	f77f af3b 	ble.w	8001626 <MPU6050_Read_Gyro+0x16>
    }
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	f3af 8000 	nop.w
 80017c0:	00000000 	.word	0x00000000
 80017c4:	40606000 	.word	0x40606000
 80017c8:	2000263c 	.word	0x2000263c
 80017cc:	20002636 	.word	0x20002636
 80017d0:	20002638 	.word	0x20002638
 80017d4:	2000263a 	.word	0x2000263a
 80017d8:	20002624 	.word	0x20002624
 80017dc:	20002628 	.word	0x20002628
 80017e0:	2000262c 	.word	0x2000262c
 80017e4:	20001cb8 	.word	0x20001cb8
 80017e8:	20001fd8 	.word	0x20001fd8
 80017ec:	200022f8 	.word	0x200022f8
 80017f0:	3c23d70a 	.word	0x3c23d70a
 80017f4:	200009f8 	.word	0x200009f8
 80017f8:	20000d18 	.word	0x20000d18
 80017fc:	20001038 	.word	0x20001038

08001800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b08d      	sub	sp, #52	; 0x34
 8001804:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001806:	f000 fac9 	bl	8001d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800180a:	f000 f82d 	bl	8001868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800180e:	f000 f8e7 	bl	80019e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001812:	f000 f889 	bl	8001928 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001816:	f000 f8b5 	bl	8001984 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 800181a:	f7ff fdc7 	bl	80013ac <MPU6050_Init>
  BME280_First_Scan(&start_pressure, &start_temperature);
 800181e:	f107 0218 	add.w	r2, r7, #24
 8001822:	f107 0320 	add.w	r3, r7, #32
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fb63 	bl	8000ef4 <BME280_First_Scan>
  while (1)
  {
	/* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_Accel();
 800182e:	f7ff fdf9 	bl	8001424 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 8001832:	f7ff feed 	bl	8001610 <MPU6050_Read_Gyro>

	  BME280_ReadPressure(&pressure);
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fbf8 	bl	8001030 <BME280_ReadPressure>
	  BME280_ReadTemperature (&temperature);
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fc35 	bl	80010b4 <BME280_ReadTemperature>
	  BME280_Height (&start_pressure, &start_temperature, &pressure, &temperature, &height);
 800184a:	f107 0408 	add.w	r4, r7, #8
 800184e:	f107 0210 	add.w	r2, r7, #16
 8001852:	f107 0118 	add.w	r1, r7, #24
 8001856:	f107 0020 	add.w	r0, r7, #32
 800185a:	463b      	mov	r3, r7
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	4623      	mov	r3, r4
 8001860:	f7ff fc8a 	bl	8001178 <BME280_Height>
	  MPU6050_Read_Accel();
 8001864:	e7e3      	b.n	800182e <main+0x2e>
	...

08001868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b094      	sub	sp, #80	; 0x50
 800186c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186e:	f107 0320 	add.w	r3, r7, #32
 8001872:	2230      	movs	r2, #48	; 0x30
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f002 fb0f 	bl	8003e9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	4b23      	ldr	r3, [pc, #140]	; (8001920 <SystemClock_Config+0xb8>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	4a22      	ldr	r2, [pc, #136]	; (8001920 <SystemClock_Config+0xb8>)
 8001896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189a:	6413      	str	r3, [r2, #64]	; 0x40
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <SystemClock_Config+0xb8>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018a8:	2300      	movs	r3, #0
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <SystemClock_Config+0xbc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018b4:	4a1b      	ldr	r2, [pc, #108]	; (8001924 <SystemClock_Config+0xbc>)
 80018b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <SystemClock_Config+0xbc>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018c8:	2302      	movs	r3, #2
 80018ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018cc:	2301      	movs	r3, #1
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018d0:	2310      	movs	r3, #16
 80018d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d8:	f107 0320 	add.w	r3, r7, #32
 80018dc:	4618      	mov	r0, r3
 80018de:	f001 fd81 	bl	80033e4 <HAL_RCC_OscConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80018e8:	f000 f894 	bl	8001a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ec:	230f      	movs	r3, #15
 80018ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f001 ffe4 	bl	80038d4 <HAL_RCC_ClockConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001912:	f000 f87f 	bl	8001a14 <Error_Handler>
  }
}
 8001916:	bf00      	nop
 8001918:	3750      	adds	r7, #80	; 0x50
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40007000 	.word	0x40007000

08001928 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <MX_I2C1_Init+0x50>)
 800192e:	4a13      	ldr	r2, [pc, #76]	; (800197c <MX_I2C1_Init+0x54>)
 8001930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <MX_I2C1_Init+0x50>)
 8001934:	4a12      	ldr	r2, [pc, #72]	; (8001980 <MX_I2C1_Init+0x58>)
 8001936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_I2C1_Init+0x50>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <MX_I2C1_Init+0x50>)
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_I2C1_Init+0x50>)
 8001946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800194a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <MX_I2C1_Init+0x50>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_I2C1_Init+0x50>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <MX_I2C1_Init+0x50>)
 8001966:	f000 fd19 	bl	800239c <HAL_I2C_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001970:	f000 f850 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	2000263c 	.word	0x2000263c
 800197c:	40005400 	.word	0x40005400
 8001980:	000186a0 	.word	0x000186a0

08001984 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <MX_I2C2_Init+0x50>)
 800198a:	4a13      	ldr	r2, [pc, #76]	; (80019d8 <MX_I2C2_Init+0x54>)
 800198c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <MX_I2C2_Init+0x50>)
 8001990:	4a12      	ldr	r2, [pc, #72]	; (80019dc <MX_I2C2_Init+0x58>)
 8001992:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <MX_I2C2_Init+0x50>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <MX_I2C2_Init+0x50>)
 800199c:	2200      	movs	r2, #0
 800199e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <MX_I2C2_Init+0x50>)
 80019a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <MX_I2C2_Init+0x50>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_I2C2_Init+0x50>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <MX_I2C2_Init+0x50>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_I2C2_Init+0x50>)
 80019bc:	2200      	movs	r2, #0
 80019be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019c0:	4804      	ldr	r0, [pc, #16]	; (80019d4 <MX_I2C2_Init+0x50>)
 80019c2:	f000 fceb 	bl	800239c <HAL_I2C_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019cc:	f000 f822 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20002690 	.word	0x20002690
 80019d8:	40005800 	.word	0x40005800
 80019dc:	000186a0 	.word	0x000186a0

080019e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <MX_GPIO_Init+0x30>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <MX_GPIO_Init+0x30>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <MX_GPIO_Init+0x30>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800

08001a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a18:	b672      	cpsid	i
}
 8001a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <Error_Handler+0x8>
	...

08001a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a34:	6453      	str	r3, [r2, #68]	; 0x44
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	603b      	str	r3, [r7, #0]
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800

08001a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	; 0x30
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a3a      	ldr	r2, [pc, #232]	; (8001b78 <HAL_I2C_MspInit+0x108>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d12c      	bne.n	8001aec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	4b39      	ldr	r3, [pc, #228]	; (8001b7c <HAL_I2C_MspInit+0x10c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a38      	ldr	r2, [pc, #224]	; (8001b7c <HAL_I2C_MspInit+0x10c>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <HAL_I2C_MspInit+0x10c>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aae:	23c0      	movs	r3, #192	; 0xc0
 8001ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab2:	2312      	movs	r3, #18
 8001ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	482d      	ldr	r0, [pc, #180]	; (8001b80 <HAL_I2C_MspInit+0x110>)
 8001aca:	f000 fae3 	bl	8002094 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <HAL_I2C_MspInit+0x10c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a29      	ldr	r2, [pc, #164]	; (8001b7c <HAL_I2C_MspInit+0x10c>)
 8001ad8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <HAL_I2C_MspInit+0x10c>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001aea:	e041      	b.n	8001b70 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a24      	ldr	r2, [pc, #144]	; (8001b84 <HAL_I2C_MspInit+0x114>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d13c      	bne.n	8001b70 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <HAL_I2C_MspInit+0x10c>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a1f      	ldr	r2, [pc, #124]	; (8001b7c <HAL_I2C_MspInit+0x10c>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <HAL_I2C_MspInit+0x10c>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b18:	2312      	movs	r3, #18
 8001b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b20:	2303      	movs	r3, #3
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b24:	2304      	movs	r3, #4
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4814      	ldr	r0, [pc, #80]	; (8001b80 <HAL_I2C_MspInit+0x110>)
 8001b30:	f000 fab0 	bl	8002094 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b34:	2308      	movs	r3, #8
 8001b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b38:	2312      	movs	r3, #18
 8001b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001b44:	2309      	movs	r3, #9
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b48:	f107 031c 	add.w	r3, r7, #28
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480c      	ldr	r0, [pc, #48]	; (8001b80 <HAL_I2C_MspInit+0x110>)
 8001b50:	f000 faa0 	bl	8002094 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_I2C_MspInit+0x10c>)
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <HAL_I2C_MspInit+0x10c>)
 8001b5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b62:	6413      	str	r3, [r2, #64]	; 0x40
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_I2C_MspInit+0x10c>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
}
 8001b70:	bf00      	nop
 8001b72:	3730      	adds	r7, #48	; 0x30
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40005400 	.word	0x40005400
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40005800 	.word	0x40005800

08001b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b8c:	e7fe      	b.n	8001b8c <NMI_Handler+0x4>

08001b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <HardFault_Handler+0x4>

08001b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <MemManage_Handler+0x4>

08001b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b9e:	e7fe      	b.n	8001b9e <BusFault_Handler+0x4>

08001ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <UsageFault_Handler+0x4>

08001ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd4:	f000 f934 	bl	8001e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	e00a      	b.n	8001c04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bee:	f3af 8000 	nop.w
 8001bf2:	4601      	mov	r1, r0
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	60ba      	str	r2, [r7, #8]
 8001bfa:	b2ca      	uxtb	r2, r1
 8001bfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	3301      	adds	r3, #1
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	dbf0      	blt.n	8001bee <_read+0x12>
  }

  return len;
 8001c0c:	687b      	ldr	r3, [r7, #4]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e009      	b.n	8001c3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	60ba      	str	r2, [r7, #8]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbf1      	blt.n	8001c28 <_write+0x12>
  }
  return len;
 8001c44:	687b      	ldr	r3, [r7, #4]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <_close>:

int _close(int file)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c76:	605a      	str	r2, [r3, #4]
  return 0;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <_isatty>:

int _isatty(int file)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc0:	4a14      	ldr	r2, [pc, #80]	; (8001d14 <_sbrk+0x5c>)
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <_sbrk+0x60>)
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <_sbrk+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <_sbrk+0x64>)
 8001cd6:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <_sbrk+0x68>)
 8001cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <_sbrk+0x64>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d207      	bcs.n	8001cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce8:	f002 f926 	bl	8003f38 <__errno>
 8001cec:	4603      	mov	r3, r0
 8001cee:	220c      	movs	r2, #12
 8001cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf6:	e009      	b.n	8001d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	4a05      	ldr	r2, [pc, #20]	; (8001d1c <_sbrk+0x64>)
 8001d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20018000 	.word	0x20018000
 8001d18:	00000400 	.word	0x00000400
 8001d1c:	200026e4 	.word	0x200026e4
 8001d20:	20002838 	.word	0x20002838

08001d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <SystemInit+0x20>)
 8001d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <SystemInit+0x20>)
 8001d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8001d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d4c:	f7ff ffea 	bl	8001d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d50:	480c      	ldr	r0, [pc, #48]	; (8001d84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d52:	490d      	ldr	r1, [pc, #52]	; (8001d88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d54:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d58:	e002      	b.n	8001d60 <LoopCopyDataInit>

08001d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d5e:	3304      	adds	r3, #4

08001d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d64:	d3f9      	bcc.n	8001d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d68:	4c0a      	ldr	r4, [pc, #40]	; (8001d94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d6c:	e001      	b.n	8001d72 <LoopFillZerobss>

08001d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d70:	3204      	adds	r2, #4

08001d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d74:	d3fb      	bcc.n	8001d6e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001d76:	f002 f8e5 	bl	8003f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d7a:	f7ff fd41 	bl	8001800 <main>
  bx  lr    
 8001d7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d88:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001d8c:	08005a00 	.word	0x08005a00
  ldr r2, =_sbss
 8001d90:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001d94:	20002838 	.word	0x20002838

08001d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d98:	e7fe      	b.n	8001d98 <ADC_IRQHandler>
	...

08001d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001da0:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <HAL_Init+0x40>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0d      	ldr	r2, [pc, #52]	; (8001ddc <HAL_Init+0x40>)
 8001da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_Init+0x40>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_Init+0x40>)
 8001db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HAL_Init+0x40>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a07      	ldr	r2, [pc, #28]	; (8001ddc <HAL_Init+0x40>)
 8001dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc4:	2003      	movs	r0, #3
 8001dc6:	f000 f931 	bl	800202c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dca:	200f      	movs	r0, #15
 8001dcc:	f000 f808 	bl	8001de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd0:	f7ff fe26 	bl	8001a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023c00 	.word	0x40023c00

08001de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_InitTick+0x54>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_InitTick+0x58>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	4619      	mov	r1, r3
 8001df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 f93b 	bl	800207a <HAL_SYSTICK_Config>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00e      	b.n	8001e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b0f      	cmp	r3, #15
 8001e12:	d80a      	bhi.n	8001e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e14:	2200      	movs	r2, #0
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f000 f911 	bl	8002042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e20:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <HAL_InitTick+0x5c>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	e000      	b.n	8001e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000000 	.word	0x20000000
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	20000004 	.word	0x20000004

08001e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_IncTick+0x20>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_IncTick+0x24>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_IncTick+0x24>)
 8001e52:	6013      	str	r3, [r2, #0]
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000008 	.word	0x20000008
 8001e64:	200026e8 	.word	0x200026e8

08001e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_GetTick+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	200026e8 	.word	0x200026e8

08001e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff ffee 	bl	8001e68 <HAL_GetTick>
 8001e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e98:	d005      	beq.n	8001ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_Delay+0x44>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ea6:	bf00      	nop
 8001ea8:	f7ff ffde 	bl	8001e68 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d8f7      	bhi.n	8001ea8 <HAL_Delay+0x28>
  {
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000008 	.word	0x20000008

08001ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efa:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	60d3      	str	r3, [r2, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <__NVIC_GetPriorityGrouping+0x18>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0307 	and.w	r3, r3, #7
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db0a      	blt.n	8001f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	490c      	ldr	r1, [pc, #48]	; (8001f78 <__NVIC_SetPriority+0x4c>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f54:	e00a      	b.n	8001f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4908      	ldr	r1, [pc, #32]	; (8001f7c <__NVIC_SetPriority+0x50>)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	3b04      	subs	r3, #4
 8001f64:	0112      	lsls	r2, r2, #4
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	440b      	add	r3, r1
 8001f6a:	761a      	strb	r2, [r3, #24]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000e100 	.word	0xe000e100
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	; 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f1c3 0307 	rsb	r3, r3, #7
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	bf28      	it	cs
 8001f9e:	2304      	movcs	r3, #4
 8001fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d902      	bls.n	8001fb0 <NVIC_EncodePriority+0x30>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3b03      	subs	r3, #3
 8001fae:	e000      	b.n	8001fb2 <NVIC_EncodePriority+0x32>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43d9      	mvns	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	4313      	orrs	r3, r2
         );
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	; 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff8:	d301      	bcc.n	8001ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e00f      	b.n	800201e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <SysTick_Config+0x40>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002006:	210f      	movs	r1, #15
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	f7ff ff8e 	bl	8001f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <SysTick_Config+0x40>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002016:	4b04      	ldr	r3, [pc, #16]	; (8002028 <SysTick_Config+0x40>)
 8002018:	2207      	movs	r2, #7
 800201a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	e000e010 	.word	0xe000e010

0800202c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ff47 	bl	8001ec8 <__NVIC_SetPriorityGrouping>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002042:	b580      	push	{r7, lr}
 8002044:	b086      	sub	sp, #24
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002054:	f7ff ff5c 	bl	8001f10 <__NVIC_GetPriorityGrouping>
 8002058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	6978      	ldr	r0, [r7, #20]
 8002060:	f7ff ff8e 	bl	8001f80 <NVIC_EncodePriority>
 8002064:	4602      	mov	r2, r0
 8002066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff5d 	bl	8001f2c <__NVIC_SetPriority>
}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff ffb0 	bl	8001fe8 <SysTick_Config>
 8002088:	4603      	mov	r3, r0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	e159      	b.n	8002364 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020b0:	2201      	movs	r2, #1
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	f040 8148 	bne.w	800235e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d005      	beq.n	80020e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d130      	bne.n	8002148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2203      	movs	r2, #3
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800211c:	2201      	movs	r2, #1
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 0201 	and.w	r2, r3, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b03      	cmp	r3, #3
 8002152:	d017      	beq.n	8002184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2203      	movs	r2, #3
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d123      	bne.n	80021d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	08da      	lsrs	r2, r3, #3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3208      	adds	r2, #8
 8002198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	220f      	movs	r2, #15
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	08da      	lsrs	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3208      	adds	r2, #8
 80021d2:	69b9      	ldr	r1, [r7, #24]
 80021d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	2203      	movs	r2, #3
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0203 	and.w	r2, r3, #3
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80a2 	beq.w	800235e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b57      	ldr	r3, [pc, #348]	; (800237c <HAL_GPIO_Init+0x2e8>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	4a56      	ldr	r2, [pc, #344]	; (800237c <HAL_GPIO_Init+0x2e8>)
 8002224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002228:	6453      	str	r3, [r2, #68]	; 0x44
 800222a:	4b54      	ldr	r3, [pc, #336]	; (800237c <HAL_GPIO_Init+0x2e8>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002236:	4a52      	ldr	r2, [pc, #328]	; (8002380 <HAL_GPIO_Init+0x2ec>)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	3302      	adds	r3, #2
 800223e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	220f      	movs	r2, #15
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a49      	ldr	r2, [pc, #292]	; (8002384 <HAL_GPIO_Init+0x2f0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d019      	beq.n	8002296 <HAL_GPIO_Init+0x202>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a48      	ldr	r2, [pc, #288]	; (8002388 <HAL_GPIO_Init+0x2f4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d013      	beq.n	8002292 <HAL_GPIO_Init+0x1fe>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a47      	ldr	r2, [pc, #284]	; (800238c <HAL_GPIO_Init+0x2f8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00d      	beq.n	800228e <HAL_GPIO_Init+0x1fa>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a46      	ldr	r2, [pc, #280]	; (8002390 <HAL_GPIO_Init+0x2fc>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d007      	beq.n	800228a <HAL_GPIO_Init+0x1f6>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a45      	ldr	r2, [pc, #276]	; (8002394 <HAL_GPIO_Init+0x300>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d101      	bne.n	8002286 <HAL_GPIO_Init+0x1f2>
 8002282:	2304      	movs	r3, #4
 8002284:	e008      	b.n	8002298 <HAL_GPIO_Init+0x204>
 8002286:	2307      	movs	r3, #7
 8002288:	e006      	b.n	8002298 <HAL_GPIO_Init+0x204>
 800228a:	2303      	movs	r3, #3
 800228c:	e004      	b.n	8002298 <HAL_GPIO_Init+0x204>
 800228e:	2302      	movs	r3, #2
 8002290:	e002      	b.n	8002298 <HAL_GPIO_Init+0x204>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_GPIO_Init+0x204>
 8002296:	2300      	movs	r3, #0
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	f002 0203 	and.w	r2, r2, #3
 800229e:	0092      	lsls	r2, r2, #2
 80022a0:	4093      	lsls	r3, r2
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022a8:	4935      	ldr	r1, [pc, #212]	; (8002380 <HAL_GPIO_Init+0x2ec>)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	3302      	adds	r3, #2
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022b6:	4b38      	ldr	r3, [pc, #224]	; (8002398 <HAL_GPIO_Init+0x304>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022da:	4a2f      	ldr	r2, [pc, #188]	; (8002398 <HAL_GPIO_Init+0x304>)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022e0:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HAL_GPIO_Init+0x304>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002304:	4a24      	ldr	r2, [pc, #144]	; (8002398 <HAL_GPIO_Init+0x304>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800230a:	4b23      	ldr	r3, [pc, #140]	; (8002398 <HAL_GPIO_Init+0x304>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800232e:	4a1a      	ldr	r2, [pc, #104]	; (8002398 <HAL_GPIO_Init+0x304>)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002334:	4b18      	ldr	r3, [pc, #96]	; (8002398 <HAL_GPIO_Init+0x304>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002358:	4a0f      	ldr	r2, [pc, #60]	; (8002398 <HAL_GPIO_Init+0x304>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3301      	adds	r3, #1
 8002362:	61fb      	str	r3, [r7, #28]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	2b0f      	cmp	r3, #15
 8002368:	f67f aea2 	bls.w	80020b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3724      	adds	r7, #36	; 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
 8002380:	40013800 	.word	0x40013800
 8002384:	40020000 	.word	0x40020000
 8002388:	40020400 	.word	0x40020400
 800238c:	40020800 	.word	0x40020800
 8002390:	40020c00 	.word	0x40020c00
 8002394:	40021000 	.word	0x40021000
 8002398:	40013c00 	.word	0x40013c00

0800239c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e12b      	b.n	8002606 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fb54 	bl	8001a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2224      	movs	r2, #36	; 0x24
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002400:	f001 fc20 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 8002404:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4a81      	ldr	r2, [pc, #516]	; (8002610 <HAL_I2C_Init+0x274>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d807      	bhi.n	8002420 <HAL_I2C_Init+0x84>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4a80      	ldr	r2, [pc, #512]	; (8002614 <HAL_I2C_Init+0x278>)
 8002414:	4293      	cmp	r3, r2
 8002416:	bf94      	ite	ls
 8002418:	2301      	movls	r3, #1
 800241a:	2300      	movhi	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	e006      	b.n	800242e <HAL_I2C_Init+0x92>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a7d      	ldr	r2, [pc, #500]	; (8002618 <HAL_I2C_Init+0x27c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	bf94      	ite	ls
 8002428:	2301      	movls	r3, #1
 800242a:	2300      	movhi	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e0e7      	b.n	8002606 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4a78      	ldr	r2, [pc, #480]	; (800261c <HAL_I2C_Init+0x280>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0c9b      	lsrs	r3, r3, #18
 8002440:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a6a      	ldr	r2, [pc, #424]	; (8002610 <HAL_I2C_Init+0x274>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d802      	bhi.n	8002470 <HAL_I2C_Init+0xd4>
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3301      	adds	r3, #1
 800246e:	e009      	b.n	8002484 <HAL_I2C_Init+0xe8>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	4a69      	ldr	r2, [pc, #420]	; (8002620 <HAL_I2C_Init+0x284>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	3301      	adds	r3, #1
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	430b      	orrs	r3, r1
 800248a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002496:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	495c      	ldr	r1, [pc, #368]	; (8002610 <HAL_I2C_Init+0x274>)
 80024a0:	428b      	cmp	r3, r1
 80024a2:	d819      	bhi.n	80024d8 <HAL_I2C_Init+0x13c>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1e59      	subs	r1, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80024b2:	1c59      	adds	r1, r3, #1
 80024b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024b8:	400b      	ands	r3, r1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <HAL_I2C_Init+0x138>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1e59      	subs	r1, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d2:	e051      	b.n	8002578 <HAL_I2C_Init+0x1dc>
 80024d4:	2304      	movs	r3, #4
 80024d6:	e04f      	b.n	8002578 <HAL_I2C_Init+0x1dc>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d111      	bne.n	8002504 <HAL_I2C_Init+0x168>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1e58      	subs	r0, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	440b      	add	r3, r1
 80024ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f2:	3301      	adds	r3, #1
 80024f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	bf0c      	ite	eq
 80024fc:	2301      	moveq	r3, #1
 80024fe:	2300      	movne	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	e012      	b.n	800252a <HAL_I2C_Init+0x18e>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1e58      	subs	r0, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	0099      	lsls	r1, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	fbb0 f3f3 	udiv	r3, r0, r3
 800251a:	3301      	adds	r3, #1
 800251c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf0c      	ite	eq
 8002524:	2301      	moveq	r3, #1
 8002526:	2300      	movne	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Init+0x196>
 800252e:	2301      	movs	r3, #1
 8002530:	e022      	b.n	8002578 <HAL_I2C_Init+0x1dc>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10e      	bne.n	8002558 <HAL_I2C_Init+0x1bc>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1e58      	subs	r0, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6859      	ldr	r1, [r3, #4]
 8002542:	460b      	mov	r3, r1
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	440b      	add	r3, r1
 8002548:	fbb0 f3f3 	udiv	r3, r0, r3
 800254c:	3301      	adds	r3, #1
 800254e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002556:	e00f      	b.n	8002578 <HAL_I2C_Init+0x1dc>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1e58      	subs	r0, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	0099      	lsls	r1, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	fbb0 f3f3 	udiv	r3, r0, r3
 800256e:	3301      	adds	r3, #1
 8002570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	6809      	ldr	r1, [r1, #0]
 800257c:	4313      	orrs	r3, r2
 800257e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69da      	ldr	r2, [r3, #28]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6911      	ldr	r1, [r2, #16]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68d2      	ldr	r2, [r2, #12]
 80025b2:	4311      	orrs	r1, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	430b      	orrs	r3, r1
 80025ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	000186a0 	.word	0x000186a0
 8002614:	001e847f 	.word	0x001e847f
 8002618:	003d08ff 	.word	0x003d08ff
 800261c:	431bde83 	.word	0x431bde83
 8002620:	10624dd3 	.word	0x10624dd3

08002624 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af02      	add	r7, sp, #8
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	4608      	mov	r0, r1
 800262e:	4611      	mov	r1, r2
 8002630:	461a      	mov	r2, r3
 8002632:	4603      	mov	r3, r0
 8002634:	817b      	strh	r3, [r7, #10]
 8002636:	460b      	mov	r3, r1
 8002638:	813b      	strh	r3, [r7, #8]
 800263a:	4613      	mov	r3, r2
 800263c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800263e:	f7ff fc13 	bl	8001e68 <HAL_GetTick>
 8002642:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b20      	cmp	r3, #32
 800264e:	f040 80d9 	bne.w	8002804 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	2319      	movs	r3, #25
 8002658:	2201      	movs	r2, #1
 800265a:	496d      	ldr	r1, [pc, #436]	; (8002810 <HAL_I2C_Mem_Write+0x1ec>)
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 fc8b 	bl	8002f78 <I2C_WaitOnFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002668:	2302      	movs	r3, #2
 800266a:	e0cc      	b.n	8002806 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_I2C_Mem_Write+0x56>
 8002676:	2302      	movs	r3, #2
 8002678:	e0c5      	b.n	8002806 <HAL_I2C_Mem_Write+0x1e2>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b01      	cmp	r3, #1
 800268e:	d007      	beq.n	80026a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2221      	movs	r2, #33	; 0x21
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2240      	movs	r2, #64	; 0x40
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a3a      	ldr	r2, [r7, #32]
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4a4d      	ldr	r2, [pc, #308]	; (8002814 <HAL_I2C_Mem_Write+0x1f0>)
 80026e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026e2:	88f8      	ldrh	r0, [r7, #6]
 80026e4:	893a      	ldrh	r2, [r7, #8]
 80026e6:	8979      	ldrh	r1, [r7, #10]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	4603      	mov	r3, r0
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fac2 	bl	8002c7c <I2C_RequestMemoryWrite>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d052      	beq.n	80027a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e081      	b.n	8002806 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fd50 	bl	80031ac <I2C_WaitOnTXEFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00d      	beq.n	800272e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2b04      	cmp	r3, #4
 8002718:	d107      	bne.n	800272a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002728:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e06b      	b.n	8002806 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	781a      	ldrb	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b04      	cmp	r3, #4
 800276a:	d11b      	bne.n	80027a4 <HAL_I2C_Mem_Write+0x180>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002770:	2b00      	cmp	r3, #0
 8002772:	d017      	beq.n	80027a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	781a      	ldrb	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1aa      	bne.n	8002702 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 fd43 	bl	800323c <I2C_WaitOnBTFFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00d      	beq.n	80027d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d107      	bne.n	80027d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e016      	b.n	8002806 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	e000      	b.n	8002806 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002804:	2302      	movs	r3, #2
  }
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	00100002 	.word	0x00100002
 8002814:	ffff0000 	.word	0xffff0000

08002818 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	; 0x30
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	4608      	mov	r0, r1
 8002822:	4611      	mov	r1, r2
 8002824:	461a      	mov	r2, r3
 8002826:	4603      	mov	r3, r0
 8002828:	817b      	strh	r3, [r7, #10]
 800282a:	460b      	mov	r3, r1
 800282c:	813b      	strh	r3, [r7, #8]
 800282e:	4613      	mov	r3, r2
 8002830:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002832:	f7ff fb19 	bl	8001e68 <HAL_GetTick>
 8002836:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b20      	cmp	r3, #32
 8002842:	f040 8214 	bne.w	8002c6e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2319      	movs	r3, #25
 800284c:	2201      	movs	r2, #1
 800284e:	497b      	ldr	r1, [pc, #492]	; (8002a3c <HAL_I2C_Mem_Read+0x224>)
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fb91 	bl	8002f78 <I2C_WaitOnFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800285c:	2302      	movs	r3, #2
 800285e:	e207      	b.n	8002c70 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_I2C_Mem_Read+0x56>
 800286a:	2302      	movs	r3, #2
 800286c:	e200      	b.n	8002c70 <HAL_I2C_Mem_Read+0x458>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	d007      	beq.n	8002894 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2222      	movs	r2, #34	; 0x22
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2240      	movs	r2, #64	; 0x40
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80028c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4a5b      	ldr	r2, [pc, #364]	; (8002a40 <HAL_I2C_Mem_Read+0x228>)
 80028d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028d6:	88f8      	ldrh	r0, [r7, #6]
 80028d8:	893a      	ldrh	r2, [r7, #8]
 80028da:	8979      	ldrh	r1, [r7, #10]
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	4603      	mov	r3, r0
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 fa5e 	bl	8002da8 <I2C_RequestMemoryRead>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e1bc      	b.n	8002c70 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d113      	bne.n	8002926 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028fe:	2300      	movs	r3, #0
 8002900:	623b      	str	r3, [r7, #32]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	623b      	str	r3, [r7, #32]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	623b      	str	r3, [r7, #32]
 8002912:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e190      	b.n	8002c48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292a:	2b01      	cmp	r3, #1
 800292c:	d11b      	bne.n	8002966 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800293c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	e170      	b.n	8002c48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296a:	2b02      	cmp	r3, #2
 800296c:	d11b      	bne.n	80029a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800298c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	e150      	b.n	8002c48 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029bc:	e144      	b.n	8002c48 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	f200 80f1 	bhi.w	8002baa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d123      	bne.n	8002a18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 fc79 	bl	80032cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e145      	b.n	8002c70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a16:	e117      	b.n	8002c48 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d14e      	bne.n	8002abe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a26:	2200      	movs	r2, #0
 8002a28:	4906      	ldr	r1, [pc, #24]	; (8002a44 <HAL_I2C_Mem_Read+0x22c>)
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 faa4 	bl	8002f78 <I2C_WaitOnFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e11a      	b.n	8002c70 <HAL_I2C_Mem_Read+0x458>
 8002a3a:	bf00      	nop
 8002a3c:	00100002 	.word	0x00100002
 8002a40:	ffff0000 	.word	0xffff0000
 8002a44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002abc:	e0c4      	b.n	8002c48 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	496c      	ldr	r1, [pc, #432]	; (8002c78 <HAL_I2C_Mem_Read+0x460>)
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fa55 	bl	8002f78 <I2C_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0cb      	b.n	8002c70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b20:	2200      	movs	r2, #0
 8002b22:	4955      	ldr	r1, [pc, #340]	; (8002c78 <HAL_I2C_Mem_Read+0x460>)
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 fa27 	bl	8002f78 <I2C_WaitOnFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e09d      	b.n	8002c70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ba8:	e04e      	b.n	8002c48 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fb8c 	bl	80032cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e058      	b.n	8002c70 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d124      	bne.n	8002c48 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d107      	bne.n	8002c16 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c14:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f47f aeb6 	bne.w	80029be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2220      	movs	r2, #32
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e000      	b.n	8002c70 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002c6e:	2302      	movs	r3, #2
  }
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3728      	adds	r7, #40	; 0x28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	00010004 	.word	0x00010004

08002c7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af02      	add	r7, sp, #8
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	4608      	mov	r0, r1
 8002c86:	4611      	mov	r1, r2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	817b      	strh	r3, [r7, #10]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	813b      	strh	r3, [r7, #8]
 8002c92:	4613      	mov	r3, r2
 8002c94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ca4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f960 	bl	8002f78 <I2C_WaitOnFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00d      	beq.n	8002cda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ccc:	d103      	bne.n	8002cd6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e05f      	b.n	8002d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cda:	897b      	ldrh	r3, [r7, #10]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ce8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	6a3a      	ldr	r2, [r7, #32]
 8002cee:	492d      	ldr	r1, [pc, #180]	; (8002da4 <I2C_RequestMemoryWrite+0x128>)
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f9bb 	bl	800306c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e04c      	b.n	8002d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d18:	6a39      	ldr	r1, [r7, #32]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fa46 	bl	80031ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00d      	beq.n	8002d42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d107      	bne.n	8002d3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e02b      	b.n	8002d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d105      	bne.n	8002d54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d48:	893b      	ldrh	r3, [r7, #8]
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	611a      	str	r2, [r3, #16]
 8002d52:	e021      	b.n	8002d98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d54:	893b      	ldrh	r3, [r7, #8]
 8002d56:	0a1b      	lsrs	r3, r3, #8
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d64:	6a39      	ldr	r1, [r7, #32]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fa20 	bl	80031ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00d      	beq.n	8002d8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d107      	bne.n	8002d8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e005      	b.n	8002d9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d8e:	893b      	ldrh	r3, [r7, #8]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	00010002 	.word	0x00010002

08002da8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	4608      	mov	r0, r1
 8002db2:	4611      	mov	r1, r2
 8002db4:	461a      	mov	r2, r3
 8002db6:	4603      	mov	r3, r0
 8002db8:	817b      	strh	r3, [r7, #10]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	813b      	strh	r3, [r7, #8]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dd0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002de0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f8c2 	bl	8002f78 <I2C_WaitOnFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00d      	beq.n	8002e16 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e08:	d103      	bne.n	8002e12 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e0aa      	b.n	8002f6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e16:	897b      	ldrh	r3, [r7, #10]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	6a3a      	ldr	r2, [r7, #32]
 8002e2a:	4952      	ldr	r1, [pc, #328]	; (8002f74 <I2C_RequestMemoryRead+0x1cc>)
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f91d 	bl	800306c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e097      	b.n	8002f6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e54:	6a39      	ldr	r1, [r7, #32]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f9a8 	bl	80031ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00d      	beq.n	8002e7e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d107      	bne.n	8002e7a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e076      	b.n	8002f6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d105      	bne.n	8002e90 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e84:	893b      	ldrh	r3, [r7, #8]
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	611a      	str	r2, [r3, #16]
 8002e8e:	e021      	b.n	8002ed4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e90:	893b      	ldrh	r3, [r7, #8]
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea0:	6a39      	ldr	r1, [r7, #32]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f982 	bl	80031ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00d      	beq.n	8002eca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d107      	bne.n	8002ec6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e050      	b.n	8002f6c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eca:	893b      	ldrh	r3, [r7, #8]
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed6:	6a39      	ldr	r1, [r7, #32]
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f967 	bl	80031ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00d      	beq.n	8002f00 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d107      	bne.n	8002efc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002efa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e035      	b.n	8002f6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f82b 	bl	8002f78 <I2C_WaitOnFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00d      	beq.n	8002f44 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f36:	d103      	bne.n	8002f40 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e013      	b.n	8002f6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f44:	897b      	ldrh	r3, [r7, #10]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	6a3a      	ldr	r2, [r7, #32]
 8002f58:	4906      	ldr	r1, [pc, #24]	; (8002f74 <I2C_RequestMemoryRead+0x1cc>)
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f886 	bl	800306c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	00010002 	.word	0x00010002

08002f78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	4613      	mov	r3, r2
 8002f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f88:	e048      	b.n	800301c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d044      	beq.n	800301c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f92:	f7fe ff69 	bl	8001e68 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d302      	bcc.n	8002fa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d139      	bne.n	800301c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	0c1b      	lsrs	r3, r3, #16
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d10d      	bne.n	8002fce <I2C_WaitOnFlagUntilTimeout+0x56>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	43da      	mvns	r2, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	461a      	mov	r2, r3
 8002fcc:	e00c      	b.n	8002fe8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d116      	bne.n	800301c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	f043 0220 	orr.w	r2, r3, #32
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e023      	b.n	8003064 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	0c1b      	lsrs	r3, r3, #16
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b01      	cmp	r3, #1
 8003024:	d10d      	bne.n	8003042 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	43da      	mvns	r2, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	4013      	ands	r3, r2
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	461a      	mov	r2, r3
 8003040:	e00c      	b.n	800305c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	43da      	mvns	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4013      	ands	r3, r2
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	429a      	cmp	r2, r3
 8003060:	d093      	beq.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800307a:	e071      	b.n	8003160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308a:	d123      	bne.n	80030d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800309a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	f043 0204 	orr.w	r2, r3, #4
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e067      	b.n	80031a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030da:	d041      	beq.n	8003160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030dc:	f7fe fec4 	bl	8001e68 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d302      	bcc.n	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d136      	bne.n	8003160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	0c1b      	lsrs	r3, r3, #16
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d10c      	bne.n	8003116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	43da      	mvns	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4013      	ands	r3, r2
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	bf14      	ite	ne
 800310e:	2301      	movne	r3, #1
 8003110:	2300      	moveq	r3, #0
 8003112:	b2db      	uxtb	r3, r3
 8003114:	e00b      	b.n	800312e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	43da      	mvns	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	4013      	ands	r3, r2
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf14      	ite	ne
 8003128:	2301      	movne	r3, #1
 800312a:	2300      	moveq	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d016      	beq.n	8003160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f043 0220 	orr.w	r2, r3, #32
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e021      	b.n	80031a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	0c1b      	lsrs	r3, r3, #16
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b01      	cmp	r3, #1
 8003168:	d10c      	bne.n	8003184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	43da      	mvns	r2, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	4013      	ands	r3, r2
 8003176:	b29b      	uxth	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	bf14      	ite	ne
 800317c:	2301      	movne	r3, #1
 800317e:	2300      	moveq	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	e00b      	b.n	800319c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	43da      	mvns	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4013      	ands	r3, r2
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf14      	ite	ne
 8003196:	2301      	movne	r3, #1
 8003198:	2300      	moveq	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	f47f af6d 	bne.w	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031b8:	e034      	b.n	8003224 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f8e3 	bl	8003386 <I2C_IsAcknowledgeFailed>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e034      	b.n	8003234 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d0:	d028      	beq.n	8003224 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d2:	f7fe fe49 	bl	8001e68 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d302      	bcc.n	80031e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d11d      	bne.n	8003224 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f2:	2b80      	cmp	r3, #128	; 0x80
 80031f4:	d016      	beq.n	8003224 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e007      	b.n	8003234 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322e:	2b80      	cmp	r3, #128	; 0x80
 8003230:	d1c3      	bne.n	80031ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003248:	e034      	b.n	80032b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f89b 	bl	8003386 <I2C_IsAcknowledgeFailed>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e034      	b.n	80032c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d028      	beq.n	80032b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003262:	f7fe fe01 	bl	8001e68 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	429a      	cmp	r2, r3
 8003270:	d302      	bcc.n	8003278 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d11d      	bne.n	80032b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b04      	cmp	r3, #4
 8003284:	d016      	beq.n	80032b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	f043 0220 	orr.w	r2, r3, #32
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e007      	b.n	80032c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d1c3      	bne.n	800324a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032d8:	e049      	b.n	800336e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b10      	cmp	r3, #16
 80032e6:	d119      	bne.n	800331c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0210 	mvn.w	r2, #16
 80032f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e030      	b.n	800337e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331c:	f7fe fda4 	bl	8001e68 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	429a      	cmp	r2, r3
 800332a:	d302      	bcc.n	8003332 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d11d      	bne.n	800336e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333c:	2b40      	cmp	r3, #64	; 0x40
 800333e:	d016      	beq.n	800336e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f043 0220 	orr.w	r2, r3, #32
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e007      	b.n	800337e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003378:	2b40      	cmp	r3, #64	; 0x40
 800337a:	d1ae      	bne.n	80032da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339c:	d11b      	bne.n	80033d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f043 0204 	orr.w	r2, r3, #4
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e267      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d075      	beq.n	80034ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003402:	4b88      	ldr	r3, [pc, #544]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b04      	cmp	r3, #4
 800340c:	d00c      	beq.n	8003428 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340e:	4b85      	ldr	r3, [pc, #532]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003416:	2b08      	cmp	r3, #8
 8003418:	d112      	bne.n	8003440 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341a:	4b82      	ldr	r3, [pc, #520]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003426:	d10b      	bne.n	8003440 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003428:	4b7e      	ldr	r3, [pc, #504]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d05b      	beq.n	80034ec <HAL_RCC_OscConfig+0x108>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d157      	bne.n	80034ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e242      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003448:	d106      	bne.n	8003458 <HAL_RCC_OscConfig+0x74>
 800344a:	4b76      	ldr	r3, [pc, #472]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a75      	ldr	r2, [pc, #468]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	e01d      	b.n	8003494 <HAL_RCC_OscConfig+0xb0>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003460:	d10c      	bne.n	800347c <HAL_RCC_OscConfig+0x98>
 8003462:	4b70      	ldr	r3, [pc, #448]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a6f      	ldr	r2, [pc, #444]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	4b6d      	ldr	r3, [pc, #436]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a6c      	ldr	r2, [pc, #432]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	e00b      	b.n	8003494 <HAL_RCC_OscConfig+0xb0>
 800347c:	4b69      	ldr	r3, [pc, #420]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a68      	ldr	r2, [pc, #416]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4b66      	ldr	r3, [pc, #408]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a65      	ldr	r2, [pc, #404]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800348e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fe fce4 	bl	8001e68 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a4:	f7fe fce0 	bl	8001e68 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e207      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	4b5b      	ldr	r3, [pc, #364]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0xc0>
 80034c2:	e014      	b.n	80034ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fe fcd0 	bl	8001e68 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034cc:	f7fe fccc 	bl	8001e68 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e1f3      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034de:	4b51      	ldr	r3, [pc, #324]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0xe8>
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d063      	beq.n	80035c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034fa:	4b4a      	ldr	r3, [pc, #296]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003506:	4b47      	ldr	r3, [pc, #284]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800350e:	2b08      	cmp	r3, #8
 8003510:	d11c      	bne.n	800354c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003512:	4b44      	ldr	r3, [pc, #272]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d116      	bne.n	800354c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351e:	4b41      	ldr	r3, [pc, #260]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <HAL_RCC_OscConfig+0x152>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d001      	beq.n	8003536 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e1c7      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003536:	4b3b      	ldr	r3, [pc, #236]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4937      	ldr	r1, [pc, #220]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354a:	e03a      	b.n	80035c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d020      	beq.n	8003596 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003554:	4b34      	ldr	r3, [pc, #208]	; (8003628 <HAL_RCC_OscConfig+0x244>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fe fc85 	bl	8001e68 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003562:	f7fe fc81 	bl	8001e68 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e1a8      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003574:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003580:	4b28      	ldr	r3, [pc, #160]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4925      	ldr	r1, [pc, #148]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003590:	4313      	orrs	r3, r2
 8003592:	600b      	str	r3, [r1, #0]
 8003594:	e015      	b.n	80035c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003596:	4b24      	ldr	r3, [pc, #144]	; (8003628 <HAL_RCC_OscConfig+0x244>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fe fc64 	bl	8001e68 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a4:	f7fe fc60 	bl	8001e68 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e187      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b6:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d036      	beq.n	800363c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d016      	beq.n	8003604 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d6:	4b15      	ldr	r3, [pc, #84]	; (800362c <HAL_RCC_OscConfig+0x248>)
 80035d8:	2201      	movs	r2, #1
 80035da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7fe fc44 	bl	8001e68 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e4:	f7fe fc40 	bl	8001e68 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e167      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80035f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x200>
 8003602:	e01b      	b.n	800363c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_RCC_OscConfig+0x248>)
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360a:	f7fe fc2d 	bl	8001e68 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003610:	e00e      	b.n	8003630 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003612:	f7fe fc29 	bl	8001e68 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d907      	bls.n	8003630 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e150      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
 8003624:	40023800 	.word	0x40023800
 8003628:	42470000 	.word	0x42470000
 800362c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003630:	4b88      	ldr	r3, [pc, #544]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1ea      	bne.n	8003612 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8097 	beq.w	8003778 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364a:	2300      	movs	r3, #0
 800364c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800364e:	4b81      	ldr	r3, [pc, #516]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10f      	bne.n	800367a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	4b7d      	ldr	r3, [pc, #500]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	4a7c      	ldr	r2, [pc, #496]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003668:	6413      	str	r3, [r2, #64]	; 0x40
 800366a:	4b7a      	ldr	r3, [pc, #488]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003676:	2301      	movs	r3, #1
 8003678:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367a:	4b77      	ldr	r3, [pc, #476]	; (8003858 <HAL_RCC_OscConfig+0x474>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d118      	bne.n	80036b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003686:	4b74      	ldr	r3, [pc, #464]	; (8003858 <HAL_RCC_OscConfig+0x474>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a73      	ldr	r2, [pc, #460]	; (8003858 <HAL_RCC_OscConfig+0x474>)
 800368c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003692:	f7fe fbe9 	bl	8001e68 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369a:	f7fe fbe5 	bl	8001e68 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e10c      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ac:	4b6a      	ldr	r3, [pc, #424]	; (8003858 <HAL_RCC_OscConfig+0x474>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d106      	bne.n	80036ce <HAL_RCC_OscConfig+0x2ea>
 80036c0:	4b64      	ldr	r3, [pc, #400]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a63      	ldr	r2, [pc, #396]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
 80036cc:	e01c      	b.n	8003708 <HAL_RCC_OscConfig+0x324>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b05      	cmp	r3, #5
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCC_OscConfig+0x30c>
 80036d6:	4b5f      	ldr	r3, [pc, #380]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	4a5e      	ldr	r2, [pc, #376]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036dc:	f043 0304 	orr.w	r3, r3, #4
 80036e0:	6713      	str	r3, [r2, #112]	; 0x70
 80036e2:	4b5c      	ldr	r3, [pc, #368]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	4a5b      	ldr	r2, [pc, #364]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	6713      	str	r3, [r2, #112]	; 0x70
 80036ee:	e00b      	b.n	8003708 <HAL_RCC_OscConfig+0x324>
 80036f0:	4b58      	ldr	r3, [pc, #352]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	4a57      	ldr	r2, [pc, #348]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036f6:	f023 0301 	bic.w	r3, r3, #1
 80036fa:	6713      	str	r3, [r2, #112]	; 0x70
 80036fc:	4b55      	ldr	r3, [pc, #340]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003700:	4a54      	ldr	r2, [pc, #336]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003702:	f023 0304 	bic.w	r3, r3, #4
 8003706:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d015      	beq.n	800373c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003710:	f7fe fbaa 	bl	8001e68 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003716:	e00a      	b.n	800372e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003718:	f7fe fba6 	bl	8001e68 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f241 3288 	movw	r2, #5000	; 0x1388
 8003726:	4293      	cmp	r3, r2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e0cb      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372e:	4b49      	ldr	r3, [pc, #292]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0ee      	beq.n	8003718 <HAL_RCC_OscConfig+0x334>
 800373a:	e014      	b.n	8003766 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373c:	f7fe fb94 	bl	8001e68 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003742:	e00a      	b.n	800375a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003744:	f7fe fb90 	bl	8001e68 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e0b5      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375a:	4b3e      	ldr	r3, [pc, #248]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1ee      	bne.n	8003744 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003766:	7dfb      	ldrb	r3, [r7, #23]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d105      	bne.n	8003778 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376c:	4b39      	ldr	r3, [pc, #228]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	4a38      	ldr	r2, [pc, #224]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003776:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80a1 	beq.w	80038c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003782:	4b34      	ldr	r3, [pc, #208]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b08      	cmp	r3, #8
 800378c:	d05c      	beq.n	8003848 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d141      	bne.n	800381a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003796:	4b31      	ldr	r3, [pc, #196]	; (800385c <HAL_RCC_OscConfig+0x478>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379c:	f7fe fb64 	bl	8001e68 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a4:	f7fe fb60 	bl	8001e68 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e087      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b6:	4b27      	ldr	r3, [pc, #156]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69da      	ldr	r2, [r3, #28]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	019b      	lsls	r3, r3, #6
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	085b      	lsrs	r3, r3, #1
 80037da:	3b01      	subs	r3, #1
 80037dc:	041b      	lsls	r3, r3, #16
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	061b      	lsls	r3, r3, #24
 80037e6:	491b      	ldr	r1, [pc, #108]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ec:	4b1b      	ldr	r3, [pc, #108]	; (800385c <HAL_RCC_OscConfig+0x478>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f2:	f7fe fb39 	bl	8001e68 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fa:	f7fe fb35 	bl	8001e68 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e05c      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x416>
 8003818:	e054      	b.n	80038c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381a:	4b10      	ldr	r3, [pc, #64]	; (800385c <HAL_RCC_OscConfig+0x478>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fe fb22 	bl	8001e68 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003828:	f7fe fb1e 	bl	8001e68 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e045      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x444>
 8003846:	e03d      	b.n	80038c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d107      	bne.n	8003860 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e038      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
 8003854:	40023800 	.word	0x40023800
 8003858:	40007000 	.word	0x40007000
 800385c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003860:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <HAL_RCC_OscConfig+0x4ec>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d028      	beq.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003878:	429a      	cmp	r2, r3
 800387a:	d121      	bne.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003886:	429a      	cmp	r2, r3
 8003888:	d11a      	bne.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003890:	4013      	ands	r3, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003896:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003898:	4293      	cmp	r3, r2
 800389a:	d111      	bne.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	085b      	lsrs	r3, r3, #1
 80038a8:	3b01      	subs	r3, #1
 80038aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d107      	bne.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40023800 	.word	0x40023800

080038d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0cc      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038e8:	4b68      	ldr	r3, [pc, #416]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d90c      	bls.n	8003910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f6:	4b65      	ldr	r3, [pc, #404]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b63      	ldr	r3, [pc, #396]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0b8      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d020      	beq.n	800395e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003928:	4b59      	ldr	r3, [pc, #356]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4a58      	ldr	r2, [pc, #352]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003940:	4b53      	ldr	r3, [pc, #332]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a52      	ldr	r2, [pc, #328]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800394a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800394c:	4b50      	ldr	r3, [pc, #320]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	494d      	ldr	r1, [pc, #308]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d044      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	4b47      	ldr	r3, [pc, #284]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d119      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e07f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d003      	beq.n	8003992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800398e:	2b03      	cmp	r3, #3
 8003990:	d107      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003992:	4b3f      	ldr	r3, [pc, #252]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e06f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a2:	4b3b      	ldr	r3, [pc, #236]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e067      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b2:	4b37      	ldr	r3, [pc, #220]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f023 0203 	bic.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4934      	ldr	r1, [pc, #208]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c4:	f7fe fa50 	bl	8001e68 <HAL_GetTick>
 80039c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ca:	e00a      	b.n	80039e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039cc:	f7fe fa4c 	bl	8001e68 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039da:	4293      	cmp	r3, r2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e04f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 020c 	and.w	r2, r3, #12
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d1eb      	bne.n	80039cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039f4:	4b25      	ldr	r3, [pc, #148]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d20c      	bcs.n	8003a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e032      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4916      	ldr	r1, [pc, #88]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a46:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	490e      	ldr	r1, [pc, #56]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a5a:	f000 f821 	bl	8003aa0 <HAL_RCC_GetSysClockFreq>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	490a      	ldr	r1, [pc, #40]	; (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 8003a6c:	5ccb      	ldrb	r3, [r1, r3]
 8003a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a72:	4a09      	ldr	r2, [pc, #36]	; (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fe f9b0 	bl	8001de0 <HAL_InitTick>

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023c00 	.word	0x40023c00
 8003a90:	40023800 	.word	0x40023800
 8003a94:	08005970 	.word	0x08005970
 8003a98:	20000000 	.word	0x20000000
 8003a9c:	20000004 	.word	0x20000004

08003aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa4:	b090      	sub	sp, #64	; 0x40
 8003aa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8003aac:	2300      	movs	r3, #0
 8003aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ab8:	4b59      	ldr	r3, [pc, #356]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 030c 	and.w	r3, r3, #12
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	f200 80a1 	bhi.w	8003c0c <HAL_RCC_GetSysClockFreq+0x16c>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d003      	beq.n	8003ada <HAL_RCC_GetSysClockFreq+0x3a>
 8003ad2:	e09b      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ad4:	4b53      	ldr	r3, [pc, #332]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ad6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003ad8:	e09b      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ada:	4b53      	ldr	r3, [pc, #332]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x188>)
 8003adc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ade:	e098      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ae0:	4b4f      	ldr	r3, [pc, #316]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aea:	4b4d      	ldr	r3, [pc, #308]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d028      	beq.n	8003b48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af6:	4b4a      	ldr	r3, [pc, #296]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	099b      	lsrs	r3, r3, #6
 8003afc:	2200      	movs	r2, #0
 8003afe:	623b      	str	r3, [r7, #32]
 8003b00:	627a      	str	r2, [r7, #36]	; 0x24
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4b47      	ldr	r3, [pc, #284]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b0c:	fb03 f201 	mul.w	r2, r3, r1
 8003b10:	2300      	movs	r3, #0
 8003b12:	fb00 f303 	mul.w	r3, r0, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	4a43      	ldr	r2, [pc, #268]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b1a:	fba0 1202 	umull	r1, r2, r0, r2
 8003b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b20:	460a      	mov	r2, r1
 8003b22:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b26:	4413      	add	r3, r2
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	61bb      	str	r3, [r7, #24]
 8003b30:	61fa      	str	r2, [r7, #28]
 8003b32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b3a:	f7fd f85d 	bl	8000bf8 <__aeabi_uldivmod>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4613      	mov	r3, r2
 8003b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b46:	e053      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b48:	4b35      	ldr	r3, [pc, #212]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	099b      	lsrs	r3, r3, #6
 8003b4e:	2200      	movs	r2, #0
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	617a      	str	r2, [r7, #20]
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b5a:	f04f 0b00 	mov.w	fp, #0
 8003b5e:	4652      	mov	r2, sl
 8003b60:	465b      	mov	r3, fp
 8003b62:	f04f 0000 	mov.w	r0, #0
 8003b66:	f04f 0100 	mov.w	r1, #0
 8003b6a:	0159      	lsls	r1, r3, #5
 8003b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b70:	0150      	lsls	r0, r2, #5
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	ebb2 080a 	subs.w	r8, r2, sl
 8003b7a:	eb63 090b 	sbc.w	r9, r3, fp
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b92:	ebb2 0408 	subs.w	r4, r2, r8
 8003b96:	eb63 0509 	sbc.w	r5, r3, r9
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	00eb      	lsls	r3, r5, #3
 8003ba4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ba8:	00e2      	lsls	r2, r4, #3
 8003baa:	4614      	mov	r4, r2
 8003bac:	461d      	mov	r5, r3
 8003bae:	eb14 030a 	adds.w	r3, r4, sl
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	eb45 030b 	adc.w	r3, r5, fp
 8003bb8:	607b      	str	r3, [r7, #4]
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	028b      	lsls	r3, r1, #10
 8003bca:	4621      	mov	r1, r4
 8003bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	028a      	lsls	r2, r1, #10
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bda:	2200      	movs	r2, #0
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	60fa      	str	r2, [r7, #12]
 8003be0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003be4:	f7fd f808 	bl	8000bf8 <__aeabi_uldivmod>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4613      	mov	r3, r2
 8003bee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	0c1b      	lsrs	r3, r3, #16
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c0a:	e002      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3740      	adds	r7, #64	; 0x40
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c1e:	bf00      	nop
 8003c20:	40023800 	.word	0x40023800
 8003c24:	00f42400 	.word	0x00f42400
 8003c28:	017d7840 	.word	0x017d7840

08003c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c30:	4b03      	ldr	r3, [pc, #12]	; (8003c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c32:	681b      	ldr	r3, [r3, #0]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000000 	.word	0x20000000

08003c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c48:	f7ff fff0 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	0a9b      	lsrs	r3, r3, #10
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	4903      	ldr	r1, [pc, #12]	; (8003c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c5a:	5ccb      	ldrb	r3, [r1, r3]
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40023800 	.word	0x40023800
 8003c68:	08005980 	.word	0x08005980

08003c6c <std>:
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	b510      	push	{r4, lr}
 8003c70:	4604      	mov	r4, r0
 8003c72:	e9c0 3300 	strd	r3, r3, [r0]
 8003c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c7a:	6083      	str	r3, [r0, #8]
 8003c7c:	8181      	strh	r1, [r0, #12]
 8003c7e:	6643      	str	r3, [r0, #100]	; 0x64
 8003c80:	81c2      	strh	r2, [r0, #14]
 8003c82:	6183      	str	r3, [r0, #24]
 8003c84:	4619      	mov	r1, r3
 8003c86:	2208      	movs	r2, #8
 8003c88:	305c      	adds	r0, #92	; 0x5c
 8003c8a:	f000 f906 	bl	8003e9a <memset>
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <std+0x58>)
 8003c90:	6263      	str	r3, [r4, #36]	; 0x24
 8003c92:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <std+0x5c>)
 8003c94:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c96:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <std+0x60>)
 8003c98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <std+0x64>)
 8003c9c:	6323      	str	r3, [r4, #48]	; 0x30
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <std+0x68>)
 8003ca0:	6224      	str	r4, [r4, #32]
 8003ca2:	429c      	cmp	r4, r3
 8003ca4:	d006      	beq.n	8003cb4 <std+0x48>
 8003ca6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003caa:	4294      	cmp	r4, r2
 8003cac:	d002      	beq.n	8003cb4 <std+0x48>
 8003cae:	33d0      	adds	r3, #208	; 0xd0
 8003cb0:	429c      	cmp	r4, r3
 8003cb2:	d105      	bne.n	8003cc0 <std+0x54>
 8003cb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cbc:	f000 b966 	b.w	8003f8c <__retarget_lock_init_recursive>
 8003cc0:	bd10      	pop	{r4, pc}
 8003cc2:	bf00      	nop
 8003cc4:	08003e15 	.word	0x08003e15
 8003cc8:	08003e37 	.word	0x08003e37
 8003ccc:	08003e6f 	.word	0x08003e6f
 8003cd0:	08003e93 	.word	0x08003e93
 8003cd4:	200026ec 	.word	0x200026ec

08003cd8 <stdio_exit_handler>:
 8003cd8:	4a02      	ldr	r2, [pc, #8]	; (8003ce4 <stdio_exit_handler+0xc>)
 8003cda:	4903      	ldr	r1, [pc, #12]	; (8003ce8 <stdio_exit_handler+0x10>)
 8003cdc:	4803      	ldr	r0, [pc, #12]	; (8003cec <stdio_exit_handler+0x14>)
 8003cde:	f000 b869 	b.w	8003db4 <_fwalk_sglue>
 8003ce2:	bf00      	nop
 8003ce4:	2000000c 	.word	0x2000000c
 8003ce8:	08004839 	.word	0x08004839
 8003cec:	20000018 	.word	0x20000018

08003cf0 <cleanup_stdio>:
 8003cf0:	6841      	ldr	r1, [r0, #4]
 8003cf2:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <cleanup_stdio+0x34>)
 8003cf4:	4299      	cmp	r1, r3
 8003cf6:	b510      	push	{r4, lr}
 8003cf8:	4604      	mov	r4, r0
 8003cfa:	d001      	beq.n	8003d00 <cleanup_stdio+0x10>
 8003cfc:	f000 fd9c 	bl	8004838 <_fflush_r>
 8003d00:	68a1      	ldr	r1, [r4, #8]
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <cleanup_stdio+0x38>)
 8003d04:	4299      	cmp	r1, r3
 8003d06:	d002      	beq.n	8003d0e <cleanup_stdio+0x1e>
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f000 fd95 	bl	8004838 <_fflush_r>
 8003d0e:	68e1      	ldr	r1, [r4, #12]
 8003d10:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <cleanup_stdio+0x3c>)
 8003d12:	4299      	cmp	r1, r3
 8003d14:	d004      	beq.n	8003d20 <cleanup_stdio+0x30>
 8003d16:	4620      	mov	r0, r4
 8003d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d1c:	f000 bd8c 	b.w	8004838 <_fflush_r>
 8003d20:	bd10      	pop	{r4, pc}
 8003d22:	bf00      	nop
 8003d24:	200026ec 	.word	0x200026ec
 8003d28:	20002754 	.word	0x20002754
 8003d2c:	200027bc 	.word	0x200027bc

08003d30 <global_stdio_init.part.0>:
 8003d30:	b510      	push	{r4, lr}
 8003d32:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <global_stdio_init.part.0+0x30>)
 8003d34:	4c0b      	ldr	r4, [pc, #44]	; (8003d64 <global_stdio_init.part.0+0x34>)
 8003d36:	4a0c      	ldr	r2, [pc, #48]	; (8003d68 <global_stdio_init.part.0+0x38>)
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2104      	movs	r1, #4
 8003d40:	f7ff ff94 	bl	8003c6c <std>
 8003d44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003d48:	2201      	movs	r2, #1
 8003d4a:	2109      	movs	r1, #9
 8003d4c:	f7ff ff8e 	bl	8003c6c <std>
 8003d50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d54:	2202      	movs	r2, #2
 8003d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d5a:	2112      	movs	r1, #18
 8003d5c:	f7ff bf86 	b.w	8003c6c <std>
 8003d60:	20002824 	.word	0x20002824
 8003d64:	200026ec 	.word	0x200026ec
 8003d68:	08003cd9 	.word	0x08003cd9

08003d6c <__sfp_lock_acquire>:
 8003d6c:	4801      	ldr	r0, [pc, #4]	; (8003d74 <__sfp_lock_acquire+0x8>)
 8003d6e:	f000 b90e 	b.w	8003f8e <__retarget_lock_acquire_recursive>
 8003d72:	bf00      	nop
 8003d74:	2000282d 	.word	0x2000282d

08003d78 <__sfp_lock_release>:
 8003d78:	4801      	ldr	r0, [pc, #4]	; (8003d80 <__sfp_lock_release+0x8>)
 8003d7a:	f000 b909 	b.w	8003f90 <__retarget_lock_release_recursive>
 8003d7e:	bf00      	nop
 8003d80:	2000282d 	.word	0x2000282d

08003d84 <__sinit>:
 8003d84:	b510      	push	{r4, lr}
 8003d86:	4604      	mov	r4, r0
 8003d88:	f7ff fff0 	bl	8003d6c <__sfp_lock_acquire>
 8003d8c:	6a23      	ldr	r3, [r4, #32]
 8003d8e:	b11b      	cbz	r3, 8003d98 <__sinit+0x14>
 8003d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d94:	f7ff bff0 	b.w	8003d78 <__sfp_lock_release>
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <__sinit+0x28>)
 8003d9a:	6223      	str	r3, [r4, #32]
 8003d9c:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <__sinit+0x2c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f5      	bne.n	8003d90 <__sinit+0xc>
 8003da4:	f7ff ffc4 	bl	8003d30 <global_stdio_init.part.0>
 8003da8:	e7f2      	b.n	8003d90 <__sinit+0xc>
 8003daa:	bf00      	nop
 8003dac:	08003cf1 	.word	0x08003cf1
 8003db0:	20002824 	.word	0x20002824

08003db4 <_fwalk_sglue>:
 8003db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003db8:	4607      	mov	r7, r0
 8003dba:	4688      	mov	r8, r1
 8003dbc:	4614      	mov	r4, r2
 8003dbe:	2600      	movs	r6, #0
 8003dc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003dc4:	f1b9 0901 	subs.w	r9, r9, #1
 8003dc8:	d505      	bpl.n	8003dd6 <_fwalk_sglue+0x22>
 8003dca:	6824      	ldr	r4, [r4, #0]
 8003dcc:	2c00      	cmp	r4, #0
 8003dce:	d1f7      	bne.n	8003dc0 <_fwalk_sglue+0xc>
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dd6:	89ab      	ldrh	r3, [r5, #12]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d907      	bls.n	8003dec <_fwalk_sglue+0x38>
 8003ddc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003de0:	3301      	adds	r3, #1
 8003de2:	d003      	beq.n	8003dec <_fwalk_sglue+0x38>
 8003de4:	4629      	mov	r1, r5
 8003de6:	4638      	mov	r0, r7
 8003de8:	47c0      	blx	r8
 8003dea:	4306      	orrs	r6, r0
 8003dec:	3568      	adds	r5, #104	; 0x68
 8003dee:	e7e9      	b.n	8003dc4 <_fwalk_sglue+0x10>

08003df0 <iprintf>:
 8003df0:	b40f      	push	{r0, r1, r2, r3}
 8003df2:	b507      	push	{r0, r1, r2, lr}
 8003df4:	4906      	ldr	r1, [pc, #24]	; (8003e10 <iprintf+0x20>)
 8003df6:	ab04      	add	r3, sp, #16
 8003df8:	6808      	ldr	r0, [r1, #0]
 8003dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dfe:	6881      	ldr	r1, [r0, #8]
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	f000 f9e9 	bl	80041d8 <_vfiprintf_r>
 8003e06:	b003      	add	sp, #12
 8003e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e0c:	b004      	add	sp, #16
 8003e0e:	4770      	bx	lr
 8003e10:	20000064 	.word	0x20000064

08003e14 <__sread>:
 8003e14:	b510      	push	{r4, lr}
 8003e16:	460c      	mov	r4, r1
 8003e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e1c:	f000 f868 	bl	8003ef0 <_read_r>
 8003e20:	2800      	cmp	r0, #0
 8003e22:	bfab      	itete	ge
 8003e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e26:	89a3      	ldrhlt	r3, [r4, #12]
 8003e28:	181b      	addge	r3, r3, r0
 8003e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e2e:	bfac      	ite	ge
 8003e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e32:	81a3      	strhlt	r3, [r4, #12]
 8003e34:	bd10      	pop	{r4, pc}

08003e36 <__swrite>:
 8003e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3a:	461f      	mov	r7, r3
 8003e3c:	898b      	ldrh	r3, [r1, #12]
 8003e3e:	05db      	lsls	r3, r3, #23
 8003e40:	4605      	mov	r5, r0
 8003e42:	460c      	mov	r4, r1
 8003e44:	4616      	mov	r6, r2
 8003e46:	d505      	bpl.n	8003e54 <__swrite+0x1e>
 8003e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f000 f83c 	bl	8003ecc <_lseek_r>
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e5e:	81a3      	strh	r3, [r4, #12]
 8003e60:	4632      	mov	r2, r6
 8003e62:	463b      	mov	r3, r7
 8003e64:	4628      	mov	r0, r5
 8003e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e6a:	f000 b853 	b.w	8003f14 <_write_r>

08003e6e <__sseek>:
 8003e6e:	b510      	push	{r4, lr}
 8003e70:	460c      	mov	r4, r1
 8003e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e76:	f000 f829 	bl	8003ecc <_lseek_r>
 8003e7a:	1c43      	adds	r3, r0, #1
 8003e7c:	89a3      	ldrh	r3, [r4, #12]
 8003e7e:	bf15      	itete	ne
 8003e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e8a:	81a3      	strheq	r3, [r4, #12]
 8003e8c:	bf18      	it	ne
 8003e8e:	81a3      	strhne	r3, [r4, #12]
 8003e90:	bd10      	pop	{r4, pc}

08003e92 <__sclose>:
 8003e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e96:	f000 b809 	b.w	8003eac <_close_r>

08003e9a <memset>:
 8003e9a:	4402      	add	r2, r0
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d100      	bne.n	8003ea4 <memset+0xa>
 8003ea2:	4770      	bx	lr
 8003ea4:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea8:	e7f9      	b.n	8003e9e <memset+0x4>
	...

08003eac <_close_r>:
 8003eac:	b538      	push	{r3, r4, r5, lr}
 8003eae:	4d06      	ldr	r5, [pc, #24]	; (8003ec8 <_close_r+0x1c>)
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	602b      	str	r3, [r5, #0]
 8003eb8:	f7fd fec9 	bl	8001c4e <_close>
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	d102      	bne.n	8003ec6 <_close_r+0x1a>
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	b103      	cbz	r3, 8003ec6 <_close_r+0x1a>
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	bd38      	pop	{r3, r4, r5, pc}
 8003ec8:	20002828 	.word	0x20002828

08003ecc <_lseek_r>:
 8003ecc:	b538      	push	{r3, r4, r5, lr}
 8003ece:	4d07      	ldr	r5, [pc, #28]	; (8003eec <_lseek_r+0x20>)
 8003ed0:	4604      	mov	r4, r0
 8003ed2:	4608      	mov	r0, r1
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	602a      	str	r2, [r5, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	f7fd fede 	bl	8001c9c <_lseek>
 8003ee0:	1c43      	adds	r3, r0, #1
 8003ee2:	d102      	bne.n	8003eea <_lseek_r+0x1e>
 8003ee4:	682b      	ldr	r3, [r5, #0]
 8003ee6:	b103      	cbz	r3, 8003eea <_lseek_r+0x1e>
 8003ee8:	6023      	str	r3, [r4, #0]
 8003eea:	bd38      	pop	{r3, r4, r5, pc}
 8003eec:	20002828 	.word	0x20002828

08003ef0 <_read_r>:
 8003ef0:	b538      	push	{r3, r4, r5, lr}
 8003ef2:	4d07      	ldr	r5, [pc, #28]	; (8003f10 <_read_r+0x20>)
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	4608      	mov	r0, r1
 8003ef8:	4611      	mov	r1, r2
 8003efa:	2200      	movs	r2, #0
 8003efc:	602a      	str	r2, [r5, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	f7fd fe6c 	bl	8001bdc <_read>
 8003f04:	1c43      	adds	r3, r0, #1
 8003f06:	d102      	bne.n	8003f0e <_read_r+0x1e>
 8003f08:	682b      	ldr	r3, [r5, #0]
 8003f0a:	b103      	cbz	r3, 8003f0e <_read_r+0x1e>
 8003f0c:	6023      	str	r3, [r4, #0]
 8003f0e:	bd38      	pop	{r3, r4, r5, pc}
 8003f10:	20002828 	.word	0x20002828

08003f14 <_write_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	4d07      	ldr	r5, [pc, #28]	; (8003f34 <_write_r+0x20>)
 8003f18:	4604      	mov	r4, r0
 8003f1a:	4608      	mov	r0, r1
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	2200      	movs	r2, #0
 8003f20:	602a      	str	r2, [r5, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	f7fd fe77 	bl	8001c16 <_write>
 8003f28:	1c43      	adds	r3, r0, #1
 8003f2a:	d102      	bne.n	8003f32 <_write_r+0x1e>
 8003f2c:	682b      	ldr	r3, [r5, #0]
 8003f2e:	b103      	cbz	r3, 8003f32 <_write_r+0x1e>
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	bd38      	pop	{r3, r4, r5, pc}
 8003f34:	20002828 	.word	0x20002828

08003f38 <__errno>:
 8003f38:	4b01      	ldr	r3, [pc, #4]	; (8003f40 <__errno+0x8>)
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	20000064 	.word	0x20000064

08003f44 <__libc_init_array>:
 8003f44:	b570      	push	{r4, r5, r6, lr}
 8003f46:	4d0d      	ldr	r5, [pc, #52]	; (8003f7c <__libc_init_array+0x38>)
 8003f48:	4c0d      	ldr	r4, [pc, #52]	; (8003f80 <__libc_init_array+0x3c>)
 8003f4a:	1b64      	subs	r4, r4, r5
 8003f4c:	10a4      	asrs	r4, r4, #2
 8003f4e:	2600      	movs	r6, #0
 8003f50:	42a6      	cmp	r6, r4
 8003f52:	d109      	bne.n	8003f68 <__libc_init_array+0x24>
 8003f54:	4d0b      	ldr	r5, [pc, #44]	; (8003f84 <__libc_init_array+0x40>)
 8003f56:	4c0c      	ldr	r4, [pc, #48]	; (8003f88 <__libc_init_array+0x44>)
 8003f58:	f001 fcfa 	bl	8005950 <_init>
 8003f5c:	1b64      	subs	r4, r4, r5
 8003f5e:	10a4      	asrs	r4, r4, #2
 8003f60:	2600      	movs	r6, #0
 8003f62:	42a6      	cmp	r6, r4
 8003f64:	d105      	bne.n	8003f72 <__libc_init_array+0x2e>
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
 8003f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f6c:	4798      	blx	r3
 8003f6e:	3601      	adds	r6, #1
 8003f70:	e7ee      	b.n	8003f50 <__libc_init_array+0xc>
 8003f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f76:	4798      	blx	r3
 8003f78:	3601      	adds	r6, #1
 8003f7a:	e7f2      	b.n	8003f62 <__libc_init_array+0x1e>
 8003f7c:	080059f8 	.word	0x080059f8
 8003f80:	080059f8 	.word	0x080059f8
 8003f84:	080059f8 	.word	0x080059f8
 8003f88:	080059fc 	.word	0x080059fc

08003f8c <__retarget_lock_init_recursive>:
 8003f8c:	4770      	bx	lr

08003f8e <__retarget_lock_acquire_recursive>:
 8003f8e:	4770      	bx	lr

08003f90 <__retarget_lock_release_recursive>:
 8003f90:	4770      	bx	lr
	...

08003f94 <_free_r>:
 8003f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f96:	2900      	cmp	r1, #0
 8003f98:	d044      	beq.n	8004024 <_free_r+0x90>
 8003f9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f9e:	9001      	str	r0, [sp, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f1a1 0404 	sub.w	r4, r1, #4
 8003fa6:	bfb8      	it	lt
 8003fa8:	18e4      	addlt	r4, r4, r3
 8003faa:	f000 f8df 	bl	800416c <__malloc_lock>
 8003fae:	4a1e      	ldr	r2, [pc, #120]	; (8004028 <_free_r+0x94>)
 8003fb0:	9801      	ldr	r0, [sp, #4]
 8003fb2:	6813      	ldr	r3, [r2, #0]
 8003fb4:	b933      	cbnz	r3, 8003fc4 <_free_r+0x30>
 8003fb6:	6063      	str	r3, [r4, #4]
 8003fb8:	6014      	str	r4, [r2, #0]
 8003fba:	b003      	add	sp, #12
 8003fbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fc0:	f000 b8da 	b.w	8004178 <__malloc_unlock>
 8003fc4:	42a3      	cmp	r3, r4
 8003fc6:	d908      	bls.n	8003fda <_free_r+0x46>
 8003fc8:	6825      	ldr	r5, [r4, #0]
 8003fca:	1961      	adds	r1, r4, r5
 8003fcc:	428b      	cmp	r3, r1
 8003fce:	bf01      	itttt	eq
 8003fd0:	6819      	ldreq	r1, [r3, #0]
 8003fd2:	685b      	ldreq	r3, [r3, #4]
 8003fd4:	1949      	addeq	r1, r1, r5
 8003fd6:	6021      	streq	r1, [r4, #0]
 8003fd8:	e7ed      	b.n	8003fb6 <_free_r+0x22>
 8003fda:	461a      	mov	r2, r3
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	b10b      	cbz	r3, 8003fe4 <_free_r+0x50>
 8003fe0:	42a3      	cmp	r3, r4
 8003fe2:	d9fa      	bls.n	8003fda <_free_r+0x46>
 8003fe4:	6811      	ldr	r1, [r2, #0]
 8003fe6:	1855      	adds	r5, r2, r1
 8003fe8:	42a5      	cmp	r5, r4
 8003fea:	d10b      	bne.n	8004004 <_free_r+0x70>
 8003fec:	6824      	ldr	r4, [r4, #0]
 8003fee:	4421      	add	r1, r4
 8003ff0:	1854      	adds	r4, r2, r1
 8003ff2:	42a3      	cmp	r3, r4
 8003ff4:	6011      	str	r1, [r2, #0]
 8003ff6:	d1e0      	bne.n	8003fba <_free_r+0x26>
 8003ff8:	681c      	ldr	r4, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	6053      	str	r3, [r2, #4]
 8003ffe:	440c      	add	r4, r1
 8004000:	6014      	str	r4, [r2, #0]
 8004002:	e7da      	b.n	8003fba <_free_r+0x26>
 8004004:	d902      	bls.n	800400c <_free_r+0x78>
 8004006:	230c      	movs	r3, #12
 8004008:	6003      	str	r3, [r0, #0]
 800400a:	e7d6      	b.n	8003fba <_free_r+0x26>
 800400c:	6825      	ldr	r5, [r4, #0]
 800400e:	1961      	adds	r1, r4, r5
 8004010:	428b      	cmp	r3, r1
 8004012:	bf04      	itt	eq
 8004014:	6819      	ldreq	r1, [r3, #0]
 8004016:	685b      	ldreq	r3, [r3, #4]
 8004018:	6063      	str	r3, [r4, #4]
 800401a:	bf04      	itt	eq
 800401c:	1949      	addeq	r1, r1, r5
 800401e:	6021      	streq	r1, [r4, #0]
 8004020:	6054      	str	r4, [r2, #4]
 8004022:	e7ca      	b.n	8003fba <_free_r+0x26>
 8004024:	b003      	add	sp, #12
 8004026:	bd30      	pop	{r4, r5, pc}
 8004028:	20002830 	.word	0x20002830

0800402c <sbrk_aligned>:
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	4e0e      	ldr	r6, [pc, #56]	; (8004068 <sbrk_aligned+0x3c>)
 8004030:	460c      	mov	r4, r1
 8004032:	6831      	ldr	r1, [r6, #0]
 8004034:	4605      	mov	r5, r0
 8004036:	b911      	cbnz	r1, 800403e <sbrk_aligned+0x12>
 8004038:	f000 fcbc 	bl	80049b4 <_sbrk_r>
 800403c:	6030      	str	r0, [r6, #0]
 800403e:	4621      	mov	r1, r4
 8004040:	4628      	mov	r0, r5
 8004042:	f000 fcb7 	bl	80049b4 <_sbrk_r>
 8004046:	1c43      	adds	r3, r0, #1
 8004048:	d00a      	beq.n	8004060 <sbrk_aligned+0x34>
 800404a:	1cc4      	adds	r4, r0, #3
 800404c:	f024 0403 	bic.w	r4, r4, #3
 8004050:	42a0      	cmp	r0, r4
 8004052:	d007      	beq.n	8004064 <sbrk_aligned+0x38>
 8004054:	1a21      	subs	r1, r4, r0
 8004056:	4628      	mov	r0, r5
 8004058:	f000 fcac 	bl	80049b4 <_sbrk_r>
 800405c:	3001      	adds	r0, #1
 800405e:	d101      	bne.n	8004064 <sbrk_aligned+0x38>
 8004060:	f04f 34ff 	mov.w	r4, #4294967295
 8004064:	4620      	mov	r0, r4
 8004066:	bd70      	pop	{r4, r5, r6, pc}
 8004068:	20002834 	.word	0x20002834

0800406c <_malloc_r>:
 800406c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004070:	1ccd      	adds	r5, r1, #3
 8004072:	f025 0503 	bic.w	r5, r5, #3
 8004076:	3508      	adds	r5, #8
 8004078:	2d0c      	cmp	r5, #12
 800407a:	bf38      	it	cc
 800407c:	250c      	movcc	r5, #12
 800407e:	2d00      	cmp	r5, #0
 8004080:	4607      	mov	r7, r0
 8004082:	db01      	blt.n	8004088 <_malloc_r+0x1c>
 8004084:	42a9      	cmp	r1, r5
 8004086:	d905      	bls.n	8004094 <_malloc_r+0x28>
 8004088:	230c      	movs	r3, #12
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	2600      	movs	r6, #0
 800408e:	4630      	mov	r0, r6
 8004090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004094:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004168 <_malloc_r+0xfc>
 8004098:	f000 f868 	bl	800416c <__malloc_lock>
 800409c:	f8d8 3000 	ldr.w	r3, [r8]
 80040a0:	461c      	mov	r4, r3
 80040a2:	bb5c      	cbnz	r4, 80040fc <_malloc_r+0x90>
 80040a4:	4629      	mov	r1, r5
 80040a6:	4638      	mov	r0, r7
 80040a8:	f7ff ffc0 	bl	800402c <sbrk_aligned>
 80040ac:	1c43      	adds	r3, r0, #1
 80040ae:	4604      	mov	r4, r0
 80040b0:	d155      	bne.n	800415e <_malloc_r+0xf2>
 80040b2:	f8d8 4000 	ldr.w	r4, [r8]
 80040b6:	4626      	mov	r6, r4
 80040b8:	2e00      	cmp	r6, #0
 80040ba:	d145      	bne.n	8004148 <_malloc_r+0xdc>
 80040bc:	2c00      	cmp	r4, #0
 80040be:	d048      	beq.n	8004152 <_malloc_r+0xe6>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	4631      	mov	r1, r6
 80040c4:	4638      	mov	r0, r7
 80040c6:	eb04 0903 	add.w	r9, r4, r3
 80040ca:	f000 fc73 	bl	80049b4 <_sbrk_r>
 80040ce:	4581      	cmp	r9, r0
 80040d0:	d13f      	bne.n	8004152 <_malloc_r+0xe6>
 80040d2:	6821      	ldr	r1, [r4, #0]
 80040d4:	1a6d      	subs	r5, r5, r1
 80040d6:	4629      	mov	r1, r5
 80040d8:	4638      	mov	r0, r7
 80040da:	f7ff ffa7 	bl	800402c <sbrk_aligned>
 80040de:	3001      	adds	r0, #1
 80040e0:	d037      	beq.n	8004152 <_malloc_r+0xe6>
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	442b      	add	r3, r5
 80040e6:	6023      	str	r3, [r4, #0]
 80040e8:	f8d8 3000 	ldr.w	r3, [r8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d038      	beq.n	8004162 <_malloc_r+0xf6>
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	42a2      	cmp	r2, r4
 80040f4:	d12b      	bne.n	800414e <_malloc_r+0xe2>
 80040f6:	2200      	movs	r2, #0
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	e00f      	b.n	800411c <_malloc_r+0xb0>
 80040fc:	6822      	ldr	r2, [r4, #0]
 80040fe:	1b52      	subs	r2, r2, r5
 8004100:	d41f      	bmi.n	8004142 <_malloc_r+0xd6>
 8004102:	2a0b      	cmp	r2, #11
 8004104:	d917      	bls.n	8004136 <_malloc_r+0xca>
 8004106:	1961      	adds	r1, r4, r5
 8004108:	42a3      	cmp	r3, r4
 800410a:	6025      	str	r5, [r4, #0]
 800410c:	bf18      	it	ne
 800410e:	6059      	strne	r1, [r3, #4]
 8004110:	6863      	ldr	r3, [r4, #4]
 8004112:	bf08      	it	eq
 8004114:	f8c8 1000 	streq.w	r1, [r8]
 8004118:	5162      	str	r2, [r4, r5]
 800411a:	604b      	str	r3, [r1, #4]
 800411c:	4638      	mov	r0, r7
 800411e:	f104 060b 	add.w	r6, r4, #11
 8004122:	f000 f829 	bl	8004178 <__malloc_unlock>
 8004126:	f026 0607 	bic.w	r6, r6, #7
 800412a:	1d23      	adds	r3, r4, #4
 800412c:	1af2      	subs	r2, r6, r3
 800412e:	d0ae      	beq.n	800408e <_malloc_r+0x22>
 8004130:	1b9b      	subs	r3, r3, r6
 8004132:	50a3      	str	r3, [r4, r2]
 8004134:	e7ab      	b.n	800408e <_malloc_r+0x22>
 8004136:	42a3      	cmp	r3, r4
 8004138:	6862      	ldr	r2, [r4, #4]
 800413a:	d1dd      	bne.n	80040f8 <_malloc_r+0x8c>
 800413c:	f8c8 2000 	str.w	r2, [r8]
 8004140:	e7ec      	b.n	800411c <_malloc_r+0xb0>
 8004142:	4623      	mov	r3, r4
 8004144:	6864      	ldr	r4, [r4, #4]
 8004146:	e7ac      	b.n	80040a2 <_malloc_r+0x36>
 8004148:	4634      	mov	r4, r6
 800414a:	6876      	ldr	r6, [r6, #4]
 800414c:	e7b4      	b.n	80040b8 <_malloc_r+0x4c>
 800414e:	4613      	mov	r3, r2
 8004150:	e7cc      	b.n	80040ec <_malloc_r+0x80>
 8004152:	230c      	movs	r3, #12
 8004154:	603b      	str	r3, [r7, #0]
 8004156:	4638      	mov	r0, r7
 8004158:	f000 f80e 	bl	8004178 <__malloc_unlock>
 800415c:	e797      	b.n	800408e <_malloc_r+0x22>
 800415e:	6025      	str	r5, [r4, #0]
 8004160:	e7dc      	b.n	800411c <_malloc_r+0xb0>
 8004162:	605b      	str	r3, [r3, #4]
 8004164:	deff      	udf	#255	; 0xff
 8004166:	bf00      	nop
 8004168:	20002830 	.word	0x20002830

0800416c <__malloc_lock>:
 800416c:	4801      	ldr	r0, [pc, #4]	; (8004174 <__malloc_lock+0x8>)
 800416e:	f7ff bf0e 	b.w	8003f8e <__retarget_lock_acquire_recursive>
 8004172:	bf00      	nop
 8004174:	2000282c 	.word	0x2000282c

08004178 <__malloc_unlock>:
 8004178:	4801      	ldr	r0, [pc, #4]	; (8004180 <__malloc_unlock+0x8>)
 800417a:	f7ff bf09 	b.w	8003f90 <__retarget_lock_release_recursive>
 800417e:	bf00      	nop
 8004180:	2000282c 	.word	0x2000282c

08004184 <__sfputc_r>:
 8004184:	6893      	ldr	r3, [r2, #8]
 8004186:	3b01      	subs	r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	b410      	push	{r4}
 800418c:	6093      	str	r3, [r2, #8]
 800418e:	da08      	bge.n	80041a2 <__sfputc_r+0x1e>
 8004190:	6994      	ldr	r4, [r2, #24]
 8004192:	42a3      	cmp	r3, r4
 8004194:	db01      	blt.n	800419a <__sfputc_r+0x16>
 8004196:	290a      	cmp	r1, #10
 8004198:	d103      	bne.n	80041a2 <__sfputc_r+0x1e>
 800419a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800419e:	f000 bb73 	b.w	8004888 <__swbuf_r>
 80041a2:	6813      	ldr	r3, [r2, #0]
 80041a4:	1c58      	adds	r0, r3, #1
 80041a6:	6010      	str	r0, [r2, #0]
 80041a8:	7019      	strb	r1, [r3, #0]
 80041aa:	4608      	mov	r0, r1
 80041ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <__sfputs_r>:
 80041b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b4:	4606      	mov	r6, r0
 80041b6:	460f      	mov	r7, r1
 80041b8:	4614      	mov	r4, r2
 80041ba:	18d5      	adds	r5, r2, r3
 80041bc:	42ac      	cmp	r4, r5
 80041be:	d101      	bne.n	80041c4 <__sfputs_r+0x12>
 80041c0:	2000      	movs	r0, #0
 80041c2:	e007      	b.n	80041d4 <__sfputs_r+0x22>
 80041c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041c8:	463a      	mov	r2, r7
 80041ca:	4630      	mov	r0, r6
 80041cc:	f7ff ffda 	bl	8004184 <__sfputc_r>
 80041d0:	1c43      	adds	r3, r0, #1
 80041d2:	d1f3      	bne.n	80041bc <__sfputs_r+0xa>
 80041d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041d8 <_vfiprintf_r>:
 80041d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041dc:	460d      	mov	r5, r1
 80041de:	b09d      	sub	sp, #116	; 0x74
 80041e0:	4614      	mov	r4, r2
 80041e2:	4698      	mov	r8, r3
 80041e4:	4606      	mov	r6, r0
 80041e6:	b118      	cbz	r0, 80041f0 <_vfiprintf_r+0x18>
 80041e8:	6a03      	ldr	r3, [r0, #32]
 80041ea:	b90b      	cbnz	r3, 80041f0 <_vfiprintf_r+0x18>
 80041ec:	f7ff fdca 	bl	8003d84 <__sinit>
 80041f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041f2:	07d9      	lsls	r1, r3, #31
 80041f4:	d405      	bmi.n	8004202 <_vfiprintf_r+0x2a>
 80041f6:	89ab      	ldrh	r3, [r5, #12]
 80041f8:	059a      	lsls	r2, r3, #22
 80041fa:	d402      	bmi.n	8004202 <_vfiprintf_r+0x2a>
 80041fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041fe:	f7ff fec6 	bl	8003f8e <__retarget_lock_acquire_recursive>
 8004202:	89ab      	ldrh	r3, [r5, #12]
 8004204:	071b      	lsls	r3, r3, #28
 8004206:	d501      	bpl.n	800420c <_vfiprintf_r+0x34>
 8004208:	692b      	ldr	r3, [r5, #16]
 800420a:	b99b      	cbnz	r3, 8004234 <_vfiprintf_r+0x5c>
 800420c:	4629      	mov	r1, r5
 800420e:	4630      	mov	r0, r6
 8004210:	f000 fb78 	bl	8004904 <__swsetup_r>
 8004214:	b170      	cbz	r0, 8004234 <_vfiprintf_r+0x5c>
 8004216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004218:	07dc      	lsls	r4, r3, #31
 800421a:	d504      	bpl.n	8004226 <_vfiprintf_r+0x4e>
 800421c:	f04f 30ff 	mov.w	r0, #4294967295
 8004220:	b01d      	add	sp, #116	; 0x74
 8004222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004226:	89ab      	ldrh	r3, [r5, #12]
 8004228:	0598      	lsls	r0, r3, #22
 800422a:	d4f7      	bmi.n	800421c <_vfiprintf_r+0x44>
 800422c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800422e:	f7ff feaf 	bl	8003f90 <__retarget_lock_release_recursive>
 8004232:	e7f3      	b.n	800421c <_vfiprintf_r+0x44>
 8004234:	2300      	movs	r3, #0
 8004236:	9309      	str	r3, [sp, #36]	; 0x24
 8004238:	2320      	movs	r3, #32
 800423a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800423e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004242:	2330      	movs	r3, #48	; 0x30
 8004244:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80043f8 <_vfiprintf_r+0x220>
 8004248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800424c:	f04f 0901 	mov.w	r9, #1
 8004250:	4623      	mov	r3, r4
 8004252:	469a      	mov	sl, r3
 8004254:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004258:	b10a      	cbz	r2, 800425e <_vfiprintf_r+0x86>
 800425a:	2a25      	cmp	r2, #37	; 0x25
 800425c:	d1f9      	bne.n	8004252 <_vfiprintf_r+0x7a>
 800425e:	ebba 0b04 	subs.w	fp, sl, r4
 8004262:	d00b      	beq.n	800427c <_vfiprintf_r+0xa4>
 8004264:	465b      	mov	r3, fp
 8004266:	4622      	mov	r2, r4
 8004268:	4629      	mov	r1, r5
 800426a:	4630      	mov	r0, r6
 800426c:	f7ff ffa1 	bl	80041b2 <__sfputs_r>
 8004270:	3001      	adds	r0, #1
 8004272:	f000 80a9 	beq.w	80043c8 <_vfiprintf_r+0x1f0>
 8004276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004278:	445a      	add	r2, fp
 800427a:	9209      	str	r2, [sp, #36]	; 0x24
 800427c:	f89a 3000 	ldrb.w	r3, [sl]
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 80a1 	beq.w	80043c8 <_vfiprintf_r+0x1f0>
 8004286:	2300      	movs	r3, #0
 8004288:	f04f 32ff 	mov.w	r2, #4294967295
 800428c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004290:	f10a 0a01 	add.w	sl, sl, #1
 8004294:	9304      	str	r3, [sp, #16]
 8004296:	9307      	str	r3, [sp, #28]
 8004298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800429c:	931a      	str	r3, [sp, #104]	; 0x68
 800429e:	4654      	mov	r4, sl
 80042a0:	2205      	movs	r2, #5
 80042a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042a6:	4854      	ldr	r0, [pc, #336]	; (80043f8 <_vfiprintf_r+0x220>)
 80042a8:	f7fb ff9a 	bl	80001e0 <memchr>
 80042ac:	9a04      	ldr	r2, [sp, #16]
 80042ae:	b9d8      	cbnz	r0, 80042e8 <_vfiprintf_r+0x110>
 80042b0:	06d1      	lsls	r1, r2, #27
 80042b2:	bf44      	itt	mi
 80042b4:	2320      	movmi	r3, #32
 80042b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042ba:	0713      	lsls	r3, r2, #28
 80042bc:	bf44      	itt	mi
 80042be:	232b      	movmi	r3, #43	; 0x2b
 80042c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042c4:	f89a 3000 	ldrb.w	r3, [sl]
 80042c8:	2b2a      	cmp	r3, #42	; 0x2a
 80042ca:	d015      	beq.n	80042f8 <_vfiprintf_r+0x120>
 80042cc:	9a07      	ldr	r2, [sp, #28]
 80042ce:	4654      	mov	r4, sl
 80042d0:	2000      	movs	r0, #0
 80042d2:	f04f 0c0a 	mov.w	ip, #10
 80042d6:	4621      	mov	r1, r4
 80042d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042dc:	3b30      	subs	r3, #48	; 0x30
 80042de:	2b09      	cmp	r3, #9
 80042e0:	d94d      	bls.n	800437e <_vfiprintf_r+0x1a6>
 80042e2:	b1b0      	cbz	r0, 8004312 <_vfiprintf_r+0x13a>
 80042e4:	9207      	str	r2, [sp, #28]
 80042e6:	e014      	b.n	8004312 <_vfiprintf_r+0x13a>
 80042e8:	eba0 0308 	sub.w	r3, r0, r8
 80042ec:	fa09 f303 	lsl.w	r3, r9, r3
 80042f0:	4313      	orrs	r3, r2
 80042f2:	9304      	str	r3, [sp, #16]
 80042f4:	46a2      	mov	sl, r4
 80042f6:	e7d2      	b.n	800429e <_vfiprintf_r+0xc6>
 80042f8:	9b03      	ldr	r3, [sp, #12]
 80042fa:	1d19      	adds	r1, r3, #4
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	9103      	str	r1, [sp, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	bfbb      	ittet	lt
 8004304:	425b      	neglt	r3, r3
 8004306:	f042 0202 	orrlt.w	r2, r2, #2
 800430a:	9307      	strge	r3, [sp, #28]
 800430c:	9307      	strlt	r3, [sp, #28]
 800430e:	bfb8      	it	lt
 8004310:	9204      	strlt	r2, [sp, #16]
 8004312:	7823      	ldrb	r3, [r4, #0]
 8004314:	2b2e      	cmp	r3, #46	; 0x2e
 8004316:	d10c      	bne.n	8004332 <_vfiprintf_r+0x15a>
 8004318:	7863      	ldrb	r3, [r4, #1]
 800431a:	2b2a      	cmp	r3, #42	; 0x2a
 800431c:	d134      	bne.n	8004388 <_vfiprintf_r+0x1b0>
 800431e:	9b03      	ldr	r3, [sp, #12]
 8004320:	1d1a      	adds	r2, r3, #4
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	9203      	str	r2, [sp, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	bfb8      	it	lt
 800432a:	f04f 33ff 	movlt.w	r3, #4294967295
 800432e:	3402      	adds	r4, #2
 8004330:	9305      	str	r3, [sp, #20]
 8004332:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004408 <_vfiprintf_r+0x230>
 8004336:	7821      	ldrb	r1, [r4, #0]
 8004338:	2203      	movs	r2, #3
 800433a:	4650      	mov	r0, sl
 800433c:	f7fb ff50 	bl	80001e0 <memchr>
 8004340:	b138      	cbz	r0, 8004352 <_vfiprintf_r+0x17a>
 8004342:	9b04      	ldr	r3, [sp, #16]
 8004344:	eba0 000a 	sub.w	r0, r0, sl
 8004348:	2240      	movs	r2, #64	; 0x40
 800434a:	4082      	lsls	r2, r0
 800434c:	4313      	orrs	r3, r2
 800434e:	3401      	adds	r4, #1
 8004350:	9304      	str	r3, [sp, #16]
 8004352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004356:	4829      	ldr	r0, [pc, #164]	; (80043fc <_vfiprintf_r+0x224>)
 8004358:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800435c:	2206      	movs	r2, #6
 800435e:	f7fb ff3f 	bl	80001e0 <memchr>
 8004362:	2800      	cmp	r0, #0
 8004364:	d03f      	beq.n	80043e6 <_vfiprintf_r+0x20e>
 8004366:	4b26      	ldr	r3, [pc, #152]	; (8004400 <_vfiprintf_r+0x228>)
 8004368:	bb1b      	cbnz	r3, 80043b2 <_vfiprintf_r+0x1da>
 800436a:	9b03      	ldr	r3, [sp, #12]
 800436c:	3307      	adds	r3, #7
 800436e:	f023 0307 	bic.w	r3, r3, #7
 8004372:	3308      	adds	r3, #8
 8004374:	9303      	str	r3, [sp, #12]
 8004376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004378:	443b      	add	r3, r7
 800437a:	9309      	str	r3, [sp, #36]	; 0x24
 800437c:	e768      	b.n	8004250 <_vfiprintf_r+0x78>
 800437e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004382:	460c      	mov	r4, r1
 8004384:	2001      	movs	r0, #1
 8004386:	e7a6      	b.n	80042d6 <_vfiprintf_r+0xfe>
 8004388:	2300      	movs	r3, #0
 800438a:	3401      	adds	r4, #1
 800438c:	9305      	str	r3, [sp, #20]
 800438e:	4619      	mov	r1, r3
 8004390:	f04f 0c0a 	mov.w	ip, #10
 8004394:	4620      	mov	r0, r4
 8004396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800439a:	3a30      	subs	r2, #48	; 0x30
 800439c:	2a09      	cmp	r2, #9
 800439e:	d903      	bls.n	80043a8 <_vfiprintf_r+0x1d0>
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0c6      	beq.n	8004332 <_vfiprintf_r+0x15a>
 80043a4:	9105      	str	r1, [sp, #20]
 80043a6:	e7c4      	b.n	8004332 <_vfiprintf_r+0x15a>
 80043a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80043ac:	4604      	mov	r4, r0
 80043ae:	2301      	movs	r3, #1
 80043b0:	e7f0      	b.n	8004394 <_vfiprintf_r+0x1bc>
 80043b2:	ab03      	add	r3, sp, #12
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	462a      	mov	r2, r5
 80043b8:	4b12      	ldr	r3, [pc, #72]	; (8004404 <_vfiprintf_r+0x22c>)
 80043ba:	a904      	add	r1, sp, #16
 80043bc:	4630      	mov	r0, r6
 80043be:	f3af 8000 	nop.w
 80043c2:	4607      	mov	r7, r0
 80043c4:	1c78      	adds	r0, r7, #1
 80043c6:	d1d6      	bne.n	8004376 <_vfiprintf_r+0x19e>
 80043c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043ca:	07d9      	lsls	r1, r3, #31
 80043cc:	d405      	bmi.n	80043da <_vfiprintf_r+0x202>
 80043ce:	89ab      	ldrh	r3, [r5, #12]
 80043d0:	059a      	lsls	r2, r3, #22
 80043d2:	d402      	bmi.n	80043da <_vfiprintf_r+0x202>
 80043d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043d6:	f7ff fddb 	bl	8003f90 <__retarget_lock_release_recursive>
 80043da:	89ab      	ldrh	r3, [r5, #12]
 80043dc:	065b      	lsls	r3, r3, #25
 80043de:	f53f af1d 	bmi.w	800421c <_vfiprintf_r+0x44>
 80043e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043e4:	e71c      	b.n	8004220 <_vfiprintf_r+0x48>
 80043e6:	ab03      	add	r3, sp, #12
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	462a      	mov	r2, r5
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <_vfiprintf_r+0x22c>)
 80043ee:	a904      	add	r1, sp, #16
 80043f0:	4630      	mov	r0, r6
 80043f2:	f000 f879 	bl	80044e8 <_printf_i>
 80043f6:	e7e4      	b.n	80043c2 <_vfiprintf_r+0x1ea>
 80043f8:	08005988 	.word	0x08005988
 80043fc:	08005992 	.word	0x08005992
 8004400:	00000000 	.word	0x00000000
 8004404:	080041b3 	.word	0x080041b3
 8004408:	0800598e 	.word	0x0800598e

0800440c <_printf_common>:
 800440c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004410:	4616      	mov	r6, r2
 8004412:	4699      	mov	r9, r3
 8004414:	688a      	ldr	r2, [r1, #8]
 8004416:	690b      	ldr	r3, [r1, #16]
 8004418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800441c:	4293      	cmp	r3, r2
 800441e:	bfb8      	it	lt
 8004420:	4613      	movlt	r3, r2
 8004422:	6033      	str	r3, [r6, #0]
 8004424:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004428:	4607      	mov	r7, r0
 800442a:	460c      	mov	r4, r1
 800442c:	b10a      	cbz	r2, 8004432 <_printf_common+0x26>
 800442e:	3301      	adds	r3, #1
 8004430:	6033      	str	r3, [r6, #0]
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	0699      	lsls	r1, r3, #26
 8004436:	bf42      	ittt	mi
 8004438:	6833      	ldrmi	r3, [r6, #0]
 800443a:	3302      	addmi	r3, #2
 800443c:	6033      	strmi	r3, [r6, #0]
 800443e:	6825      	ldr	r5, [r4, #0]
 8004440:	f015 0506 	ands.w	r5, r5, #6
 8004444:	d106      	bne.n	8004454 <_printf_common+0x48>
 8004446:	f104 0a19 	add.w	sl, r4, #25
 800444a:	68e3      	ldr	r3, [r4, #12]
 800444c:	6832      	ldr	r2, [r6, #0]
 800444e:	1a9b      	subs	r3, r3, r2
 8004450:	42ab      	cmp	r3, r5
 8004452:	dc26      	bgt.n	80044a2 <_printf_common+0x96>
 8004454:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004458:	1e13      	subs	r3, r2, #0
 800445a:	6822      	ldr	r2, [r4, #0]
 800445c:	bf18      	it	ne
 800445e:	2301      	movne	r3, #1
 8004460:	0692      	lsls	r2, r2, #26
 8004462:	d42b      	bmi.n	80044bc <_printf_common+0xb0>
 8004464:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004468:	4649      	mov	r1, r9
 800446a:	4638      	mov	r0, r7
 800446c:	47c0      	blx	r8
 800446e:	3001      	adds	r0, #1
 8004470:	d01e      	beq.n	80044b0 <_printf_common+0xa4>
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	6922      	ldr	r2, [r4, #16]
 8004476:	f003 0306 	and.w	r3, r3, #6
 800447a:	2b04      	cmp	r3, #4
 800447c:	bf02      	ittt	eq
 800447e:	68e5      	ldreq	r5, [r4, #12]
 8004480:	6833      	ldreq	r3, [r6, #0]
 8004482:	1aed      	subeq	r5, r5, r3
 8004484:	68a3      	ldr	r3, [r4, #8]
 8004486:	bf0c      	ite	eq
 8004488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800448c:	2500      	movne	r5, #0
 800448e:	4293      	cmp	r3, r2
 8004490:	bfc4      	itt	gt
 8004492:	1a9b      	subgt	r3, r3, r2
 8004494:	18ed      	addgt	r5, r5, r3
 8004496:	2600      	movs	r6, #0
 8004498:	341a      	adds	r4, #26
 800449a:	42b5      	cmp	r5, r6
 800449c:	d11a      	bne.n	80044d4 <_printf_common+0xc8>
 800449e:	2000      	movs	r0, #0
 80044a0:	e008      	b.n	80044b4 <_printf_common+0xa8>
 80044a2:	2301      	movs	r3, #1
 80044a4:	4652      	mov	r2, sl
 80044a6:	4649      	mov	r1, r9
 80044a8:	4638      	mov	r0, r7
 80044aa:	47c0      	blx	r8
 80044ac:	3001      	adds	r0, #1
 80044ae:	d103      	bne.n	80044b8 <_printf_common+0xac>
 80044b0:	f04f 30ff 	mov.w	r0, #4294967295
 80044b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b8:	3501      	adds	r5, #1
 80044ba:	e7c6      	b.n	800444a <_printf_common+0x3e>
 80044bc:	18e1      	adds	r1, r4, r3
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	2030      	movs	r0, #48	; 0x30
 80044c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044c6:	4422      	add	r2, r4
 80044c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044d0:	3302      	adds	r3, #2
 80044d2:	e7c7      	b.n	8004464 <_printf_common+0x58>
 80044d4:	2301      	movs	r3, #1
 80044d6:	4622      	mov	r2, r4
 80044d8:	4649      	mov	r1, r9
 80044da:	4638      	mov	r0, r7
 80044dc:	47c0      	blx	r8
 80044de:	3001      	adds	r0, #1
 80044e0:	d0e6      	beq.n	80044b0 <_printf_common+0xa4>
 80044e2:	3601      	adds	r6, #1
 80044e4:	e7d9      	b.n	800449a <_printf_common+0x8e>
	...

080044e8 <_printf_i>:
 80044e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044ec:	7e0f      	ldrb	r7, [r1, #24]
 80044ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044f0:	2f78      	cmp	r7, #120	; 0x78
 80044f2:	4691      	mov	r9, r2
 80044f4:	4680      	mov	r8, r0
 80044f6:	460c      	mov	r4, r1
 80044f8:	469a      	mov	sl, r3
 80044fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044fe:	d807      	bhi.n	8004510 <_printf_i+0x28>
 8004500:	2f62      	cmp	r7, #98	; 0x62
 8004502:	d80a      	bhi.n	800451a <_printf_i+0x32>
 8004504:	2f00      	cmp	r7, #0
 8004506:	f000 80d4 	beq.w	80046b2 <_printf_i+0x1ca>
 800450a:	2f58      	cmp	r7, #88	; 0x58
 800450c:	f000 80c0 	beq.w	8004690 <_printf_i+0x1a8>
 8004510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004514:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004518:	e03a      	b.n	8004590 <_printf_i+0xa8>
 800451a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800451e:	2b15      	cmp	r3, #21
 8004520:	d8f6      	bhi.n	8004510 <_printf_i+0x28>
 8004522:	a101      	add	r1, pc, #4	; (adr r1, 8004528 <_printf_i+0x40>)
 8004524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004528:	08004581 	.word	0x08004581
 800452c:	08004595 	.word	0x08004595
 8004530:	08004511 	.word	0x08004511
 8004534:	08004511 	.word	0x08004511
 8004538:	08004511 	.word	0x08004511
 800453c:	08004511 	.word	0x08004511
 8004540:	08004595 	.word	0x08004595
 8004544:	08004511 	.word	0x08004511
 8004548:	08004511 	.word	0x08004511
 800454c:	08004511 	.word	0x08004511
 8004550:	08004511 	.word	0x08004511
 8004554:	08004699 	.word	0x08004699
 8004558:	080045c1 	.word	0x080045c1
 800455c:	08004653 	.word	0x08004653
 8004560:	08004511 	.word	0x08004511
 8004564:	08004511 	.word	0x08004511
 8004568:	080046bb 	.word	0x080046bb
 800456c:	08004511 	.word	0x08004511
 8004570:	080045c1 	.word	0x080045c1
 8004574:	08004511 	.word	0x08004511
 8004578:	08004511 	.word	0x08004511
 800457c:	0800465b 	.word	0x0800465b
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	1d1a      	adds	r2, r3, #4
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	602a      	str	r2, [r5, #0]
 8004588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800458c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004590:	2301      	movs	r3, #1
 8004592:	e09f      	b.n	80046d4 <_printf_i+0x1ec>
 8004594:	6820      	ldr	r0, [r4, #0]
 8004596:	682b      	ldr	r3, [r5, #0]
 8004598:	0607      	lsls	r7, r0, #24
 800459a:	f103 0104 	add.w	r1, r3, #4
 800459e:	6029      	str	r1, [r5, #0]
 80045a0:	d501      	bpl.n	80045a6 <_printf_i+0xbe>
 80045a2:	681e      	ldr	r6, [r3, #0]
 80045a4:	e003      	b.n	80045ae <_printf_i+0xc6>
 80045a6:	0646      	lsls	r6, r0, #25
 80045a8:	d5fb      	bpl.n	80045a2 <_printf_i+0xba>
 80045aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80045ae:	2e00      	cmp	r6, #0
 80045b0:	da03      	bge.n	80045ba <_printf_i+0xd2>
 80045b2:	232d      	movs	r3, #45	; 0x2d
 80045b4:	4276      	negs	r6, r6
 80045b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ba:	485a      	ldr	r0, [pc, #360]	; (8004724 <_printf_i+0x23c>)
 80045bc:	230a      	movs	r3, #10
 80045be:	e012      	b.n	80045e6 <_printf_i+0xfe>
 80045c0:	682b      	ldr	r3, [r5, #0]
 80045c2:	6820      	ldr	r0, [r4, #0]
 80045c4:	1d19      	adds	r1, r3, #4
 80045c6:	6029      	str	r1, [r5, #0]
 80045c8:	0605      	lsls	r5, r0, #24
 80045ca:	d501      	bpl.n	80045d0 <_printf_i+0xe8>
 80045cc:	681e      	ldr	r6, [r3, #0]
 80045ce:	e002      	b.n	80045d6 <_printf_i+0xee>
 80045d0:	0641      	lsls	r1, r0, #25
 80045d2:	d5fb      	bpl.n	80045cc <_printf_i+0xe4>
 80045d4:	881e      	ldrh	r6, [r3, #0]
 80045d6:	4853      	ldr	r0, [pc, #332]	; (8004724 <_printf_i+0x23c>)
 80045d8:	2f6f      	cmp	r7, #111	; 0x6f
 80045da:	bf0c      	ite	eq
 80045dc:	2308      	moveq	r3, #8
 80045de:	230a      	movne	r3, #10
 80045e0:	2100      	movs	r1, #0
 80045e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045e6:	6865      	ldr	r5, [r4, #4]
 80045e8:	60a5      	str	r5, [r4, #8]
 80045ea:	2d00      	cmp	r5, #0
 80045ec:	bfa2      	ittt	ge
 80045ee:	6821      	ldrge	r1, [r4, #0]
 80045f0:	f021 0104 	bicge.w	r1, r1, #4
 80045f4:	6021      	strge	r1, [r4, #0]
 80045f6:	b90e      	cbnz	r6, 80045fc <_printf_i+0x114>
 80045f8:	2d00      	cmp	r5, #0
 80045fa:	d04b      	beq.n	8004694 <_printf_i+0x1ac>
 80045fc:	4615      	mov	r5, r2
 80045fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004602:	fb03 6711 	mls	r7, r3, r1, r6
 8004606:	5dc7      	ldrb	r7, [r0, r7]
 8004608:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800460c:	4637      	mov	r7, r6
 800460e:	42bb      	cmp	r3, r7
 8004610:	460e      	mov	r6, r1
 8004612:	d9f4      	bls.n	80045fe <_printf_i+0x116>
 8004614:	2b08      	cmp	r3, #8
 8004616:	d10b      	bne.n	8004630 <_printf_i+0x148>
 8004618:	6823      	ldr	r3, [r4, #0]
 800461a:	07de      	lsls	r6, r3, #31
 800461c:	d508      	bpl.n	8004630 <_printf_i+0x148>
 800461e:	6923      	ldr	r3, [r4, #16]
 8004620:	6861      	ldr	r1, [r4, #4]
 8004622:	4299      	cmp	r1, r3
 8004624:	bfde      	ittt	le
 8004626:	2330      	movle	r3, #48	; 0x30
 8004628:	f805 3c01 	strble.w	r3, [r5, #-1]
 800462c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004630:	1b52      	subs	r2, r2, r5
 8004632:	6122      	str	r2, [r4, #16]
 8004634:	f8cd a000 	str.w	sl, [sp]
 8004638:	464b      	mov	r3, r9
 800463a:	aa03      	add	r2, sp, #12
 800463c:	4621      	mov	r1, r4
 800463e:	4640      	mov	r0, r8
 8004640:	f7ff fee4 	bl	800440c <_printf_common>
 8004644:	3001      	adds	r0, #1
 8004646:	d14a      	bne.n	80046de <_printf_i+0x1f6>
 8004648:	f04f 30ff 	mov.w	r0, #4294967295
 800464c:	b004      	add	sp, #16
 800464e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	f043 0320 	orr.w	r3, r3, #32
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	4833      	ldr	r0, [pc, #204]	; (8004728 <_printf_i+0x240>)
 800465c:	2778      	movs	r7, #120	; 0x78
 800465e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	6829      	ldr	r1, [r5, #0]
 8004666:	061f      	lsls	r7, r3, #24
 8004668:	f851 6b04 	ldr.w	r6, [r1], #4
 800466c:	d402      	bmi.n	8004674 <_printf_i+0x18c>
 800466e:	065f      	lsls	r7, r3, #25
 8004670:	bf48      	it	mi
 8004672:	b2b6      	uxthmi	r6, r6
 8004674:	07df      	lsls	r7, r3, #31
 8004676:	bf48      	it	mi
 8004678:	f043 0320 	orrmi.w	r3, r3, #32
 800467c:	6029      	str	r1, [r5, #0]
 800467e:	bf48      	it	mi
 8004680:	6023      	strmi	r3, [r4, #0]
 8004682:	b91e      	cbnz	r6, 800468c <_printf_i+0x1a4>
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	f023 0320 	bic.w	r3, r3, #32
 800468a:	6023      	str	r3, [r4, #0]
 800468c:	2310      	movs	r3, #16
 800468e:	e7a7      	b.n	80045e0 <_printf_i+0xf8>
 8004690:	4824      	ldr	r0, [pc, #144]	; (8004724 <_printf_i+0x23c>)
 8004692:	e7e4      	b.n	800465e <_printf_i+0x176>
 8004694:	4615      	mov	r5, r2
 8004696:	e7bd      	b.n	8004614 <_printf_i+0x12c>
 8004698:	682b      	ldr	r3, [r5, #0]
 800469a:	6826      	ldr	r6, [r4, #0]
 800469c:	6961      	ldr	r1, [r4, #20]
 800469e:	1d18      	adds	r0, r3, #4
 80046a0:	6028      	str	r0, [r5, #0]
 80046a2:	0635      	lsls	r5, r6, #24
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	d501      	bpl.n	80046ac <_printf_i+0x1c4>
 80046a8:	6019      	str	r1, [r3, #0]
 80046aa:	e002      	b.n	80046b2 <_printf_i+0x1ca>
 80046ac:	0670      	lsls	r0, r6, #25
 80046ae:	d5fb      	bpl.n	80046a8 <_printf_i+0x1c0>
 80046b0:	8019      	strh	r1, [r3, #0]
 80046b2:	2300      	movs	r3, #0
 80046b4:	6123      	str	r3, [r4, #16]
 80046b6:	4615      	mov	r5, r2
 80046b8:	e7bc      	b.n	8004634 <_printf_i+0x14c>
 80046ba:	682b      	ldr	r3, [r5, #0]
 80046bc:	1d1a      	adds	r2, r3, #4
 80046be:	602a      	str	r2, [r5, #0]
 80046c0:	681d      	ldr	r5, [r3, #0]
 80046c2:	6862      	ldr	r2, [r4, #4]
 80046c4:	2100      	movs	r1, #0
 80046c6:	4628      	mov	r0, r5
 80046c8:	f7fb fd8a 	bl	80001e0 <memchr>
 80046cc:	b108      	cbz	r0, 80046d2 <_printf_i+0x1ea>
 80046ce:	1b40      	subs	r0, r0, r5
 80046d0:	6060      	str	r0, [r4, #4]
 80046d2:	6863      	ldr	r3, [r4, #4]
 80046d4:	6123      	str	r3, [r4, #16]
 80046d6:	2300      	movs	r3, #0
 80046d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046dc:	e7aa      	b.n	8004634 <_printf_i+0x14c>
 80046de:	6923      	ldr	r3, [r4, #16]
 80046e0:	462a      	mov	r2, r5
 80046e2:	4649      	mov	r1, r9
 80046e4:	4640      	mov	r0, r8
 80046e6:	47d0      	blx	sl
 80046e8:	3001      	adds	r0, #1
 80046ea:	d0ad      	beq.n	8004648 <_printf_i+0x160>
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	079b      	lsls	r3, r3, #30
 80046f0:	d413      	bmi.n	800471a <_printf_i+0x232>
 80046f2:	68e0      	ldr	r0, [r4, #12]
 80046f4:	9b03      	ldr	r3, [sp, #12]
 80046f6:	4298      	cmp	r0, r3
 80046f8:	bfb8      	it	lt
 80046fa:	4618      	movlt	r0, r3
 80046fc:	e7a6      	b.n	800464c <_printf_i+0x164>
 80046fe:	2301      	movs	r3, #1
 8004700:	4632      	mov	r2, r6
 8004702:	4649      	mov	r1, r9
 8004704:	4640      	mov	r0, r8
 8004706:	47d0      	blx	sl
 8004708:	3001      	adds	r0, #1
 800470a:	d09d      	beq.n	8004648 <_printf_i+0x160>
 800470c:	3501      	adds	r5, #1
 800470e:	68e3      	ldr	r3, [r4, #12]
 8004710:	9903      	ldr	r1, [sp, #12]
 8004712:	1a5b      	subs	r3, r3, r1
 8004714:	42ab      	cmp	r3, r5
 8004716:	dcf2      	bgt.n	80046fe <_printf_i+0x216>
 8004718:	e7eb      	b.n	80046f2 <_printf_i+0x20a>
 800471a:	2500      	movs	r5, #0
 800471c:	f104 0619 	add.w	r6, r4, #25
 8004720:	e7f5      	b.n	800470e <_printf_i+0x226>
 8004722:	bf00      	nop
 8004724:	08005999 	.word	0x08005999
 8004728:	080059aa 	.word	0x080059aa

0800472c <__sflush_r>:
 800472c:	898a      	ldrh	r2, [r1, #12]
 800472e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004732:	4605      	mov	r5, r0
 8004734:	0710      	lsls	r0, r2, #28
 8004736:	460c      	mov	r4, r1
 8004738:	d458      	bmi.n	80047ec <__sflush_r+0xc0>
 800473a:	684b      	ldr	r3, [r1, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	dc05      	bgt.n	800474c <__sflush_r+0x20>
 8004740:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	dc02      	bgt.n	800474c <__sflush_r+0x20>
 8004746:	2000      	movs	r0, #0
 8004748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800474c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800474e:	2e00      	cmp	r6, #0
 8004750:	d0f9      	beq.n	8004746 <__sflush_r+0x1a>
 8004752:	2300      	movs	r3, #0
 8004754:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004758:	682f      	ldr	r7, [r5, #0]
 800475a:	6a21      	ldr	r1, [r4, #32]
 800475c:	602b      	str	r3, [r5, #0]
 800475e:	d032      	beq.n	80047c6 <__sflush_r+0x9a>
 8004760:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004762:	89a3      	ldrh	r3, [r4, #12]
 8004764:	075a      	lsls	r2, r3, #29
 8004766:	d505      	bpl.n	8004774 <__sflush_r+0x48>
 8004768:	6863      	ldr	r3, [r4, #4]
 800476a:	1ac0      	subs	r0, r0, r3
 800476c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800476e:	b10b      	cbz	r3, 8004774 <__sflush_r+0x48>
 8004770:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004772:	1ac0      	subs	r0, r0, r3
 8004774:	2300      	movs	r3, #0
 8004776:	4602      	mov	r2, r0
 8004778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800477a:	6a21      	ldr	r1, [r4, #32]
 800477c:	4628      	mov	r0, r5
 800477e:	47b0      	blx	r6
 8004780:	1c43      	adds	r3, r0, #1
 8004782:	89a3      	ldrh	r3, [r4, #12]
 8004784:	d106      	bne.n	8004794 <__sflush_r+0x68>
 8004786:	6829      	ldr	r1, [r5, #0]
 8004788:	291d      	cmp	r1, #29
 800478a:	d82b      	bhi.n	80047e4 <__sflush_r+0xb8>
 800478c:	4a29      	ldr	r2, [pc, #164]	; (8004834 <__sflush_r+0x108>)
 800478e:	410a      	asrs	r2, r1
 8004790:	07d6      	lsls	r6, r2, #31
 8004792:	d427      	bmi.n	80047e4 <__sflush_r+0xb8>
 8004794:	2200      	movs	r2, #0
 8004796:	6062      	str	r2, [r4, #4]
 8004798:	04d9      	lsls	r1, r3, #19
 800479a:	6922      	ldr	r2, [r4, #16]
 800479c:	6022      	str	r2, [r4, #0]
 800479e:	d504      	bpl.n	80047aa <__sflush_r+0x7e>
 80047a0:	1c42      	adds	r2, r0, #1
 80047a2:	d101      	bne.n	80047a8 <__sflush_r+0x7c>
 80047a4:	682b      	ldr	r3, [r5, #0]
 80047a6:	b903      	cbnz	r3, 80047aa <__sflush_r+0x7e>
 80047a8:	6560      	str	r0, [r4, #84]	; 0x54
 80047aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047ac:	602f      	str	r7, [r5, #0]
 80047ae:	2900      	cmp	r1, #0
 80047b0:	d0c9      	beq.n	8004746 <__sflush_r+0x1a>
 80047b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047b6:	4299      	cmp	r1, r3
 80047b8:	d002      	beq.n	80047c0 <__sflush_r+0x94>
 80047ba:	4628      	mov	r0, r5
 80047bc:	f7ff fbea 	bl	8003f94 <_free_r>
 80047c0:	2000      	movs	r0, #0
 80047c2:	6360      	str	r0, [r4, #52]	; 0x34
 80047c4:	e7c0      	b.n	8004748 <__sflush_r+0x1c>
 80047c6:	2301      	movs	r3, #1
 80047c8:	4628      	mov	r0, r5
 80047ca:	47b0      	blx	r6
 80047cc:	1c41      	adds	r1, r0, #1
 80047ce:	d1c8      	bne.n	8004762 <__sflush_r+0x36>
 80047d0:	682b      	ldr	r3, [r5, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0c5      	beq.n	8004762 <__sflush_r+0x36>
 80047d6:	2b1d      	cmp	r3, #29
 80047d8:	d001      	beq.n	80047de <__sflush_r+0xb2>
 80047da:	2b16      	cmp	r3, #22
 80047dc:	d101      	bne.n	80047e2 <__sflush_r+0xb6>
 80047de:	602f      	str	r7, [r5, #0]
 80047e0:	e7b1      	b.n	8004746 <__sflush_r+0x1a>
 80047e2:	89a3      	ldrh	r3, [r4, #12]
 80047e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047e8:	81a3      	strh	r3, [r4, #12]
 80047ea:	e7ad      	b.n	8004748 <__sflush_r+0x1c>
 80047ec:	690f      	ldr	r7, [r1, #16]
 80047ee:	2f00      	cmp	r7, #0
 80047f0:	d0a9      	beq.n	8004746 <__sflush_r+0x1a>
 80047f2:	0793      	lsls	r3, r2, #30
 80047f4:	680e      	ldr	r6, [r1, #0]
 80047f6:	bf08      	it	eq
 80047f8:	694b      	ldreq	r3, [r1, #20]
 80047fa:	600f      	str	r7, [r1, #0]
 80047fc:	bf18      	it	ne
 80047fe:	2300      	movne	r3, #0
 8004800:	eba6 0807 	sub.w	r8, r6, r7
 8004804:	608b      	str	r3, [r1, #8]
 8004806:	f1b8 0f00 	cmp.w	r8, #0
 800480a:	dd9c      	ble.n	8004746 <__sflush_r+0x1a>
 800480c:	6a21      	ldr	r1, [r4, #32]
 800480e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004810:	4643      	mov	r3, r8
 8004812:	463a      	mov	r2, r7
 8004814:	4628      	mov	r0, r5
 8004816:	47b0      	blx	r6
 8004818:	2800      	cmp	r0, #0
 800481a:	dc06      	bgt.n	800482a <__sflush_r+0xfe>
 800481c:	89a3      	ldrh	r3, [r4, #12]
 800481e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004822:	81a3      	strh	r3, [r4, #12]
 8004824:	f04f 30ff 	mov.w	r0, #4294967295
 8004828:	e78e      	b.n	8004748 <__sflush_r+0x1c>
 800482a:	4407      	add	r7, r0
 800482c:	eba8 0800 	sub.w	r8, r8, r0
 8004830:	e7e9      	b.n	8004806 <__sflush_r+0xda>
 8004832:	bf00      	nop
 8004834:	dfbffffe 	.word	0xdfbffffe

08004838 <_fflush_r>:
 8004838:	b538      	push	{r3, r4, r5, lr}
 800483a:	690b      	ldr	r3, [r1, #16]
 800483c:	4605      	mov	r5, r0
 800483e:	460c      	mov	r4, r1
 8004840:	b913      	cbnz	r3, 8004848 <_fflush_r+0x10>
 8004842:	2500      	movs	r5, #0
 8004844:	4628      	mov	r0, r5
 8004846:	bd38      	pop	{r3, r4, r5, pc}
 8004848:	b118      	cbz	r0, 8004852 <_fflush_r+0x1a>
 800484a:	6a03      	ldr	r3, [r0, #32]
 800484c:	b90b      	cbnz	r3, 8004852 <_fflush_r+0x1a>
 800484e:	f7ff fa99 	bl	8003d84 <__sinit>
 8004852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0f3      	beq.n	8004842 <_fflush_r+0xa>
 800485a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800485c:	07d0      	lsls	r0, r2, #31
 800485e:	d404      	bmi.n	800486a <_fflush_r+0x32>
 8004860:	0599      	lsls	r1, r3, #22
 8004862:	d402      	bmi.n	800486a <_fflush_r+0x32>
 8004864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004866:	f7ff fb92 	bl	8003f8e <__retarget_lock_acquire_recursive>
 800486a:	4628      	mov	r0, r5
 800486c:	4621      	mov	r1, r4
 800486e:	f7ff ff5d 	bl	800472c <__sflush_r>
 8004872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004874:	07da      	lsls	r2, r3, #31
 8004876:	4605      	mov	r5, r0
 8004878:	d4e4      	bmi.n	8004844 <_fflush_r+0xc>
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	059b      	lsls	r3, r3, #22
 800487e:	d4e1      	bmi.n	8004844 <_fflush_r+0xc>
 8004880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004882:	f7ff fb85 	bl	8003f90 <__retarget_lock_release_recursive>
 8004886:	e7dd      	b.n	8004844 <_fflush_r+0xc>

08004888 <__swbuf_r>:
 8004888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488a:	460e      	mov	r6, r1
 800488c:	4614      	mov	r4, r2
 800488e:	4605      	mov	r5, r0
 8004890:	b118      	cbz	r0, 800489a <__swbuf_r+0x12>
 8004892:	6a03      	ldr	r3, [r0, #32]
 8004894:	b90b      	cbnz	r3, 800489a <__swbuf_r+0x12>
 8004896:	f7ff fa75 	bl	8003d84 <__sinit>
 800489a:	69a3      	ldr	r3, [r4, #24]
 800489c:	60a3      	str	r3, [r4, #8]
 800489e:	89a3      	ldrh	r3, [r4, #12]
 80048a0:	071a      	lsls	r2, r3, #28
 80048a2:	d525      	bpl.n	80048f0 <__swbuf_r+0x68>
 80048a4:	6923      	ldr	r3, [r4, #16]
 80048a6:	b31b      	cbz	r3, 80048f0 <__swbuf_r+0x68>
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	6922      	ldr	r2, [r4, #16]
 80048ac:	1a98      	subs	r0, r3, r2
 80048ae:	6963      	ldr	r3, [r4, #20]
 80048b0:	b2f6      	uxtb	r6, r6
 80048b2:	4283      	cmp	r3, r0
 80048b4:	4637      	mov	r7, r6
 80048b6:	dc04      	bgt.n	80048c2 <__swbuf_r+0x3a>
 80048b8:	4621      	mov	r1, r4
 80048ba:	4628      	mov	r0, r5
 80048bc:	f7ff ffbc 	bl	8004838 <_fflush_r>
 80048c0:	b9e0      	cbnz	r0, 80048fc <__swbuf_r+0x74>
 80048c2:	68a3      	ldr	r3, [r4, #8]
 80048c4:	3b01      	subs	r3, #1
 80048c6:	60a3      	str	r3, [r4, #8]
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	6022      	str	r2, [r4, #0]
 80048ce:	701e      	strb	r6, [r3, #0]
 80048d0:	6962      	ldr	r2, [r4, #20]
 80048d2:	1c43      	adds	r3, r0, #1
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d004      	beq.n	80048e2 <__swbuf_r+0x5a>
 80048d8:	89a3      	ldrh	r3, [r4, #12]
 80048da:	07db      	lsls	r3, r3, #31
 80048dc:	d506      	bpl.n	80048ec <__swbuf_r+0x64>
 80048de:	2e0a      	cmp	r6, #10
 80048e0:	d104      	bne.n	80048ec <__swbuf_r+0x64>
 80048e2:	4621      	mov	r1, r4
 80048e4:	4628      	mov	r0, r5
 80048e6:	f7ff ffa7 	bl	8004838 <_fflush_r>
 80048ea:	b938      	cbnz	r0, 80048fc <__swbuf_r+0x74>
 80048ec:	4638      	mov	r0, r7
 80048ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048f0:	4621      	mov	r1, r4
 80048f2:	4628      	mov	r0, r5
 80048f4:	f000 f806 	bl	8004904 <__swsetup_r>
 80048f8:	2800      	cmp	r0, #0
 80048fa:	d0d5      	beq.n	80048a8 <__swbuf_r+0x20>
 80048fc:	f04f 37ff 	mov.w	r7, #4294967295
 8004900:	e7f4      	b.n	80048ec <__swbuf_r+0x64>
	...

08004904 <__swsetup_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	4b2a      	ldr	r3, [pc, #168]	; (80049b0 <__swsetup_r+0xac>)
 8004908:	4605      	mov	r5, r0
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	460c      	mov	r4, r1
 800490e:	b118      	cbz	r0, 8004918 <__swsetup_r+0x14>
 8004910:	6a03      	ldr	r3, [r0, #32]
 8004912:	b90b      	cbnz	r3, 8004918 <__swsetup_r+0x14>
 8004914:	f7ff fa36 	bl	8003d84 <__sinit>
 8004918:	89a3      	ldrh	r3, [r4, #12]
 800491a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800491e:	0718      	lsls	r0, r3, #28
 8004920:	d422      	bmi.n	8004968 <__swsetup_r+0x64>
 8004922:	06d9      	lsls	r1, r3, #27
 8004924:	d407      	bmi.n	8004936 <__swsetup_r+0x32>
 8004926:	2309      	movs	r3, #9
 8004928:	602b      	str	r3, [r5, #0]
 800492a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800492e:	81a3      	strh	r3, [r4, #12]
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	e034      	b.n	80049a0 <__swsetup_r+0x9c>
 8004936:	0758      	lsls	r0, r3, #29
 8004938:	d512      	bpl.n	8004960 <__swsetup_r+0x5c>
 800493a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800493c:	b141      	cbz	r1, 8004950 <__swsetup_r+0x4c>
 800493e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004942:	4299      	cmp	r1, r3
 8004944:	d002      	beq.n	800494c <__swsetup_r+0x48>
 8004946:	4628      	mov	r0, r5
 8004948:	f7ff fb24 	bl	8003f94 <_free_r>
 800494c:	2300      	movs	r3, #0
 800494e:	6363      	str	r3, [r4, #52]	; 0x34
 8004950:	89a3      	ldrh	r3, [r4, #12]
 8004952:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004956:	81a3      	strh	r3, [r4, #12]
 8004958:	2300      	movs	r3, #0
 800495a:	6063      	str	r3, [r4, #4]
 800495c:	6923      	ldr	r3, [r4, #16]
 800495e:	6023      	str	r3, [r4, #0]
 8004960:	89a3      	ldrh	r3, [r4, #12]
 8004962:	f043 0308 	orr.w	r3, r3, #8
 8004966:	81a3      	strh	r3, [r4, #12]
 8004968:	6923      	ldr	r3, [r4, #16]
 800496a:	b94b      	cbnz	r3, 8004980 <__swsetup_r+0x7c>
 800496c:	89a3      	ldrh	r3, [r4, #12]
 800496e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004976:	d003      	beq.n	8004980 <__swsetup_r+0x7c>
 8004978:	4621      	mov	r1, r4
 800497a:	4628      	mov	r0, r5
 800497c:	f000 f850 	bl	8004a20 <__smakebuf_r>
 8004980:	89a0      	ldrh	r0, [r4, #12]
 8004982:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004986:	f010 0301 	ands.w	r3, r0, #1
 800498a:	d00a      	beq.n	80049a2 <__swsetup_r+0x9e>
 800498c:	2300      	movs	r3, #0
 800498e:	60a3      	str	r3, [r4, #8]
 8004990:	6963      	ldr	r3, [r4, #20]
 8004992:	425b      	negs	r3, r3
 8004994:	61a3      	str	r3, [r4, #24]
 8004996:	6923      	ldr	r3, [r4, #16]
 8004998:	b943      	cbnz	r3, 80049ac <__swsetup_r+0xa8>
 800499a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800499e:	d1c4      	bne.n	800492a <__swsetup_r+0x26>
 80049a0:	bd38      	pop	{r3, r4, r5, pc}
 80049a2:	0781      	lsls	r1, r0, #30
 80049a4:	bf58      	it	pl
 80049a6:	6963      	ldrpl	r3, [r4, #20]
 80049a8:	60a3      	str	r3, [r4, #8]
 80049aa:	e7f4      	b.n	8004996 <__swsetup_r+0x92>
 80049ac:	2000      	movs	r0, #0
 80049ae:	e7f7      	b.n	80049a0 <__swsetup_r+0x9c>
 80049b0:	20000064 	.word	0x20000064

080049b4 <_sbrk_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	4d06      	ldr	r5, [pc, #24]	; (80049d0 <_sbrk_r+0x1c>)
 80049b8:	2300      	movs	r3, #0
 80049ba:	4604      	mov	r4, r0
 80049bc:	4608      	mov	r0, r1
 80049be:	602b      	str	r3, [r5, #0]
 80049c0:	f7fd f97a 	bl	8001cb8 <_sbrk>
 80049c4:	1c43      	adds	r3, r0, #1
 80049c6:	d102      	bne.n	80049ce <_sbrk_r+0x1a>
 80049c8:	682b      	ldr	r3, [r5, #0]
 80049ca:	b103      	cbz	r3, 80049ce <_sbrk_r+0x1a>
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	bd38      	pop	{r3, r4, r5, pc}
 80049d0:	20002828 	.word	0x20002828

080049d4 <__swhatbuf_r>:
 80049d4:	b570      	push	{r4, r5, r6, lr}
 80049d6:	460c      	mov	r4, r1
 80049d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049dc:	2900      	cmp	r1, #0
 80049de:	b096      	sub	sp, #88	; 0x58
 80049e0:	4615      	mov	r5, r2
 80049e2:	461e      	mov	r6, r3
 80049e4:	da0d      	bge.n	8004a02 <__swhatbuf_r+0x2e>
 80049e6:	89a3      	ldrh	r3, [r4, #12]
 80049e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80049ec:	f04f 0100 	mov.w	r1, #0
 80049f0:	bf0c      	ite	eq
 80049f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80049f6:	2340      	movne	r3, #64	; 0x40
 80049f8:	2000      	movs	r0, #0
 80049fa:	6031      	str	r1, [r6, #0]
 80049fc:	602b      	str	r3, [r5, #0]
 80049fe:	b016      	add	sp, #88	; 0x58
 8004a00:	bd70      	pop	{r4, r5, r6, pc}
 8004a02:	466a      	mov	r2, sp
 8004a04:	f000 f848 	bl	8004a98 <_fstat_r>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	dbec      	blt.n	80049e6 <__swhatbuf_r+0x12>
 8004a0c:	9901      	ldr	r1, [sp, #4]
 8004a0e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004a12:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004a16:	4259      	negs	r1, r3
 8004a18:	4159      	adcs	r1, r3
 8004a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a1e:	e7eb      	b.n	80049f8 <__swhatbuf_r+0x24>

08004a20 <__smakebuf_r>:
 8004a20:	898b      	ldrh	r3, [r1, #12]
 8004a22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a24:	079d      	lsls	r5, r3, #30
 8004a26:	4606      	mov	r6, r0
 8004a28:	460c      	mov	r4, r1
 8004a2a:	d507      	bpl.n	8004a3c <__smakebuf_r+0x1c>
 8004a2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a30:	6023      	str	r3, [r4, #0]
 8004a32:	6123      	str	r3, [r4, #16]
 8004a34:	2301      	movs	r3, #1
 8004a36:	6163      	str	r3, [r4, #20]
 8004a38:	b002      	add	sp, #8
 8004a3a:	bd70      	pop	{r4, r5, r6, pc}
 8004a3c:	ab01      	add	r3, sp, #4
 8004a3e:	466a      	mov	r2, sp
 8004a40:	f7ff ffc8 	bl	80049d4 <__swhatbuf_r>
 8004a44:	9900      	ldr	r1, [sp, #0]
 8004a46:	4605      	mov	r5, r0
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f7ff fb0f 	bl	800406c <_malloc_r>
 8004a4e:	b948      	cbnz	r0, 8004a64 <__smakebuf_r+0x44>
 8004a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a54:	059a      	lsls	r2, r3, #22
 8004a56:	d4ef      	bmi.n	8004a38 <__smakebuf_r+0x18>
 8004a58:	f023 0303 	bic.w	r3, r3, #3
 8004a5c:	f043 0302 	orr.w	r3, r3, #2
 8004a60:	81a3      	strh	r3, [r4, #12]
 8004a62:	e7e3      	b.n	8004a2c <__smakebuf_r+0xc>
 8004a64:	89a3      	ldrh	r3, [r4, #12]
 8004a66:	6020      	str	r0, [r4, #0]
 8004a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a6c:	81a3      	strh	r3, [r4, #12]
 8004a6e:	9b00      	ldr	r3, [sp, #0]
 8004a70:	6163      	str	r3, [r4, #20]
 8004a72:	9b01      	ldr	r3, [sp, #4]
 8004a74:	6120      	str	r0, [r4, #16]
 8004a76:	b15b      	cbz	r3, 8004a90 <__smakebuf_r+0x70>
 8004a78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	f000 f81d 	bl	8004abc <_isatty_r>
 8004a82:	b128      	cbz	r0, 8004a90 <__smakebuf_r+0x70>
 8004a84:	89a3      	ldrh	r3, [r4, #12]
 8004a86:	f023 0303 	bic.w	r3, r3, #3
 8004a8a:	f043 0301 	orr.w	r3, r3, #1
 8004a8e:	81a3      	strh	r3, [r4, #12]
 8004a90:	89a3      	ldrh	r3, [r4, #12]
 8004a92:	431d      	orrs	r5, r3
 8004a94:	81a5      	strh	r5, [r4, #12]
 8004a96:	e7cf      	b.n	8004a38 <__smakebuf_r+0x18>

08004a98 <_fstat_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	4d07      	ldr	r5, [pc, #28]	; (8004ab8 <_fstat_r+0x20>)
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	602b      	str	r3, [r5, #0]
 8004aa6:	f7fd f8de 	bl	8001c66 <_fstat>
 8004aaa:	1c43      	adds	r3, r0, #1
 8004aac:	d102      	bne.n	8004ab4 <_fstat_r+0x1c>
 8004aae:	682b      	ldr	r3, [r5, #0]
 8004ab0:	b103      	cbz	r3, 8004ab4 <_fstat_r+0x1c>
 8004ab2:	6023      	str	r3, [r4, #0]
 8004ab4:	bd38      	pop	{r3, r4, r5, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20002828 	.word	0x20002828

08004abc <_isatty_r>:
 8004abc:	b538      	push	{r3, r4, r5, lr}
 8004abe:	4d06      	ldr	r5, [pc, #24]	; (8004ad8 <_isatty_r+0x1c>)
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	4608      	mov	r0, r1
 8004ac6:	602b      	str	r3, [r5, #0]
 8004ac8:	f7fd f8dd 	bl	8001c86 <_isatty>
 8004acc:	1c43      	adds	r3, r0, #1
 8004ace:	d102      	bne.n	8004ad6 <_isatty_r+0x1a>
 8004ad0:	682b      	ldr	r3, [r5, #0]
 8004ad2:	b103      	cbz	r3, 8004ad6 <_isatty_r+0x1a>
 8004ad4:	6023      	str	r3, [r4, #0]
 8004ad6:	bd38      	pop	{r3, r4, r5, pc}
 8004ad8:	20002828 	.word	0x20002828

08004adc <pow>:
 8004adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ade:	ed2d 8b02 	vpush	{d8}
 8004ae2:	eeb0 8a40 	vmov.f32	s16, s0
 8004ae6:	eef0 8a60 	vmov.f32	s17, s1
 8004aea:	ec55 4b11 	vmov	r4, r5, d1
 8004aee:	f000 f873 	bl	8004bd8 <__ieee754_pow>
 8004af2:	4622      	mov	r2, r4
 8004af4:	462b      	mov	r3, r5
 8004af6:	4620      	mov	r0, r4
 8004af8:	4629      	mov	r1, r5
 8004afa:	ec57 6b10 	vmov	r6, r7, d0
 8004afe:	f7fc f815 	bl	8000b2c <__aeabi_dcmpun>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	d13b      	bne.n	8004b7e <pow+0xa2>
 8004b06:	ec51 0b18 	vmov	r0, r1, d8
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f7fb ffdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b12:	b1b8      	cbz	r0, 8004b44 <pow+0x68>
 8004b14:	2200      	movs	r2, #0
 8004b16:	2300      	movs	r3, #0
 8004b18:	4620      	mov	r0, r4
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	f7fb ffd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b20:	2800      	cmp	r0, #0
 8004b22:	d146      	bne.n	8004bb2 <pow+0xd6>
 8004b24:	ec45 4b10 	vmov	d0, r4, r5
 8004b28:	f000 f848 	bl	8004bbc <finite>
 8004b2c:	b338      	cbz	r0, 8004b7e <pow+0xa2>
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2300      	movs	r3, #0
 8004b32:	4620      	mov	r0, r4
 8004b34:	4629      	mov	r1, r5
 8004b36:	f7fb ffd1 	bl	8000adc <__aeabi_dcmplt>
 8004b3a:	b300      	cbz	r0, 8004b7e <pow+0xa2>
 8004b3c:	f7ff f9fc 	bl	8003f38 <__errno>
 8004b40:	2322      	movs	r3, #34	; 0x22
 8004b42:	e01b      	b.n	8004b7c <pow+0xa0>
 8004b44:	ec47 6b10 	vmov	d0, r6, r7
 8004b48:	f000 f838 	bl	8004bbc <finite>
 8004b4c:	b9e0      	cbnz	r0, 8004b88 <pow+0xac>
 8004b4e:	eeb0 0a48 	vmov.f32	s0, s16
 8004b52:	eef0 0a68 	vmov.f32	s1, s17
 8004b56:	f000 f831 	bl	8004bbc <finite>
 8004b5a:	b1a8      	cbz	r0, 8004b88 <pow+0xac>
 8004b5c:	ec45 4b10 	vmov	d0, r4, r5
 8004b60:	f000 f82c 	bl	8004bbc <finite>
 8004b64:	b180      	cbz	r0, 8004b88 <pow+0xac>
 8004b66:	4632      	mov	r2, r6
 8004b68:	463b      	mov	r3, r7
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	f7fb ffdd 	bl	8000b2c <__aeabi_dcmpun>
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d0e2      	beq.n	8004b3c <pow+0x60>
 8004b76:	f7ff f9df 	bl	8003f38 <__errno>
 8004b7a:	2321      	movs	r3, #33	; 0x21
 8004b7c:	6003      	str	r3, [r0, #0]
 8004b7e:	ecbd 8b02 	vpop	{d8}
 8004b82:	ec47 6b10 	vmov	d0, r6, r7
 8004b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	4639      	mov	r1, r7
 8004b90:	f7fb ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	d0f2      	beq.n	8004b7e <pow+0xa2>
 8004b98:	eeb0 0a48 	vmov.f32	s0, s16
 8004b9c:	eef0 0a68 	vmov.f32	s1, s17
 8004ba0:	f000 f80c 	bl	8004bbc <finite>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	d0ea      	beq.n	8004b7e <pow+0xa2>
 8004ba8:	ec45 4b10 	vmov	d0, r4, r5
 8004bac:	f000 f806 	bl	8004bbc <finite>
 8004bb0:	e7c3      	b.n	8004b3a <pow+0x5e>
 8004bb2:	4f01      	ldr	r7, [pc, #4]	; (8004bb8 <pow+0xdc>)
 8004bb4:	2600      	movs	r6, #0
 8004bb6:	e7e2      	b.n	8004b7e <pow+0xa2>
 8004bb8:	3ff00000 	.word	0x3ff00000

08004bbc <finite>:
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	ed8d 0b00 	vstr	d0, [sp]
 8004bc2:	9801      	ldr	r0, [sp, #4]
 8004bc4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004bc8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004bcc:	0fc0      	lsrs	r0, r0, #31
 8004bce:	b002      	add	sp, #8
 8004bd0:	4770      	bx	lr
 8004bd2:	0000      	movs	r0, r0
 8004bd4:	0000      	movs	r0, r0
	...

08004bd8 <__ieee754_pow>:
 8004bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bdc:	ed2d 8b06 	vpush	{d8-d10}
 8004be0:	b089      	sub	sp, #36	; 0x24
 8004be2:	ed8d 1b00 	vstr	d1, [sp]
 8004be6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004bea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004bee:	ea58 0102 	orrs.w	r1, r8, r2
 8004bf2:	ec57 6b10 	vmov	r6, r7, d0
 8004bf6:	d115      	bne.n	8004c24 <__ieee754_pow+0x4c>
 8004bf8:	19b3      	adds	r3, r6, r6
 8004bfa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8004bfe:	4152      	adcs	r2, r2
 8004c00:	4299      	cmp	r1, r3
 8004c02:	4b89      	ldr	r3, [pc, #548]	; (8004e28 <__ieee754_pow+0x250>)
 8004c04:	4193      	sbcs	r3, r2
 8004c06:	f080 84d1 	bcs.w	80055ac <__ieee754_pow+0x9d4>
 8004c0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c0e:	4630      	mov	r0, r6
 8004c10:	4639      	mov	r1, r7
 8004c12:	f7fb fb3b 	bl	800028c <__adddf3>
 8004c16:	ec41 0b10 	vmov	d0, r0, r1
 8004c1a:	b009      	add	sp, #36	; 0x24
 8004c1c:	ecbd 8b06 	vpop	{d8-d10}
 8004c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c24:	4b81      	ldr	r3, [pc, #516]	; (8004e2c <__ieee754_pow+0x254>)
 8004c26:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004c2a:	429c      	cmp	r4, r3
 8004c2c:	ee10 aa10 	vmov	sl, s0
 8004c30:	463d      	mov	r5, r7
 8004c32:	dc06      	bgt.n	8004c42 <__ieee754_pow+0x6a>
 8004c34:	d101      	bne.n	8004c3a <__ieee754_pow+0x62>
 8004c36:	2e00      	cmp	r6, #0
 8004c38:	d1e7      	bne.n	8004c0a <__ieee754_pow+0x32>
 8004c3a:	4598      	cmp	r8, r3
 8004c3c:	dc01      	bgt.n	8004c42 <__ieee754_pow+0x6a>
 8004c3e:	d10f      	bne.n	8004c60 <__ieee754_pow+0x88>
 8004c40:	b172      	cbz	r2, 8004c60 <__ieee754_pow+0x88>
 8004c42:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004c46:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004c4a:	ea55 050a 	orrs.w	r5, r5, sl
 8004c4e:	d1dc      	bne.n	8004c0a <__ieee754_pow+0x32>
 8004c50:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004c54:	18db      	adds	r3, r3, r3
 8004c56:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004c5a:	4152      	adcs	r2, r2
 8004c5c:	429d      	cmp	r5, r3
 8004c5e:	e7d0      	b.n	8004c02 <__ieee754_pow+0x2a>
 8004c60:	2d00      	cmp	r5, #0
 8004c62:	da3b      	bge.n	8004cdc <__ieee754_pow+0x104>
 8004c64:	4b72      	ldr	r3, [pc, #456]	; (8004e30 <__ieee754_pow+0x258>)
 8004c66:	4598      	cmp	r8, r3
 8004c68:	dc51      	bgt.n	8004d0e <__ieee754_pow+0x136>
 8004c6a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004c6e:	4598      	cmp	r8, r3
 8004c70:	f340 84ab 	ble.w	80055ca <__ieee754_pow+0x9f2>
 8004c74:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004c78:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004c7c:	2b14      	cmp	r3, #20
 8004c7e:	dd0f      	ble.n	8004ca0 <__ieee754_pow+0xc8>
 8004c80:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004c84:	fa22 f103 	lsr.w	r1, r2, r3
 8004c88:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	f040 849c 	bne.w	80055ca <__ieee754_pow+0x9f2>
 8004c92:	f001 0101 	and.w	r1, r1, #1
 8004c96:	f1c1 0302 	rsb	r3, r1, #2
 8004c9a:	9304      	str	r3, [sp, #16]
 8004c9c:	b182      	cbz	r2, 8004cc0 <__ieee754_pow+0xe8>
 8004c9e:	e05f      	b.n	8004d60 <__ieee754_pow+0x188>
 8004ca0:	2a00      	cmp	r2, #0
 8004ca2:	d15b      	bne.n	8004d5c <__ieee754_pow+0x184>
 8004ca4:	f1c3 0314 	rsb	r3, r3, #20
 8004ca8:	fa48 f103 	asr.w	r1, r8, r3
 8004cac:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb0:	4543      	cmp	r3, r8
 8004cb2:	f040 8487 	bne.w	80055c4 <__ieee754_pow+0x9ec>
 8004cb6:	f001 0101 	and.w	r1, r1, #1
 8004cba:	f1c1 0302 	rsb	r3, r1, #2
 8004cbe:	9304      	str	r3, [sp, #16]
 8004cc0:	4b5c      	ldr	r3, [pc, #368]	; (8004e34 <__ieee754_pow+0x25c>)
 8004cc2:	4598      	cmp	r8, r3
 8004cc4:	d132      	bne.n	8004d2c <__ieee754_pow+0x154>
 8004cc6:	f1b9 0f00 	cmp.w	r9, #0
 8004cca:	f280 8477 	bge.w	80055bc <__ieee754_pow+0x9e4>
 8004cce:	4959      	ldr	r1, [pc, #356]	; (8004e34 <__ieee754_pow+0x25c>)
 8004cd0:	4632      	mov	r2, r6
 8004cd2:	463b      	mov	r3, r7
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	f7fb fdb9 	bl	800084c <__aeabi_ddiv>
 8004cda:	e79c      	b.n	8004c16 <__ieee754_pow+0x3e>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	9304      	str	r3, [sp, #16]
 8004ce0:	2a00      	cmp	r2, #0
 8004ce2:	d13d      	bne.n	8004d60 <__ieee754_pow+0x188>
 8004ce4:	4b51      	ldr	r3, [pc, #324]	; (8004e2c <__ieee754_pow+0x254>)
 8004ce6:	4598      	cmp	r8, r3
 8004ce8:	d1ea      	bne.n	8004cc0 <__ieee754_pow+0xe8>
 8004cea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004cee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004cf2:	ea53 030a 	orrs.w	r3, r3, sl
 8004cf6:	f000 8459 	beq.w	80055ac <__ieee754_pow+0x9d4>
 8004cfa:	4b4f      	ldr	r3, [pc, #316]	; (8004e38 <__ieee754_pow+0x260>)
 8004cfc:	429c      	cmp	r4, r3
 8004cfe:	dd08      	ble.n	8004d12 <__ieee754_pow+0x13a>
 8004d00:	f1b9 0f00 	cmp.w	r9, #0
 8004d04:	f2c0 8456 	blt.w	80055b4 <__ieee754_pow+0x9dc>
 8004d08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d0c:	e783      	b.n	8004c16 <__ieee754_pow+0x3e>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e7e5      	b.n	8004cde <__ieee754_pow+0x106>
 8004d12:	f1b9 0f00 	cmp.w	r9, #0
 8004d16:	f04f 0000 	mov.w	r0, #0
 8004d1a:	f04f 0100 	mov.w	r1, #0
 8004d1e:	f6bf af7a 	bge.w	8004c16 <__ieee754_pow+0x3e>
 8004d22:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004d26:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004d2a:	e774      	b.n	8004c16 <__ieee754_pow+0x3e>
 8004d2c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004d30:	d106      	bne.n	8004d40 <__ieee754_pow+0x168>
 8004d32:	4632      	mov	r2, r6
 8004d34:	463b      	mov	r3, r7
 8004d36:	4630      	mov	r0, r6
 8004d38:	4639      	mov	r1, r7
 8004d3a:	f7fb fc5d 	bl	80005f8 <__aeabi_dmul>
 8004d3e:	e76a      	b.n	8004c16 <__ieee754_pow+0x3e>
 8004d40:	4b3e      	ldr	r3, [pc, #248]	; (8004e3c <__ieee754_pow+0x264>)
 8004d42:	4599      	cmp	r9, r3
 8004d44:	d10c      	bne.n	8004d60 <__ieee754_pow+0x188>
 8004d46:	2d00      	cmp	r5, #0
 8004d48:	db0a      	blt.n	8004d60 <__ieee754_pow+0x188>
 8004d4a:	ec47 6b10 	vmov	d0, r6, r7
 8004d4e:	b009      	add	sp, #36	; 0x24
 8004d50:	ecbd 8b06 	vpop	{d8-d10}
 8004d54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d58:	f000 bd20 	b.w	800579c <__ieee754_sqrt>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	9304      	str	r3, [sp, #16]
 8004d60:	ec47 6b10 	vmov	d0, r6, r7
 8004d64:	f000 fc62 	bl	800562c <fabs>
 8004d68:	ec51 0b10 	vmov	r0, r1, d0
 8004d6c:	f1ba 0f00 	cmp.w	sl, #0
 8004d70:	d129      	bne.n	8004dc6 <__ieee754_pow+0x1ee>
 8004d72:	b124      	cbz	r4, 8004d7e <__ieee754_pow+0x1a6>
 8004d74:	4b2f      	ldr	r3, [pc, #188]	; (8004e34 <__ieee754_pow+0x25c>)
 8004d76:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d123      	bne.n	8004dc6 <__ieee754_pow+0x1ee>
 8004d7e:	f1b9 0f00 	cmp.w	r9, #0
 8004d82:	da05      	bge.n	8004d90 <__ieee754_pow+0x1b8>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	2000      	movs	r0, #0
 8004d8a:	492a      	ldr	r1, [pc, #168]	; (8004e34 <__ieee754_pow+0x25c>)
 8004d8c:	f7fb fd5e 	bl	800084c <__aeabi_ddiv>
 8004d90:	2d00      	cmp	r5, #0
 8004d92:	f6bf af40 	bge.w	8004c16 <__ieee754_pow+0x3e>
 8004d96:	9b04      	ldr	r3, [sp, #16]
 8004d98:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004d9c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004da0:	431c      	orrs	r4, r3
 8004da2:	d108      	bne.n	8004db6 <__ieee754_pow+0x1de>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4610      	mov	r0, r2
 8004daa:	4619      	mov	r1, r3
 8004dac:	f7fb fa6c 	bl	8000288 <__aeabi_dsub>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	e78f      	b.n	8004cd6 <__ieee754_pow+0xfe>
 8004db6:	9b04      	ldr	r3, [sp, #16]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	f47f af2c 	bne.w	8004c16 <__ieee754_pow+0x3e>
 8004dbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	e727      	b.n	8004c16 <__ieee754_pow+0x3e>
 8004dc6:	0feb      	lsrs	r3, r5, #31
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	9306      	str	r3, [sp, #24]
 8004dcc:	9a06      	ldr	r2, [sp, #24]
 8004dce:	9b04      	ldr	r3, [sp, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	d102      	bne.n	8004dda <__ieee754_pow+0x202>
 8004dd4:	4632      	mov	r2, r6
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	e7e6      	b.n	8004da8 <__ieee754_pow+0x1d0>
 8004dda:	4b19      	ldr	r3, [pc, #100]	; (8004e40 <__ieee754_pow+0x268>)
 8004ddc:	4598      	cmp	r8, r3
 8004dde:	f340 80fb 	ble.w	8004fd8 <__ieee754_pow+0x400>
 8004de2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004de6:	4598      	cmp	r8, r3
 8004de8:	4b13      	ldr	r3, [pc, #76]	; (8004e38 <__ieee754_pow+0x260>)
 8004dea:	dd0c      	ble.n	8004e06 <__ieee754_pow+0x22e>
 8004dec:	429c      	cmp	r4, r3
 8004dee:	dc0f      	bgt.n	8004e10 <__ieee754_pow+0x238>
 8004df0:	f1b9 0f00 	cmp.w	r9, #0
 8004df4:	da0f      	bge.n	8004e16 <__ieee754_pow+0x23e>
 8004df6:	2000      	movs	r0, #0
 8004df8:	b009      	add	sp, #36	; 0x24
 8004dfa:	ecbd 8b06 	vpop	{d8-d10}
 8004dfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e02:	f000 bcc2 	b.w	800578a <__math_oflow>
 8004e06:	429c      	cmp	r4, r3
 8004e08:	dbf2      	blt.n	8004df0 <__ieee754_pow+0x218>
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <__ieee754_pow+0x25c>)
 8004e0c:	429c      	cmp	r4, r3
 8004e0e:	dd19      	ble.n	8004e44 <__ieee754_pow+0x26c>
 8004e10:	f1b9 0f00 	cmp.w	r9, #0
 8004e14:	dcef      	bgt.n	8004df6 <__ieee754_pow+0x21e>
 8004e16:	2000      	movs	r0, #0
 8004e18:	b009      	add	sp, #36	; 0x24
 8004e1a:	ecbd 8b06 	vpop	{d8-d10}
 8004e1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e22:	f000 bca9 	b.w	8005778 <__math_uflow>
 8004e26:	bf00      	nop
 8004e28:	fff00000 	.word	0xfff00000
 8004e2c:	7ff00000 	.word	0x7ff00000
 8004e30:	433fffff 	.word	0x433fffff
 8004e34:	3ff00000 	.word	0x3ff00000
 8004e38:	3fefffff 	.word	0x3fefffff
 8004e3c:	3fe00000 	.word	0x3fe00000
 8004e40:	41e00000 	.word	0x41e00000
 8004e44:	4b60      	ldr	r3, [pc, #384]	; (8004fc8 <__ieee754_pow+0x3f0>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	f7fb fa1e 	bl	8000288 <__aeabi_dsub>
 8004e4c:	a354      	add	r3, pc, #336	; (adr r3, 8004fa0 <__ieee754_pow+0x3c8>)
 8004e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e52:	4604      	mov	r4, r0
 8004e54:	460d      	mov	r5, r1
 8004e56:	f7fb fbcf 	bl	80005f8 <__aeabi_dmul>
 8004e5a:	a353      	add	r3, pc, #332	; (adr r3, 8004fa8 <__ieee754_pow+0x3d0>)
 8004e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e60:	4606      	mov	r6, r0
 8004e62:	460f      	mov	r7, r1
 8004e64:	4620      	mov	r0, r4
 8004e66:	4629      	mov	r1, r5
 8004e68:	f7fb fbc6 	bl	80005f8 <__aeabi_dmul>
 8004e6c:	4b57      	ldr	r3, [pc, #348]	; (8004fcc <__ieee754_pow+0x3f4>)
 8004e6e:	4682      	mov	sl, r0
 8004e70:	468b      	mov	fp, r1
 8004e72:	2200      	movs	r2, #0
 8004e74:	4620      	mov	r0, r4
 8004e76:	4629      	mov	r1, r5
 8004e78:	f7fb fbbe 	bl	80005f8 <__aeabi_dmul>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	a14b      	add	r1, pc, #300	; (adr r1, 8004fb0 <__ieee754_pow+0x3d8>)
 8004e82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e86:	f7fb f9ff 	bl	8000288 <__aeabi_dsub>
 8004e8a:	4622      	mov	r2, r4
 8004e8c:	462b      	mov	r3, r5
 8004e8e:	f7fb fbb3 	bl	80005f8 <__aeabi_dmul>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	2000      	movs	r0, #0
 8004e98:	494d      	ldr	r1, [pc, #308]	; (8004fd0 <__ieee754_pow+0x3f8>)
 8004e9a:	f7fb f9f5 	bl	8000288 <__aeabi_dsub>
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	4680      	mov	r8, r0
 8004ea2:	4689      	mov	r9, r1
 8004ea4:	462b      	mov	r3, r5
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	f7fb fba5 	bl	80005f8 <__aeabi_dmul>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4640      	mov	r0, r8
 8004eb4:	4649      	mov	r1, r9
 8004eb6:	f7fb fb9f 	bl	80005f8 <__aeabi_dmul>
 8004eba:	a33f      	add	r3, pc, #252	; (adr r3, 8004fb8 <__ieee754_pow+0x3e0>)
 8004ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec0:	f7fb fb9a 	bl	80005f8 <__aeabi_dmul>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4650      	mov	r0, sl
 8004eca:	4659      	mov	r1, fp
 8004ecc:	f7fb f9dc 	bl	8000288 <__aeabi_dsub>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4680      	mov	r8, r0
 8004ed6:	4689      	mov	r9, r1
 8004ed8:	4630      	mov	r0, r6
 8004eda:	4639      	mov	r1, r7
 8004edc:	f7fb f9d6 	bl	800028c <__adddf3>
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	4632      	mov	r2, r6
 8004ee4:	463b      	mov	r3, r7
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	460d      	mov	r5, r1
 8004eea:	f7fb f9cd 	bl	8000288 <__aeabi_dsub>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4640      	mov	r0, r8
 8004ef4:	4649      	mov	r1, r9
 8004ef6:	f7fb f9c7 	bl	8000288 <__aeabi_dsub>
 8004efa:	9b04      	ldr	r3, [sp, #16]
 8004efc:	9a06      	ldr	r2, [sp, #24]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	4313      	orrs	r3, r2
 8004f02:	4682      	mov	sl, r0
 8004f04:	468b      	mov	fp, r1
 8004f06:	f040 81e7 	bne.w	80052d8 <__ieee754_pow+0x700>
 8004f0a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004fc0 <__ieee754_pow+0x3e8>
 8004f0e:	eeb0 8a47 	vmov.f32	s16, s14
 8004f12:	eef0 8a67 	vmov.f32	s17, s15
 8004f16:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004f1a:	2600      	movs	r6, #0
 8004f1c:	4632      	mov	r2, r6
 8004f1e:	463b      	mov	r3, r7
 8004f20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f24:	f7fb f9b0 	bl	8000288 <__aeabi_dsub>
 8004f28:	4622      	mov	r2, r4
 8004f2a:	462b      	mov	r3, r5
 8004f2c:	f7fb fb64 	bl	80005f8 <__aeabi_dmul>
 8004f30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f34:	4680      	mov	r8, r0
 8004f36:	4689      	mov	r9, r1
 8004f38:	4650      	mov	r0, sl
 8004f3a:	4659      	mov	r1, fp
 8004f3c:	f7fb fb5c 	bl	80005f8 <__aeabi_dmul>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4640      	mov	r0, r8
 8004f46:	4649      	mov	r1, r9
 8004f48:	f7fb f9a0 	bl	800028c <__adddf3>
 8004f4c:	4632      	mov	r2, r6
 8004f4e:	463b      	mov	r3, r7
 8004f50:	4680      	mov	r8, r0
 8004f52:	4689      	mov	r9, r1
 8004f54:	4620      	mov	r0, r4
 8004f56:	4629      	mov	r1, r5
 8004f58:	f7fb fb4e 	bl	80005f8 <__aeabi_dmul>
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4604      	mov	r4, r0
 8004f60:	460d      	mov	r5, r1
 8004f62:	4602      	mov	r2, r0
 8004f64:	4649      	mov	r1, r9
 8004f66:	4640      	mov	r0, r8
 8004f68:	f7fb f990 	bl	800028c <__adddf3>
 8004f6c:	4b19      	ldr	r3, [pc, #100]	; (8004fd4 <__ieee754_pow+0x3fc>)
 8004f6e:	4299      	cmp	r1, r3
 8004f70:	ec45 4b19 	vmov	d9, r4, r5
 8004f74:	4606      	mov	r6, r0
 8004f76:	460f      	mov	r7, r1
 8004f78:	468b      	mov	fp, r1
 8004f7a:	f340 82f0 	ble.w	800555e <__ieee754_pow+0x986>
 8004f7e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004f82:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004f86:	4303      	orrs	r3, r0
 8004f88:	f000 81e4 	beq.w	8005354 <__ieee754_pow+0x77c>
 8004f8c:	ec51 0b18 	vmov	r0, r1, d8
 8004f90:	2200      	movs	r2, #0
 8004f92:	2300      	movs	r3, #0
 8004f94:	f7fb fda2 	bl	8000adc <__aeabi_dcmplt>
 8004f98:	3800      	subs	r0, #0
 8004f9a:	bf18      	it	ne
 8004f9c:	2001      	movne	r0, #1
 8004f9e:	e72b      	b.n	8004df8 <__ieee754_pow+0x220>
 8004fa0:	60000000 	.word	0x60000000
 8004fa4:	3ff71547 	.word	0x3ff71547
 8004fa8:	f85ddf44 	.word	0xf85ddf44
 8004fac:	3e54ae0b 	.word	0x3e54ae0b
 8004fb0:	55555555 	.word	0x55555555
 8004fb4:	3fd55555 	.word	0x3fd55555
 8004fb8:	652b82fe 	.word	0x652b82fe
 8004fbc:	3ff71547 	.word	0x3ff71547
 8004fc0:	00000000 	.word	0x00000000
 8004fc4:	bff00000 	.word	0xbff00000
 8004fc8:	3ff00000 	.word	0x3ff00000
 8004fcc:	3fd00000 	.word	0x3fd00000
 8004fd0:	3fe00000 	.word	0x3fe00000
 8004fd4:	408fffff 	.word	0x408fffff
 8004fd8:	4bd5      	ldr	r3, [pc, #852]	; (8005330 <__ieee754_pow+0x758>)
 8004fda:	402b      	ands	r3, r5
 8004fdc:	2200      	movs	r2, #0
 8004fde:	b92b      	cbnz	r3, 8004fec <__ieee754_pow+0x414>
 8004fe0:	4bd4      	ldr	r3, [pc, #848]	; (8005334 <__ieee754_pow+0x75c>)
 8004fe2:	f7fb fb09 	bl	80005f8 <__aeabi_dmul>
 8004fe6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004fea:	460c      	mov	r4, r1
 8004fec:	1523      	asrs	r3, r4, #20
 8004fee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004ff2:	4413      	add	r3, r2
 8004ff4:	9305      	str	r3, [sp, #20]
 8004ff6:	4bd0      	ldr	r3, [pc, #832]	; (8005338 <__ieee754_pow+0x760>)
 8004ff8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004ffc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005000:	429c      	cmp	r4, r3
 8005002:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005006:	dd08      	ble.n	800501a <__ieee754_pow+0x442>
 8005008:	4bcc      	ldr	r3, [pc, #816]	; (800533c <__ieee754_pow+0x764>)
 800500a:	429c      	cmp	r4, r3
 800500c:	f340 8162 	ble.w	80052d4 <__ieee754_pow+0x6fc>
 8005010:	9b05      	ldr	r3, [sp, #20]
 8005012:	3301      	adds	r3, #1
 8005014:	9305      	str	r3, [sp, #20]
 8005016:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800501a:	2400      	movs	r4, #0
 800501c:	00e3      	lsls	r3, r4, #3
 800501e:	9307      	str	r3, [sp, #28]
 8005020:	4bc7      	ldr	r3, [pc, #796]	; (8005340 <__ieee754_pow+0x768>)
 8005022:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005026:	ed93 7b00 	vldr	d7, [r3]
 800502a:	4629      	mov	r1, r5
 800502c:	ec53 2b17 	vmov	r2, r3, d7
 8005030:	eeb0 9a47 	vmov.f32	s18, s14
 8005034:	eef0 9a67 	vmov.f32	s19, s15
 8005038:	4682      	mov	sl, r0
 800503a:	f7fb f925 	bl	8000288 <__aeabi_dsub>
 800503e:	4652      	mov	r2, sl
 8005040:	4606      	mov	r6, r0
 8005042:	460f      	mov	r7, r1
 8005044:	462b      	mov	r3, r5
 8005046:	ec51 0b19 	vmov	r0, r1, d9
 800504a:	f7fb f91f 	bl	800028c <__adddf3>
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	2000      	movs	r0, #0
 8005054:	49bb      	ldr	r1, [pc, #748]	; (8005344 <__ieee754_pow+0x76c>)
 8005056:	f7fb fbf9 	bl	800084c <__aeabi_ddiv>
 800505a:	ec41 0b1a 	vmov	d10, r0, r1
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4630      	mov	r0, r6
 8005064:	4639      	mov	r1, r7
 8005066:	f7fb fac7 	bl	80005f8 <__aeabi_dmul>
 800506a:	2300      	movs	r3, #0
 800506c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005070:	9302      	str	r3, [sp, #8]
 8005072:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005076:	46ab      	mov	fp, r5
 8005078:	106d      	asrs	r5, r5, #1
 800507a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800507e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005082:	ec41 0b18 	vmov	d8, r0, r1
 8005086:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800508a:	2200      	movs	r2, #0
 800508c:	4640      	mov	r0, r8
 800508e:	4649      	mov	r1, r9
 8005090:	4614      	mov	r4, r2
 8005092:	461d      	mov	r5, r3
 8005094:	f7fb fab0 	bl	80005f8 <__aeabi_dmul>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	4630      	mov	r0, r6
 800509e:	4639      	mov	r1, r7
 80050a0:	f7fb f8f2 	bl	8000288 <__aeabi_dsub>
 80050a4:	ec53 2b19 	vmov	r2, r3, d9
 80050a8:	4606      	mov	r6, r0
 80050aa:	460f      	mov	r7, r1
 80050ac:	4620      	mov	r0, r4
 80050ae:	4629      	mov	r1, r5
 80050b0:	f7fb f8ea 	bl	8000288 <__aeabi_dsub>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4650      	mov	r0, sl
 80050ba:	4659      	mov	r1, fp
 80050bc:	f7fb f8e4 	bl	8000288 <__aeabi_dsub>
 80050c0:	4642      	mov	r2, r8
 80050c2:	464b      	mov	r3, r9
 80050c4:	f7fb fa98 	bl	80005f8 <__aeabi_dmul>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4630      	mov	r0, r6
 80050ce:	4639      	mov	r1, r7
 80050d0:	f7fb f8da 	bl	8000288 <__aeabi_dsub>
 80050d4:	ec53 2b1a 	vmov	r2, r3, d10
 80050d8:	f7fb fa8e 	bl	80005f8 <__aeabi_dmul>
 80050dc:	ec53 2b18 	vmov	r2, r3, d8
 80050e0:	ec41 0b19 	vmov	d9, r0, r1
 80050e4:	ec51 0b18 	vmov	r0, r1, d8
 80050e8:	f7fb fa86 	bl	80005f8 <__aeabi_dmul>
 80050ec:	a37c      	add	r3, pc, #496	; (adr r3, 80052e0 <__ieee754_pow+0x708>)
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	4604      	mov	r4, r0
 80050f4:	460d      	mov	r5, r1
 80050f6:	f7fb fa7f 	bl	80005f8 <__aeabi_dmul>
 80050fa:	a37b      	add	r3, pc, #492	; (adr r3, 80052e8 <__ieee754_pow+0x710>)
 80050fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005100:	f7fb f8c4 	bl	800028c <__adddf3>
 8005104:	4622      	mov	r2, r4
 8005106:	462b      	mov	r3, r5
 8005108:	f7fb fa76 	bl	80005f8 <__aeabi_dmul>
 800510c:	a378      	add	r3, pc, #480	; (adr r3, 80052f0 <__ieee754_pow+0x718>)
 800510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005112:	f7fb f8bb 	bl	800028c <__adddf3>
 8005116:	4622      	mov	r2, r4
 8005118:	462b      	mov	r3, r5
 800511a:	f7fb fa6d 	bl	80005f8 <__aeabi_dmul>
 800511e:	a376      	add	r3, pc, #472	; (adr r3, 80052f8 <__ieee754_pow+0x720>)
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	f7fb f8b2 	bl	800028c <__adddf3>
 8005128:	4622      	mov	r2, r4
 800512a:	462b      	mov	r3, r5
 800512c:	f7fb fa64 	bl	80005f8 <__aeabi_dmul>
 8005130:	a373      	add	r3, pc, #460	; (adr r3, 8005300 <__ieee754_pow+0x728>)
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f7fb f8a9 	bl	800028c <__adddf3>
 800513a:	4622      	mov	r2, r4
 800513c:	462b      	mov	r3, r5
 800513e:	f7fb fa5b 	bl	80005f8 <__aeabi_dmul>
 8005142:	a371      	add	r3, pc, #452	; (adr r3, 8005308 <__ieee754_pow+0x730>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f7fb f8a0 	bl	800028c <__adddf3>
 800514c:	4622      	mov	r2, r4
 800514e:	4606      	mov	r6, r0
 8005150:	460f      	mov	r7, r1
 8005152:	462b      	mov	r3, r5
 8005154:	4620      	mov	r0, r4
 8005156:	4629      	mov	r1, r5
 8005158:	f7fb fa4e 	bl	80005f8 <__aeabi_dmul>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4630      	mov	r0, r6
 8005162:	4639      	mov	r1, r7
 8005164:	f7fb fa48 	bl	80005f8 <__aeabi_dmul>
 8005168:	4642      	mov	r2, r8
 800516a:	4604      	mov	r4, r0
 800516c:	460d      	mov	r5, r1
 800516e:	464b      	mov	r3, r9
 8005170:	ec51 0b18 	vmov	r0, r1, d8
 8005174:	f7fb f88a 	bl	800028c <__adddf3>
 8005178:	ec53 2b19 	vmov	r2, r3, d9
 800517c:	f7fb fa3c 	bl	80005f8 <__aeabi_dmul>
 8005180:	4622      	mov	r2, r4
 8005182:	462b      	mov	r3, r5
 8005184:	f7fb f882 	bl	800028c <__adddf3>
 8005188:	4642      	mov	r2, r8
 800518a:	4682      	mov	sl, r0
 800518c:	468b      	mov	fp, r1
 800518e:	464b      	mov	r3, r9
 8005190:	4640      	mov	r0, r8
 8005192:	4649      	mov	r1, r9
 8005194:	f7fb fa30 	bl	80005f8 <__aeabi_dmul>
 8005198:	4b6b      	ldr	r3, [pc, #428]	; (8005348 <__ieee754_pow+0x770>)
 800519a:	2200      	movs	r2, #0
 800519c:	4606      	mov	r6, r0
 800519e:	460f      	mov	r7, r1
 80051a0:	f7fb f874 	bl	800028c <__adddf3>
 80051a4:	4652      	mov	r2, sl
 80051a6:	465b      	mov	r3, fp
 80051a8:	f7fb f870 	bl	800028c <__adddf3>
 80051ac:	2000      	movs	r0, #0
 80051ae:	4604      	mov	r4, r0
 80051b0:	460d      	mov	r5, r1
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	4640      	mov	r0, r8
 80051b8:	4649      	mov	r1, r9
 80051ba:	f7fb fa1d 	bl	80005f8 <__aeabi_dmul>
 80051be:	4b62      	ldr	r3, [pc, #392]	; (8005348 <__ieee754_pow+0x770>)
 80051c0:	4680      	mov	r8, r0
 80051c2:	4689      	mov	r9, r1
 80051c4:	2200      	movs	r2, #0
 80051c6:	4620      	mov	r0, r4
 80051c8:	4629      	mov	r1, r5
 80051ca:	f7fb f85d 	bl	8000288 <__aeabi_dsub>
 80051ce:	4632      	mov	r2, r6
 80051d0:	463b      	mov	r3, r7
 80051d2:	f7fb f859 	bl	8000288 <__aeabi_dsub>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4650      	mov	r0, sl
 80051dc:	4659      	mov	r1, fp
 80051de:	f7fb f853 	bl	8000288 <__aeabi_dsub>
 80051e2:	ec53 2b18 	vmov	r2, r3, d8
 80051e6:	f7fb fa07 	bl	80005f8 <__aeabi_dmul>
 80051ea:	4622      	mov	r2, r4
 80051ec:	4606      	mov	r6, r0
 80051ee:	460f      	mov	r7, r1
 80051f0:	462b      	mov	r3, r5
 80051f2:	ec51 0b19 	vmov	r0, r1, d9
 80051f6:	f7fb f9ff 	bl	80005f8 <__aeabi_dmul>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4630      	mov	r0, r6
 8005200:	4639      	mov	r1, r7
 8005202:	f7fb f843 	bl	800028c <__adddf3>
 8005206:	4606      	mov	r6, r0
 8005208:	460f      	mov	r7, r1
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4640      	mov	r0, r8
 8005210:	4649      	mov	r1, r9
 8005212:	f7fb f83b 	bl	800028c <__adddf3>
 8005216:	a33e      	add	r3, pc, #248	; (adr r3, 8005310 <__ieee754_pow+0x738>)
 8005218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521c:	2000      	movs	r0, #0
 800521e:	4604      	mov	r4, r0
 8005220:	460d      	mov	r5, r1
 8005222:	f7fb f9e9 	bl	80005f8 <__aeabi_dmul>
 8005226:	4642      	mov	r2, r8
 8005228:	ec41 0b18 	vmov	d8, r0, r1
 800522c:	464b      	mov	r3, r9
 800522e:	4620      	mov	r0, r4
 8005230:	4629      	mov	r1, r5
 8005232:	f7fb f829 	bl	8000288 <__aeabi_dsub>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4630      	mov	r0, r6
 800523c:	4639      	mov	r1, r7
 800523e:	f7fb f823 	bl	8000288 <__aeabi_dsub>
 8005242:	a335      	add	r3, pc, #212	; (adr r3, 8005318 <__ieee754_pow+0x740>)
 8005244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005248:	f7fb f9d6 	bl	80005f8 <__aeabi_dmul>
 800524c:	a334      	add	r3, pc, #208	; (adr r3, 8005320 <__ieee754_pow+0x748>)
 800524e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005252:	4606      	mov	r6, r0
 8005254:	460f      	mov	r7, r1
 8005256:	4620      	mov	r0, r4
 8005258:	4629      	mov	r1, r5
 800525a:	f7fb f9cd 	bl	80005f8 <__aeabi_dmul>
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	4630      	mov	r0, r6
 8005264:	4639      	mov	r1, r7
 8005266:	f7fb f811 	bl	800028c <__adddf3>
 800526a:	9a07      	ldr	r2, [sp, #28]
 800526c:	4b37      	ldr	r3, [pc, #220]	; (800534c <__ieee754_pow+0x774>)
 800526e:	4413      	add	r3, r2
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	f7fb f80a 	bl	800028c <__adddf3>
 8005278:	4682      	mov	sl, r0
 800527a:	9805      	ldr	r0, [sp, #20]
 800527c:	468b      	mov	fp, r1
 800527e:	f7fb f951 	bl	8000524 <__aeabi_i2d>
 8005282:	9a07      	ldr	r2, [sp, #28]
 8005284:	4b32      	ldr	r3, [pc, #200]	; (8005350 <__ieee754_pow+0x778>)
 8005286:	4413      	add	r3, r2
 8005288:	e9d3 8900 	ldrd	r8, r9, [r3]
 800528c:	4606      	mov	r6, r0
 800528e:	460f      	mov	r7, r1
 8005290:	4652      	mov	r2, sl
 8005292:	465b      	mov	r3, fp
 8005294:	ec51 0b18 	vmov	r0, r1, d8
 8005298:	f7fa fff8 	bl	800028c <__adddf3>
 800529c:	4642      	mov	r2, r8
 800529e:	464b      	mov	r3, r9
 80052a0:	f7fa fff4 	bl	800028c <__adddf3>
 80052a4:	4632      	mov	r2, r6
 80052a6:	463b      	mov	r3, r7
 80052a8:	f7fa fff0 	bl	800028c <__adddf3>
 80052ac:	2000      	movs	r0, #0
 80052ae:	4632      	mov	r2, r6
 80052b0:	463b      	mov	r3, r7
 80052b2:	4604      	mov	r4, r0
 80052b4:	460d      	mov	r5, r1
 80052b6:	f7fa ffe7 	bl	8000288 <__aeabi_dsub>
 80052ba:	4642      	mov	r2, r8
 80052bc:	464b      	mov	r3, r9
 80052be:	f7fa ffe3 	bl	8000288 <__aeabi_dsub>
 80052c2:	ec53 2b18 	vmov	r2, r3, d8
 80052c6:	f7fa ffdf 	bl	8000288 <__aeabi_dsub>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	4650      	mov	r0, sl
 80052d0:	4659      	mov	r1, fp
 80052d2:	e610      	b.n	8004ef6 <__ieee754_pow+0x31e>
 80052d4:	2401      	movs	r4, #1
 80052d6:	e6a1      	b.n	800501c <__ieee754_pow+0x444>
 80052d8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005328 <__ieee754_pow+0x750>
 80052dc:	e617      	b.n	8004f0e <__ieee754_pow+0x336>
 80052de:	bf00      	nop
 80052e0:	4a454eef 	.word	0x4a454eef
 80052e4:	3fca7e28 	.word	0x3fca7e28
 80052e8:	93c9db65 	.word	0x93c9db65
 80052ec:	3fcd864a 	.word	0x3fcd864a
 80052f0:	a91d4101 	.word	0xa91d4101
 80052f4:	3fd17460 	.word	0x3fd17460
 80052f8:	518f264d 	.word	0x518f264d
 80052fc:	3fd55555 	.word	0x3fd55555
 8005300:	db6fabff 	.word	0xdb6fabff
 8005304:	3fdb6db6 	.word	0x3fdb6db6
 8005308:	33333303 	.word	0x33333303
 800530c:	3fe33333 	.word	0x3fe33333
 8005310:	e0000000 	.word	0xe0000000
 8005314:	3feec709 	.word	0x3feec709
 8005318:	dc3a03fd 	.word	0xdc3a03fd
 800531c:	3feec709 	.word	0x3feec709
 8005320:	145b01f5 	.word	0x145b01f5
 8005324:	be3e2fe0 	.word	0xbe3e2fe0
 8005328:	00000000 	.word	0x00000000
 800532c:	3ff00000 	.word	0x3ff00000
 8005330:	7ff00000 	.word	0x7ff00000
 8005334:	43400000 	.word	0x43400000
 8005338:	0003988e 	.word	0x0003988e
 800533c:	000bb679 	.word	0x000bb679
 8005340:	080059c0 	.word	0x080059c0
 8005344:	3ff00000 	.word	0x3ff00000
 8005348:	40080000 	.word	0x40080000
 800534c:	080059e0 	.word	0x080059e0
 8005350:	080059d0 	.word	0x080059d0
 8005354:	a3b3      	add	r3, pc, #716	; (adr r3, 8005624 <__ieee754_pow+0xa4c>)
 8005356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535a:	4640      	mov	r0, r8
 800535c:	4649      	mov	r1, r9
 800535e:	f7fa ff95 	bl	800028c <__adddf3>
 8005362:	4622      	mov	r2, r4
 8005364:	ec41 0b1a 	vmov	d10, r0, r1
 8005368:	462b      	mov	r3, r5
 800536a:	4630      	mov	r0, r6
 800536c:	4639      	mov	r1, r7
 800536e:	f7fa ff8b 	bl	8000288 <__aeabi_dsub>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	ec51 0b1a 	vmov	r0, r1, d10
 800537a:	f7fb fbcd 	bl	8000b18 <__aeabi_dcmpgt>
 800537e:	2800      	cmp	r0, #0
 8005380:	f47f ae04 	bne.w	8004f8c <__ieee754_pow+0x3b4>
 8005384:	4aa2      	ldr	r2, [pc, #648]	; (8005610 <__ieee754_pow+0xa38>)
 8005386:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800538a:	4293      	cmp	r3, r2
 800538c:	f340 8107 	ble.w	800559e <__ieee754_pow+0x9c6>
 8005390:	151b      	asrs	r3, r3, #20
 8005392:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005396:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800539a:	fa4a fa03 	asr.w	sl, sl, r3
 800539e:	44da      	add	sl, fp
 80053a0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80053a4:	489b      	ldr	r0, [pc, #620]	; (8005614 <__ieee754_pow+0xa3c>)
 80053a6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80053aa:	4108      	asrs	r0, r1
 80053ac:	ea00 030a 	and.w	r3, r0, sl
 80053b0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80053b4:	f1c1 0114 	rsb	r1, r1, #20
 80053b8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80053bc:	fa4a fa01 	asr.w	sl, sl, r1
 80053c0:	f1bb 0f00 	cmp.w	fp, #0
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	4620      	mov	r0, r4
 80053ca:	4629      	mov	r1, r5
 80053cc:	bfb8      	it	lt
 80053ce:	f1ca 0a00 	rsblt	sl, sl, #0
 80053d2:	f7fa ff59 	bl	8000288 <__aeabi_dsub>
 80053d6:	ec41 0b19 	vmov	d9, r0, r1
 80053da:	4642      	mov	r2, r8
 80053dc:	464b      	mov	r3, r9
 80053de:	ec51 0b19 	vmov	r0, r1, d9
 80053e2:	f7fa ff53 	bl	800028c <__adddf3>
 80053e6:	a37a      	add	r3, pc, #488	; (adr r3, 80055d0 <__ieee754_pow+0x9f8>)
 80053e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ec:	2000      	movs	r0, #0
 80053ee:	4604      	mov	r4, r0
 80053f0:	460d      	mov	r5, r1
 80053f2:	f7fb f901 	bl	80005f8 <__aeabi_dmul>
 80053f6:	ec53 2b19 	vmov	r2, r3, d9
 80053fa:	4606      	mov	r6, r0
 80053fc:	460f      	mov	r7, r1
 80053fe:	4620      	mov	r0, r4
 8005400:	4629      	mov	r1, r5
 8005402:	f7fa ff41 	bl	8000288 <__aeabi_dsub>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4640      	mov	r0, r8
 800540c:	4649      	mov	r1, r9
 800540e:	f7fa ff3b 	bl	8000288 <__aeabi_dsub>
 8005412:	a371      	add	r3, pc, #452	; (adr r3, 80055d8 <__ieee754_pow+0xa00>)
 8005414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005418:	f7fb f8ee 	bl	80005f8 <__aeabi_dmul>
 800541c:	a370      	add	r3, pc, #448	; (adr r3, 80055e0 <__ieee754_pow+0xa08>)
 800541e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005422:	4680      	mov	r8, r0
 8005424:	4689      	mov	r9, r1
 8005426:	4620      	mov	r0, r4
 8005428:	4629      	mov	r1, r5
 800542a:	f7fb f8e5 	bl	80005f8 <__aeabi_dmul>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	4640      	mov	r0, r8
 8005434:	4649      	mov	r1, r9
 8005436:	f7fa ff29 	bl	800028c <__adddf3>
 800543a:	4604      	mov	r4, r0
 800543c:	460d      	mov	r5, r1
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	4630      	mov	r0, r6
 8005444:	4639      	mov	r1, r7
 8005446:	f7fa ff21 	bl	800028c <__adddf3>
 800544a:	4632      	mov	r2, r6
 800544c:	463b      	mov	r3, r7
 800544e:	4680      	mov	r8, r0
 8005450:	4689      	mov	r9, r1
 8005452:	f7fa ff19 	bl	8000288 <__aeabi_dsub>
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
 800545a:	4620      	mov	r0, r4
 800545c:	4629      	mov	r1, r5
 800545e:	f7fa ff13 	bl	8000288 <__aeabi_dsub>
 8005462:	4642      	mov	r2, r8
 8005464:	4606      	mov	r6, r0
 8005466:	460f      	mov	r7, r1
 8005468:	464b      	mov	r3, r9
 800546a:	4640      	mov	r0, r8
 800546c:	4649      	mov	r1, r9
 800546e:	f7fb f8c3 	bl	80005f8 <__aeabi_dmul>
 8005472:	a35d      	add	r3, pc, #372	; (adr r3, 80055e8 <__ieee754_pow+0xa10>)
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	4604      	mov	r4, r0
 800547a:	460d      	mov	r5, r1
 800547c:	f7fb f8bc 	bl	80005f8 <__aeabi_dmul>
 8005480:	a35b      	add	r3, pc, #364	; (adr r3, 80055f0 <__ieee754_pow+0xa18>)
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	f7fa feff 	bl	8000288 <__aeabi_dsub>
 800548a:	4622      	mov	r2, r4
 800548c:	462b      	mov	r3, r5
 800548e:	f7fb f8b3 	bl	80005f8 <__aeabi_dmul>
 8005492:	a359      	add	r3, pc, #356	; (adr r3, 80055f8 <__ieee754_pow+0xa20>)
 8005494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005498:	f7fa fef8 	bl	800028c <__adddf3>
 800549c:	4622      	mov	r2, r4
 800549e:	462b      	mov	r3, r5
 80054a0:	f7fb f8aa 	bl	80005f8 <__aeabi_dmul>
 80054a4:	a356      	add	r3, pc, #344	; (adr r3, 8005600 <__ieee754_pow+0xa28>)
 80054a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054aa:	f7fa feed 	bl	8000288 <__aeabi_dsub>
 80054ae:	4622      	mov	r2, r4
 80054b0:	462b      	mov	r3, r5
 80054b2:	f7fb f8a1 	bl	80005f8 <__aeabi_dmul>
 80054b6:	a354      	add	r3, pc, #336	; (adr r3, 8005608 <__ieee754_pow+0xa30>)
 80054b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054bc:	f7fa fee6 	bl	800028c <__adddf3>
 80054c0:	4622      	mov	r2, r4
 80054c2:	462b      	mov	r3, r5
 80054c4:	f7fb f898 	bl	80005f8 <__aeabi_dmul>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4640      	mov	r0, r8
 80054ce:	4649      	mov	r1, r9
 80054d0:	f7fa feda 	bl	8000288 <__aeabi_dsub>
 80054d4:	4604      	mov	r4, r0
 80054d6:	460d      	mov	r5, r1
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	4640      	mov	r0, r8
 80054de:	4649      	mov	r1, r9
 80054e0:	f7fb f88a 	bl	80005f8 <__aeabi_dmul>
 80054e4:	2200      	movs	r2, #0
 80054e6:	ec41 0b19 	vmov	d9, r0, r1
 80054ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054ee:	4620      	mov	r0, r4
 80054f0:	4629      	mov	r1, r5
 80054f2:	f7fa fec9 	bl	8000288 <__aeabi_dsub>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	ec51 0b19 	vmov	r0, r1, d9
 80054fe:	f7fb f9a5 	bl	800084c <__aeabi_ddiv>
 8005502:	4632      	mov	r2, r6
 8005504:	4604      	mov	r4, r0
 8005506:	460d      	mov	r5, r1
 8005508:	463b      	mov	r3, r7
 800550a:	4640      	mov	r0, r8
 800550c:	4649      	mov	r1, r9
 800550e:	f7fb f873 	bl	80005f8 <__aeabi_dmul>
 8005512:	4632      	mov	r2, r6
 8005514:	463b      	mov	r3, r7
 8005516:	f7fa feb9 	bl	800028c <__adddf3>
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	4620      	mov	r0, r4
 8005520:	4629      	mov	r1, r5
 8005522:	f7fa feb1 	bl	8000288 <__aeabi_dsub>
 8005526:	4642      	mov	r2, r8
 8005528:	464b      	mov	r3, r9
 800552a:	f7fa fead 	bl	8000288 <__aeabi_dsub>
 800552e:	460b      	mov	r3, r1
 8005530:	4602      	mov	r2, r0
 8005532:	4939      	ldr	r1, [pc, #228]	; (8005618 <__ieee754_pow+0xa40>)
 8005534:	2000      	movs	r0, #0
 8005536:	f7fa fea7 	bl	8000288 <__aeabi_dsub>
 800553a:	ec41 0b10 	vmov	d0, r0, r1
 800553e:	ee10 3a90 	vmov	r3, s1
 8005542:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800554a:	da2b      	bge.n	80055a4 <__ieee754_pow+0x9cc>
 800554c:	4650      	mov	r0, sl
 800554e:	f000 f877 	bl	8005640 <scalbn>
 8005552:	ec51 0b10 	vmov	r0, r1, d0
 8005556:	ec53 2b18 	vmov	r2, r3, d8
 800555a:	f7ff bbee 	b.w	8004d3a <__ieee754_pow+0x162>
 800555e:	4b2f      	ldr	r3, [pc, #188]	; (800561c <__ieee754_pow+0xa44>)
 8005560:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005564:	429e      	cmp	r6, r3
 8005566:	f77f af0d 	ble.w	8005384 <__ieee754_pow+0x7ac>
 800556a:	4b2d      	ldr	r3, [pc, #180]	; (8005620 <__ieee754_pow+0xa48>)
 800556c:	440b      	add	r3, r1
 800556e:	4303      	orrs	r3, r0
 8005570:	d009      	beq.n	8005586 <__ieee754_pow+0x9ae>
 8005572:	ec51 0b18 	vmov	r0, r1, d8
 8005576:	2200      	movs	r2, #0
 8005578:	2300      	movs	r3, #0
 800557a:	f7fb faaf 	bl	8000adc <__aeabi_dcmplt>
 800557e:	3800      	subs	r0, #0
 8005580:	bf18      	it	ne
 8005582:	2001      	movne	r0, #1
 8005584:	e448      	b.n	8004e18 <__ieee754_pow+0x240>
 8005586:	4622      	mov	r2, r4
 8005588:	462b      	mov	r3, r5
 800558a:	f7fa fe7d 	bl	8000288 <__aeabi_dsub>
 800558e:	4642      	mov	r2, r8
 8005590:	464b      	mov	r3, r9
 8005592:	f7fb fab7 	bl	8000b04 <__aeabi_dcmpge>
 8005596:	2800      	cmp	r0, #0
 8005598:	f43f aef4 	beq.w	8005384 <__ieee754_pow+0x7ac>
 800559c:	e7e9      	b.n	8005572 <__ieee754_pow+0x99a>
 800559e:	f04f 0a00 	mov.w	sl, #0
 80055a2:	e71a      	b.n	80053da <__ieee754_pow+0x802>
 80055a4:	ec51 0b10 	vmov	r0, r1, d0
 80055a8:	4619      	mov	r1, r3
 80055aa:	e7d4      	b.n	8005556 <__ieee754_pow+0x97e>
 80055ac:	491a      	ldr	r1, [pc, #104]	; (8005618 <__ieee754_pow+0xa40>)
 80055ae:	2000      	movs	r0, #0
 80055b0:	f7ff bb31 	b.w	8004c16 <__ieee754_pow+0x3e>
 80055b4:	2000      	movs	r0, #0
 80055b6:	2100      	movs	r1, #0
 80055b8:	f7ff bb2d 	b.w	8004c16 <__ieee754_pow+0x3e>
 80055bc:	4630      	mov	r0, r6
 80055be:	4639      	mov	r1, r7
 80055c0:	f7ff bb29 	b.w	8004c16 <__ieee754_pow+0x3e>
 80055c4:	9204      	str	r2, [sp, #16]
 80055c6:	f7ff bb7b 	b.w	8004cc0 <__ieee754_pow+0xe8>
 80055ca:	2300      	movs	r3, #0
 80055cc:	f7ff bb65 	b.w	8004c9a <__ieee754_pow+0xc2>
 80055d0:	00000000 	.word	0x00000000
 80055d4:	3fe62e43 	.word	0x3fe62e43
 80055d8:	fefa39ef 	.word	0xfefa39ef
 80055dc:	3fe62e42 	.word	0x3fe62e42
 80055e0:	0ca86c39 	.word	0x0ca86c39
 80055e4:	be205c61 	.word	0xbe205c61
 80055e8:	72bea4d0 	.word	0x72bea4d0
 80055ec:	3e663769 	.word	0x3e663769
 80055f0:	c5d26bf1 	.word	0xc5d26bf1
 80055f4:	3ebbbd41 	.word	0x3ebbbd41
 80055f8:	af25de2c 	.word	0xaf25de2c
 80055fc:	3f11566a 	.word	0x3f11566a
 8005600:	16bebd93 	.word	0x16bebd93
 8005604:	3f66c16c 	.word	0x3f66c16c
 8005608:	5555553e 	.word	0x5555553e
 800560c:	3fc55555 	.word	0x3fc55555
 8005610:	3fe00000 	.word	0x3fe00000
 8005614:	fff00000 	.word	0xfff00000
 8005618:	3ff00000 	.word	0x3ff00000
 800561c:	4090cbff 	.word	0x4090cbff
 8005620:	3f6f3400 	.word	0x3f6f3400
 8005624:	652b82fe 	.word	0x652b82fe
 8005628:	3c971547 	.word	0x3c971547

0800562c <fabs>:
 800562c:	ec51 0b10 	vmov	r0, r1, d0
 8005630:	ee10 2a10 	vmov	r2, s0
 8005634:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005638:	ec43 2b10 	vmov	d0, r2, r3
 800563c:	4770      	bx	lr
	...

08005640 <scalbn>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	ec55 4b10 	vmov	r4, r5, d0
 8005646:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800564a:	4606      	mov	r6, r0
 800564c:	462b      	mov	r3, r5
 800564e:	b999      	cbnz	r1, 8005678 <scalbn+0x38>
 8005650:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005654:	4323      	orrs	r3, r4
 8005656:	d03f      	beq.n	80056d8 <scalbn+0x98>
 8005658:	4b35      	ldr	r3, [pc, #212]	; (8005730 <scalbn+0xf0>)
 800565a:	4629      	mov	r1, r5
 800565c:	ee10 0a10 	vmov	r0, s0
 8005660:	2200      	movs	r2, #0
 8005662:	f7fa ffc9 	bl	80005f8 <__aeabi_dmul>
 8005666:	4b33      	ldr	r3, [pc, #204]	; (8005734 <scalbn+0xf4>)
 8005668:	429e      	cmp	r6, r3
 800566a:	4604      	mov	r4, r0
 800566c:	460d      	mov	r5, r1
 800566e:	da10      	bge.n	8005692 <scalbn+0x52>
 8005670:	a327      	add	r3, pc, #156	; (adr r3, 8005710 <scalbn+0xd0>)
 8005672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005676:	e01f      	b.n	80056b8 <scalbn+0x78>
 8005678:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800567c:	4291      	cmp	r1, r2
 800567e:	d10c      	bne.n	800569a <scalbn+0x5a>
 8005680:	ee10 2a10 	vmov	r2, s0
 8005684:	4620      	mov	r0, r4
 8005686:	4629      	mov	r1, r5
 8005688:	f7fa fe00 	bl	800028c <__adddf3>
 800568c:	4604      	mov	r4, r0
 800568e:	460d      	mov	r5, r1
 8005690:	e022      	b.n	80056d8 <scalbn+0x98>
 8005692:	460b      	mov	r3, r1
 8005694:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005698:	3936      	subs	r1, #54	; 0x36
 800569a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800569e:	4296      	cmp	r6, r2
 80056a0:	dd0d      	ble.n	80056be <scalbn+0x7e>
 80056a2:	2d00      	cmp	r5, #0
 80056a4:	a11c      	add	r1, pc, #112	; (adr r1, 8005718 <scalbn+0xd8>)
 80056a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056aa:	da02      	bge.n	80056b2 <scalbn+0x72>
 80056ac:	a11c      	add	r1, pc, #112	; (adr r1, 8005720 <scalbn+0xe0>)
 80056ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056b2:	a319      	add	r3, pc, #100	; (adr r3, 8005718 <scalbn+0xd8>)
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	f7fa ff9e 	bl	80005f8 <__aeabi_dmul>
 80056bc:	e7e6      	b.n	800568c <scalbn+0x4c>
 80056be:	1872      	adds	r2, r6, r1
 80056c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80056c4:	428a      	cmp	r2, r1
 80056c6:	dcec      	bgt.n	80056a2 <scalbn+0x62>
 80056c8:	2a00      	cmp	r2, #0
 80056ca:	dd08      	ble.n	80056de <scalbn+0x9e>
 80056cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80056d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80056d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80056d8:	ec45 4b10 	vmov	d0, r4, r5
 80056dc:	bd70      	pop	{r4, r5, r6, pc}
 80056de:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80056e2:	da08      	bge.n	80056f6 <scalbn+0xb6>
 80056e4:	2d00      	cmp	r5, #0
 80056e6:	a10a      	add	r1, pc, #40	; (adr r1, 8005710 <scalbn+0xd0>)
 80056e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056ec:	dac0      	bge.n	8005670 <scalbn+0x30>
 80056ee:	a10e      	add	r1, pc, #56	; (adr r1, 8005728 <scalbn+0xe8>)
 80056f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056f4:	e7bc      	b.n	8005670 <scalbn+0x30>
 80056f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80056fa:	3236      	adds	r2, #54	; 0x36
 80056fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005700:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005704:	4620      	mov	r0, r4
 8005706:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <scalbn+0xf8>)
 8005708:	2200      	movs	r2, #0
 800570a:	e7d5      	b.n	80056b8 <scalbn+0x78>
 800570c:	f3af 8000 	nop.w
 8005710:	c2f8f359 	.word	0xc2f8f359
 8005714:	01a56e1f 	.word	0x01a56e1f
 8005718:	8800759c 	.word	0x8800759c
 800571c:	7e37e43c 	.word	0x7e37e43c
 8005720:	8800759c 	.word	0x8800759c
 8005724:	fe37e43c 	.word	0xfe37e43c
 8005728:	c2f8f359 	.word	0xc2f8f359
 800572c:	81a56e1f 	.word	0x81a56e1f
 8005730:	43500000 	.word	0x43500000
 8005734:	ffff3cb0 	.word	0xffff3cb0
 8005738:	3c900000 	.word	0x3c900000

0800573c <with_errno>:
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	4604      	mov	r4, r0
 8005740:	460d      	mov	r5, r1
 8005742:	4616      	mov	r6, r2
 8005744:	f7fe fbf8 	bl	8003f38 <__errno>
 8005748:	4629      	mov	r1, r5
 800574a:	6006      	str	r6, [r0, #0]
 800574c:	4620      	mov	r0, r4
 800574e:	bd70      	pop	{r4, r5, r6, pc}

08005750 <xflow>:
 8005750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005752:	4614      	mov	r4, r2
 8005754:	461d      	mov	r5, r3
 8005756:	b108      	cbz	r0, 800575c <xflow+0xc>
 8005758:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800575c:	e9cd 2300 	strd	r2, r3, [sp]
 8005760:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005764:	4620      	mov	r0, r4
 8005766:	4629      	mov	r1, r5
 8005768:	f7fa ff46 	bl	80005f8 <__aeabi_dmul>
 800576c:	2222      	movs	r2, #34	; 0x22
 800576e:	b003      	add	sp, #12
 8005770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005774:	f7ff bfe2 	b.w	800573c <with_errno>

08005778 <__math_uflow>:
 8005778:	b508      	push	{r3, lr}
 800577a:	2200      	movs	r2, #0
 800577c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005780:	f7ff ffe6 	bl	8005750 <xflow>
 8005784:	ec41 0b10 	vmov	d0, r0, r1
 8005788:	bd08      	pop	{r3, pc}

0800578a <__math_oflow>:
 800578a:	b508      	push	{r3, lr}
 800578c:	2200      	movs	r2, #0
 800578e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005792:	f7ff ffdd 	bl	8005750 <xflow>
 8005796:	ec41 0b10 	vmov	d0, r0, r1
 800579a:	bd08      	pop	{r3, pc}

0800579c <__ieee754_sqrt>:
 800579c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a0:	ec55 4b10 	vmov	r4, r5, d0
 80057a4:	4e67      	ldr	r6, [pc, #412]	; (8005944 <__ieee754_sqrt+0x1a8>)
 80057a6:	43ae      	bics	r6, r5
 80057a8:	ee10 0a10 	vmov	r0, s0
 80057ac:	ee10 2a10 	vmov	r2, s0
 80057b0:	4629      	mov	r1, r5
 80057b2:	462b      	mov	r3, r5
 80057b4:	d10d      	bne.n	80057d2 <__ieee754_sqrt+0x36>
 80057b6:	f7fa ff1f 	bl	80005f8 <__aeabi_dmul>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4620      	mov	r0, r4
 80057c0:	4629      	mov	r1, r5
 80057c2:	f7fa fd63 	bl	800028c <__adddf3>
 80057c6:	4604      	mov	r4, r0
 80057c8:	460d      	mov	r5, r1
 80057ca:	ec45 4b10 	vmov	d0, r4, r5
 80057ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d2:	2d00      	cmp	r5, #0
 80057d4:	dc0b      	bgt.n	80057ee <__ieee754_sqrt+0x52>
 80057d6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80057da:	4326      	orrs	r6, r4
 80057dc:	d0f5      	beq.n	80057ca <__ieee754_sqrt+0x2e>
 80057de:	b135      	cbz	r5, 80057ee <__ieee754_sqrt+0x52>
 80057e0:	f7fa fd52 	bl	8000288 <__aeabi_dsub>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	f7fb f830 	bl	800084c <__aeabi_ddiv>
 80057ec:	e7eb      	b.n	80057c6 <__ieee754_sqrt+0x2a>
 80057ee:	1509      	asrs	r1, r1, #20
 80057f0:	f000 808d 	beq.w	800590e <__ieee754_sqrt+0x172>
 80057f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057f8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80057fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005800:	07c9      	lsls	r1, r1, #31
 8005802:	bf5c      	itt	pl
 8005804:	005b      	lslpl	r3, r3, #1
 8005806:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800580a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800580e:	bf58      	it	pl
 8005810:	0052      	lslpl	r2, r2, #1
 8005812:	2500      	movs	r5, #0
 8005814:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005818:	1076      	asrs	r6, r6, #1
 800581a:	0052      	lsls	r2, r2, #1
 800581c:	f04f 0e16 	mov.w	lr, #22
 8005820:	46ac      	mov	ip, r5
 8005822:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005826:	eb0c 0001 	add.w	r0, ip, r1
 800582a:	4298      	cmp	r0, r3
 800582c:	bfde      	ittt	le
 800582e:	1a1b      	suble	r3, r3, r0
 8005830:	eb00 0c01 	addle.w	ip, r0, r1
 8005834:	186d      	addle	r5, r5, r1
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	f1be 0e01 	subs.w	lr, lr, #1
 800583c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005840:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005844:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005848:	d1ed      	bne.n	8005826 <__ieee754_sqrt+0x8a>
 800584a:	4674      	mov	r4, lr
 800584c:	2720      	movs	r7, #32
 800584e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005852:	4563      	cmp	r3, ip
 8005854:	eb01 000e 	add.w	r0, r1, lr
 8005858:	dc02      	bgt.n	8005860 <__ieee754_sqrt+0xc4>
 800585a:	d113      	bne.n	8005884 <__ieee754_sqrt+0xe8>
 800585c:	4290      	cmp	r0, r2
 800585e:	d811      	bhi.n	8005884 <__ieee754_sqrt+0xe8>
 8005860:	2800      	cmp	r0, #0
 8005862:	eb00 0e01 	add.w	lr, r0, r1
 8005866:	da57      	bge.n	8005918 <__ieee754_sqrt+0x17c>
 8005868:	f1be 0f00 	cmp.w	lr, #0
 800586c:	db54      	blt.n	8005918 <__ieee754_sqrt+0x17c>
 800586e:	f10c 0801 	add.w	r8, ip, #1
 8005872:	eba3 030c 	sub.w	r3, r3, ip
 8005876:	4290      	cmp	r0, r2
 8005878:	bf88      	it	hi
 800587a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800587e:	1a12      	subs	r2, r2, r0
 8005880:	440c      	add	r4, r1
 8005882:	46c4      	mov	ip, r8
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	3f01      	subs	r7, #1
 8005888:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800588c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005890:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005894:	d1dd      	bne.n	8005852 <__ieee754_sqrt+0xb6>
 8005896:	4313      	orrs	r3, r2
 8005898:	d01b      	beq.n	80058d2 <__ieee754_sqrt+0x136>
 800589a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005948 <__ieee754_sqrt+0x1ac>
 800589e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800594c <__ieee754_sqrt+0x1b0>
 80058a2:	e9da 0100 	ldrd	r0, r1, [sl]
 80058a6:	e9db 2300 	ldrd	r2, r3, [fp]
 80058aa:	f7fa fced 	bl	8000288 <__aeabi_dsub>
 80058ae:	e9da 8900 	ldrd	r8, r9, [sl]
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4640      	mov	r0, r8
 80058b8:	4649      	mov	r1, r9
 80058ba:	f7fb f919 	bl	8000af0 <__aeabi_dcmple>
 80058be:	b140      	cbz	r0, 80058d2 <__ieee754_sqrt+0x136>
 80058c0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80058c4:	e9da 0100 	ldrd	r0, r1, [sl]
 80058c8:	e9db 2300 	ldrd	r2, r3, [fp]
 80058cc:	d126      	bne.n	800591c <__ieee754_sqrt+0x180>
 80058ce:	3501      	adds	r5, #1
 80058d0:	463c      	mov	r4, r7
 80058d2:	106a      	asrs	r2, r5, #1
 80058d4:	0863      	lsrs	r3, r4, #1
 80058d6:	07e9      	lsls	r1, r5, #31
 80058d8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80058dc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80058e0:	bf48      	it	mi
 80058e2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80058e6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80058ea:	461c      	mov	r4, r3
 80058ec:	e76d      	b.n	80057ca <__ieee754_sqrt+0x2e>
 80058ee:	0ad3      	lsrs	r3, r2, #11
 80058f0:	3815      	subs	r0, #21
 80058f2:	0552      	lsls	r2, r2, #21
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0fa      	beq.n	80058ee <__ieee754_sqrt+0x152>
 80058f8:	02dc      	lsls	r4, r3, #11
 80058fa:	d50a      	bpl.n	8005912 <__ieee754_sqrt+0x176>
 80058fc:	f1c1 0420 	rsb	r4, r1, #32
 8005900:	fa22 f404 	lsr.w	r4, r2, r4
 8005904:	1e4d      	subs	r5, r1, #1
 8005906:	408a      	lsls	r2, r1
 8005908:	4323      	orrs	r3, r4
 800590a:	1b41      	subs	r1, r0, r5
 800590c:	e772      	b.n	80057f4 <__ieee754_sqrt+0x58>
 800590e:	4608      	mov	r0, r1
 8005910:	e7f0      	b.n	80058f4 <__ieee754_sqrt+0x158>
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	3101      	adds	r1, #1
 8005916:	e7ef      	b.n	80058f8 <__ieee754_sqrt+0x15c>
 8005918:	46e0      	mov	r8, ip
 800591a:	e7aa      	b.n	8005872 <__ieee754_sqrt+0xd6>
 800591c:	f7fa fcb6 	bl	800028c <__adddf3>
 8005920:	e9da 8900 	ldrd	r8, r9, [sl]
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4640      	mov	r0, r8
 800592a:	4649      	mov	r1, r9
 800592c:	f7fb f8d6 	bl	8000adc <__aeabi_dcmplt>
 8005930:	b120      	cbz	r0, 800593c <__ieee754_sqrt+0x1a0>
 8005932:	1ca0      	adds	r0, r4, #2
 8005934:	bf08      	it	eq
 8005936:	3501      	addeq	r5, #1
 8005938:	3402      	adds	r4, #2
 800593a:	e7ca      	b.n	80058d2 <__ieee754_sqrt+0x136>
 800593c:	3401      	adds	r4, #1
 800593e:	f024 0401 	bic.w	r4, r4, #1
 8005942:	e7c6      	b.n	80058d2 <__ieee754_sqrt+0x136>
 8005944:	7ff00000 	.word	0x7ff00000
 8005948:	20000068 	.word	0x20000068
 800594c:	20000070 	.word	0x20000070

08005950 <_init>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	bf00      	nop
 8005954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005956:	bc08      	pop	{r3}
 8005958:	469e      	mov	lr, r3
 800595a:	4770      	bx	lr

0800595c <_fini>:
 800595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595e:	bf00      	nop
 8005960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005962:	bc08      	pop	{r3}
 8005964:	469e      	mov	lr, r3
 8005966:	4770      	bx	lr
